<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux 基础</title>
      <link href="/posts/a4a81253.html"/>
      <url>/posts/a4a81253.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-DDL-操作数据库"><a href="#1-DDL-操作数据库" class="headerlink" title="1 DDL:操作数据库"></a>1 DDL:操作数据库</h2><p>DDL：操作数据库，表等</p><p>DML：对表中的数据进行增删改</p><p>DQL：对表中的数据进行查询</p><p>DCL：对数据库进行权限控制</p><p>打开数据库 mysql -u root -p</p><h3 id="1-1-查询"><a href="#1-1-查询" class="headerlink" title="1.1  查询"></a>1.1  查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><h3 id="1-2-创建数据库"><a href="#1-2-创建数据库" class="headerlink" title="1.2  创建数据库"></a>1.2  创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名称;</span><br></pre></td></tr></table></figure><ul><li><strong>创建数据库(判断，如果不存在则创建)</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 数据库名称;</span><br></pre></td></tr></table></figure><h3 id="1-3-删除数据库"><a href="#1-3-删除数据库" class="headerlink" title="1.3  删除数据库"></a>1.3  删除数据库</h3><ul><li><strong>删除数据库</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE 数据库名称;</span><br></pre></td></tr></table></figure><ul><li><strong>删除数据库(判断，如果存在则删除)</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> 数据库名称;</span><br></pre></td></tr></table></figure><h3 id="1-4-使用数据库"><a href="#1-4-使用数据库" class="headerlink" title="1.4  使用数据库"></a>1.4  使用数据库</h3><ul><li><strong>使用数据库</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名称;</span><br></pre></td></tr></table></figure><ul><li><strong>查看当前使用的数据库</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure><h2 id="2-DDL-操作表"><a href="#2-DDL-操作表" class="headerlink" title="2 DDL:操作表"></a>2 DDL:操作表</h2><p>操作表也就是对表进行增（Create）删（Retrieve）改（Update）查（Delete）。</p><h3 id="2-1-查询表"><a href="#2-1-查询表" class="headerlink" title="2.1  查询表"></a>2.1  查询表</h3><ul><li><strong>查询当前数据库下所有表名称</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><ul><li><strong>查询表结构</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名称;</span><br></pre></td></tr></table></figure><p>查看mysql数据库中func表的结构，运行语句如下：</p><h3 id="2-2-创建表"><a href="#2-2-创建表" class="headerlink" title="2.2  创建表"></a>2.2  创建表</h3><ul><li><strong>创建表</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 (</span><br><span class="line">字段名<span class="number">1</span>  数据类型<span class="number">1</span>,</span><br><span class="line">字段名<span class="number">2</span>  数据类型<span class="number">2</span>,</span><br><span class="line">…</span><br><span class="line">字段名n  数据类型n</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2.3  数据类型"></a>2.3  数据类型</h3><p>MySQL 支持多种类型，可以分为三类：</p><ul><li><p>数值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tinyint : 小整数型，占一个字节</span><br><span class="line"><span class="type">int</span>： 大整数类型，占四个字节</span><br><span class="line">eg ： age <span class="type">int</span></span><br><span class="line"><span class="keyword">double</span> ： 浮点类型</span><br><span class="line">使用格式： 字段名 <span class="keyword">double</span>(总长度,小数点后保留的位数)</span><br><span class="line">eg ： score <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>)   </span><br></pre></td></tr></table></figure></li><li><p>日期</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">date</span> ： 日期值。只包含年月日</span><br><span class="line">eg ：birthday <span class="type">date</span> ： </span><br><span class="line">datetime ： 混合日期和时间值。包含年月日时分秒</span><br></pre></td></tr></table></figure></li><li><p>字符串</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> ： 定长字符串。</span><br><span class="line">优点：存储性能高</span><br><span class="line">缺点：浪费空间</span><br><span class="line">eg ： name <span class="type">char</span>(<span class="number">10</span>)  如果存储的数据字符个数不足<span class="number">10</span>个，也会占<span class="number">10</span>个的空间</span><br><span class="line"><span class="type">varchar</span> ： 变长字符串。</span><br><span class="line">优点：节约空间</span><br><span class="line">缺点：存储性能底</span><br><span class="line">eg ： name <span class="type">varchar</span>(<span class="number">10</span>) 如果存储的数据字符个数不足<span class="number">10</span>个，那就数据字符个数是几就占几个的空间</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-删除表"><a href="#2-4-删除表" class="headerlink" title="2.4  删除表"></a>2.4  删除表</h3><ul><li><strong>删除表</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><ul><li><strong>删除表时判断表是否存在</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> 表名;</span><br></pre></td></tr></table></figure><h3 id="2-5-修改表"><a href="#2-5-修改表" class="headerlink" title="2.5  修改表"></a>2.5  修改表</h3><ul><li><strong>修改表名</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 RENAME <span class="keyword">TO</span> 新的表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将表名student修改为stu</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student rename <span class="keyword">to</span> stu;</span><br></pre></td></tr></table></figure><ul><li><strong>添加一列</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 列名 数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给stu表添加一列address，该字段类型是varchar(50)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> address <span class="type">varchar</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>修改数据类型</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 列名 新数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将stu表中的address字段的类型改为 char(50)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu modify address <span class="type">char</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>修改列名和数据类型</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 列名 新列名 新数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将stu表中的address字段名改为 addr，类型改为varchar(50)</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu change address addr <span class="type">varchar</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>删除列</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 列名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将stu表中的addr字段 删除</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">drop</span> addr;</span><br></pre></td></tr></table></figure><h2 id="3-DML"><a href="#3-DML" class="headerlink" title="3 DML"></a>3 DML</h2><p>DML主要是对数据进行增（insert）删（delete）改（update）操作。</p><h3 id="3-1-添加数据"><a href="#3-1-添加数据" class="headerlink" title="3.1  添加数据"></a>3.1  添加数据</h3><ul><li><strong>给指定列添加数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名<span class="number">1</span>,列名<span class="number">2</span>,…) <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,…);</span><br></pre></td></tr></table></figure><ul><li><strong>给全部列添加数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,…);</span><br></pre></td></tr></table></figure><ul><li><strong>批量添加数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(列名<span class="number">1</span>,列名<span class="number">2</span>,…) <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,…),(值<span class="number">1</span>,值<span class="number">2</span>,…),(值<span class="number">1</span>,值<span class="number">2</span>,…)…;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>,值<span class="number">2</span>,…),(值<span class="number">1</span>,值<span class="number">2</span>,…),(值<span class="number">1</span>,值<span class="number">2</span>,…)…;</span><br></pre></td></tr></table></figure><h3 id="3-2-修改数据"><a href="#3-2-修改数据" class="headerlink" title="3.2  修改数据"></a>3.2  修改数据</h3><ul><li><strong>修改表数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,列名<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span>,… [<span class="keyword">WHERE</span> 条件] ;</span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>修改语句中如果不加条件，则将所有数据都修改！</li><li>像上面的语句中的中括号，表示在写sql语句中可以省略这部分</li></ol></blockquote><ul><li><p><strong>练习</strong></p><ul><li><p>将张三的性别改为女</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> stu <span class="keyword">set</span> sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>将张三的生日改为 1999-12-12 分数改为99.99</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> stu <span class="keyword">set</span> birthday <span class="operator">=</span> <span class="string">&#x27;1999-12-12&#x27;</span>, score <span class="operator">=</span> <span class="number">99.99</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>注意：如果update语句没有加where条件，则会将表中所有数据全部修改！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> stu <span class="keyword">set</span> sex <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上面语句的执行完后查询到的结果是：</p><p><img src="assets/image-20210722204233305.png" alt="image-20210722204233305"></p></li></ul></li></ul><h3 id="3-3-删除数据"><a href="#3-3-删除数据" class="headerlink" title="3.3  删除数据"></a>3.3  删除数据</h3><ul><li><strong>删除数据</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件] ;</span><br></pre></td></tr></table></figure><ul><li><strong>练习</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除张三记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> stu <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除stu表中所有的数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> stu;</span><br></pre></td></tr></table></figure><h2 id="4，DQL"><a href="#4，DQL" class="headerlink" title="4，DQL"></a>4，DQL</h2><p>下面是黑马程序员展示试题库数据的页面</p><p>页面上展示的数据肯定是在数据库中的试题库表中进行存储，而我们需要将数据库中的数据查询出来并展示在页面给用户看。上图中的是最基本的查询效果，那么数据库其实是很多的，不可能在将所有的数据在一页进行全部展示，而页面上会有分页展示的效果，如下：</p><p><img src="assets/image-20210722220139174.png" alt="image-20210722220139174"></p><p>当然上图中的难度字段当我们点击也可以实现排序查询操作。从这个例子我们就可以看出，对于数据库的查询时灵活多变的，需要根据具体的需求来实现，而数据库查询操作也是最重要的操作，所以此部分需要大家重点掌握。</p><p>接下来我们先介绍查询的完整语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    字段列表</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    表名列表 </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    分组字段</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    分组后条件</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    排序字段</span><br><span class="line">LIMIT</span><br><span class="line">    分页限定</span><br></pre></td></tr></table></figure><p>为了给大家演示查询的语句，我们需要先准备表及一些数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除stu表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> stu;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建stu表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu (</span><br><span class="line"> id <span class="type">int</span>, <span class="comment">-- 编号</span></span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">20</span>), <span class="comment">-- 姓名</span></span><br><span class="line"> age <span class="type">int</span>, <span class="comment">-- 年龄</span></span><br><span class="line"> sex <span class="type">varchar</span>(<span class="number">5</span>), <span class="comment">-- 性别</span></span><br><span class="line"> address <span class="type">varchar</span>(<span class="number">100</span>), <span class="comment">-- 地址</span></span><br><span class="line"> math <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>), <span class="comment">-- 数学成绩</span></span><br><span class="line"> english <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>), <span class="comment">-- 英语成绩</span></span><br><span class="line"> hire_date <span class="type">date</span> <span class="comment">-- 入学时间</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu(id,NAME,age,sex,address,math,english,hire_date) </span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;马运&#x27;</span>,<span class="number">55</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;杭州&#x27;</span>,<span class="number">66</span>,<span class="number">74</span>,<span class="string">&#x27;1995-09-01&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;马花疼&#x27;</span>,<span class="number">45</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>,<span class="number">94</span>,<span class="number">47</span>,<span class="string">&#x27;1994-09-01&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;马斯克&#x27;</span>,<span class="number">55</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;香港&#x27;</span>,<span class="number">56</span>,<span class="number">77</span>,<span class="string">&#x27;1999-09-02&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;柳白&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;湖南&#x27;</span>,<span class="number">76</span>,<span class="number">65</span>,<span class="string">&#x27;1997-09-05&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;柳青&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;湖南&#x27;</span>,<span class="number">46</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;1994-09-01&#x27;</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;刘德花&#x27;</span>,<span class="number">57</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;香港&#x27;</span>,<span class="number">99</span>,<span class="number">99</span>,<span class="string">&#x27;1994-09-01&#x27;</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;张学右&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;香港&#x27;</span>,<span class="number">99</span>,<span class="number">99</span>,<span class="string">&#x27;1994-09-01&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;德玛西亚&#x27;</span>,<span class="number">14</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;南京&#x27;</span>,<span class="number">56</span>,<span class="number">65</span>,<span class="string">&#x27;1994-09-02&#x27;</span>);</span><br></pre></td></tr></table></figure><p>接下来咱们从最基本的查询语句开始学起。</p><h3 id="4-1-基础查询"><a href="#4-1-基础查询" class="headerlink" title="4.1  基础查询"></a>4.1  基础查询</h3><h4 id="4-1-1-语法"><a href="#4-1-1-语法" class="headerlink" title="4.1.1  语法"></a>4.1.1  语法</h4><ul><li><strong>查询多个字段</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名; <span class="comment">-- 查询所有数据</span></span><br></pre></td></tr></table></figure><ul><li><strong>去除重复记录</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><ul><li><strong>起别名</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">AS</span>: <span class="keyword">AS</span> 也可以省略</span><br></pre></td></tr></table></figure><h3 id="4-2-条件查询"><a href="#4-2-条件查询" class="headerlink" title="4.2  条件查询"></a>4.2  条件查询</h3><h4 id="4-2-1-语法"><a href="#4-2-1-语法" class="headerlink" title="4.2.1  语法"></a>4.2.1  语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-条件查询练习"><a href="#4-2-2-条件查询练习" class="headerlink" title="4.2.2  条件查询练习"></a>4.2.2  条件查询练习</h4><ul><li><p>查询年龄大于20岁的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询年龄大于等于20岁的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询年龄大于等于20岁 并且 年龄 小于等于 30岁 的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="operator">&amp;&amp;</span>  age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">and</span>  age <span class="operator">&lt;=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure><blockquote><p>上面语句中 &amp;&amp;  和  and  都表示并且的意思。建议使用 and 。</p></blockquote></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure><ul><li><p>查询入学日期在’1994-09-01’ 到 ‘1999-09-01’  之间的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> hire_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;1994-09-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;1999-09-01&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询年龄等于14岁的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">14</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询年龄不等于14岁的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">!=</span> <span class="number">14</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">&lt;&gt;</span> <span class="number">14</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询年龄等于14岁 或者 年龄等于20岁 或者 年龄等于22岁的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">14</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">20</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">22</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> age <span class="keyword">in</span> (<span class="number">14</span>,<span class="number">20</span> ,<span class="number">22</span>);</span><br></pre></td></tr></table></figure></li><li><p>查询英语成绩为 null的学员信息</p><p>null值的比较不能使用 =  或者 != 。需要使用 is  或者 is not</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> english <span class="operator">=</span> <span class="keyword">null</span>; <span class="comment">-- 这个语句是不行的</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> english <span class="keyword">is</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> english <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-2-3-模糊查询练习"><a href="#4-2-3-模糊查询练习" class="headerlink" title="4.2.3  模糊查询练习"></a>4.2.3  模糊查询练习</h4><blockquote><p>模糊查询使用like关键字，可以使用通配符进行占位:</p><p>（1）_ : 代表单个任意字符</p><p>（2）% : 代表任意个数字符</p></blockquote><ul><li><p>查询姓’马’的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;马%&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询第二个字是’花’的学员信息  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;_花%&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>查询名字中包含 ‘德’ 的学员信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%德%&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-排序查询"><a href="#4-3-排序查询" class="headerlink" title="4.3  排序查询"></a>4.3  排序查询</h3><h4 id="4-3-1-语法"><a href="#4-3-1-语法" class="headerlink" title="4.3.1  语法"></a>4.3.1  语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序字段名<span class="number">1</span> [排序方式<span class="number">1</span>],排序字段名<span class="number">2</span> [排序方式<span class="number">2</span>] …;</span><br></pre></td></tr></table></figure><p>上述语句中的排序方式有两种，分别是：</p><ul><li>ASC ： 升序排列 <strong>（默认值）</strong></li><li>DESC ： 降序排列</li></ul><blockquote><p>注意：如果有多个排序条件，当前边的条件值一样时，才会根据第二条件进行排序</p></blockquote><h4 id="4-3-2-练习"><a href="#4-3-2-练习" class="headerlink" title="4.3.2  练习"></a>4.3.2  练习</h4><ul><li><p>查询学生信息，按照年龄升序排列 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">order</span> <span class="keyword">by</span> age ;</span><br></pre></td></tr></table></figure></li><li><p>查询学生信息，按照数学成绩降序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">order</span> <span class="keyword">by</span> math <span class="keyword">desc</span> ;</span><br></pre></td></tr></table></figure></li><li><p>查询学生信息，按照数学成绩降序排列，如果数学成绩一样，再按照英语成绩升序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu <span class="keyword">order</span> <span class="keyword">by</span> math <span class="keyword">desc</span> , english <span class="keyword">asc</span> ;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-4-聚合函数"><a href="#4-4-聚合函数" class="headerlink" title="4.4  聚合函数"></a>4.4  聚合函数</h3><h4 id="4-4-1-概念"><a href="#4-4-1-概念" class="headerlink" title="4.4.1  概念"></a>4.4.1  概念</h4><p> ==将一列数据作为一个整体，进行纵向计算。==</p><p>如何理解呢？假设有如下表</p><p>现有一需求让我们求表中所有数据的数学成绩的总和。这就是对math字段进行纵向求和。</p><h4 id="4-4-2-聚合函数分类"><a href="#4-4-2-聚合函数分类" class="headerlink" title="4.4.2  聚合函数分类"></a>4.4.2  聚合函数分类</h4><div class="table-container"><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>count(列名)</td><td>统计数量（一般选用不为null的列）</td></tr><tr><td>max(列名)</td><td>最大值</td></tr><tr><td>min(列名)</td><td>最小值</td></tr><tr><td>sum(列名)</td><td>求和</td></tr><tr><td>avg(列名)</td><td>平均值</td></tr></tbody></table></div><h4 id="4-4-3-聚合函数语法"><a href="#4-4-3-聚合函数语法" class="headerlink" title="4.4.3  聚合函数语法"></a>4.4.3  聚合函数语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数名(列名) <span class="keyword">FROM</span> 表;</span><br></pre></td></tr></table></figure><blockquote><p>注意：null 值不参与所有聚合函数运算</p></blockquote><h3 id="4-5-分组查询"><a href="#4-5-分组查询" class="headerlink" title="4.5  分组查询"></a>4.5  分组查询</h3><h4 id="4-5-1-语法"><a href="#4-5-1-语法" class="headerlink" title="4.5.1  语法"></a>4.5.1  语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 分组前条件限定] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段名 [<span class="keyword">HAVING</span> 分组后条件过滤];</span><br></pre></td></tr></table></figure><blockquote><p>注意：分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</p></blockquote><h4 id="4-5-2-练习"><a href="#4-5-2-练习" class="headerlink" title="4.5.2  练习"></a>4.5.2  练习</h4><ul><li><p>查询男同学和女同学各自的数学平均分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sex, <span class="built_in">avg</span>(math) <span class="keyword">from</span> stu <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure><blockquote><p>注意：分组之后，查询的字段为聚合函数和分组字段，查询其他字段无任何意义</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name, sex, <span class="built_in">avg</span>(math) <span class="keyword">from</span> stu <span class="keyword">group</span> <span class="keyword">by</span> sex;  <span class="comment">-- 这里查询name字段就没有任何意义</span></span><br></pre></td></tr></table></figure></li><li><p>查询男同学和女同学各自的数学平均分，以及各自人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sex, <span class="built_in">avg</span>(math),<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> stu <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure></li><li><p>查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sex, <span class="built_in">avg</span>(math),<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> stu <span class="keyword">where</span> math <span class="operator">&gt;</span> <span class="number">70</span> <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure></li><li><p>查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组，分组之后人数大于2个的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sex, <span class="built_in">avg</span>(math),<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> stu <span class="keyword">where</span> math <span class="operator">&gt;</span> <span class="number">70</span> <span class="keyword">group</span> <span class="keyword">by</span> sex <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)  <span class="operator">&gt;</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>where 和 having 区别：</strong></p><ul><li><p>执行时机不一样：where 是分组之前进行限定，不满足where条件，则不参与分组，而having是分组之后对结果进行过滤。</p></li><li><p>可判断的条件不一样：where 不能对聚合函数进行判断，having 可以。</p></li></ul><h3 id="4-6-分页查询"><a href="#4-6-分页查询" class="headerlink" title="4.6  分页查询"></a>4.6  分页查询</h3><h4 id="4-6-1-语法"><a href="#4-6-1-语法" class="headerlink" title="4.6.1  语法"></a>4.6.1  语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 LIMIT  起始索引 , 查询条目数;</span><br></pre></td></tr></table></figure><blockquote><p>注意： 上述语句中的起始索引是从0开始</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-Stream</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、创建不可变集合"><a href="#1、创建不可变集合" class="headerlink" title="1、创建不可变集合"></a>1、创建不可变集合</h1><h2 id="1-1如何创建不可变集合？"><a href="#1-1如何创建不可变集合？" class="headerlink" title="1.1如何创建不可变集合？"></a>1.1如何创建不可变集合？</h2><p>在List、Set、Map接口中，都存在of方法，可以创建一个不可变的集合</p><div class="table-container"><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>static  <E> List<E> of(E…elements)</td><td>创建一个具有指定元素的List集合对象</td></tr><tr><td>static  <E> Set<E> of(E…elements)</td><td>创建一个具有指定元素的Set集合对象</td></tr><tr><td>static <K  , V>  Map<K，V> of(E…elements)</td><td>创建一个具有指定元素的Map集合对象</td></tr></tbody></table></div><p>这个集合不能添加，不能删除，不能修改。</p><h2 id="1-2不可变集合的特点？"><a href="#1-2不可变集合的特点？" class="headerlink" title="1.2不可变集合的特点？"></a>1.2不可变集合的特点？</h2><p>定义完成后不可以修改，或者添加、删除</p><h2 id="1-3如何创建不可变集合？"><a href="#1-3如何创建不可变集合？" class="headerlink" title="1.3如何创建不可变集合？"></a>1.3如何创建不可变集合？</h2><p>List、Set、Map接口中，都存在of方法可以创建不可变集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> unchange_collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.不可变的list集合</span></span><br><span class="line">        List&lt;Double&gt; lists = List.of( <span class="number">567.3</span>, <span class="number">323.6</span>, <span class="number">677.8</span>, <span class="number">570.4</span> );</span><br><span class="line">        System.out.println( lists );</span><br><span class="line">        <span class="comment">//不支持添加操作</span></span><br><span class="line">        <span class="comment">//lists.add(988.0);</span></span><br><span class="line">       <span class="comment">// System.out.println( lists );</span></span><br><span class="line">        <span class="comment">//不支持修改</span></span><br><span class="line">        <span class="comment">//lists.set( 2,677.9 );</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> lists.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println( score );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.不可变的set集合 不允许重复修改</span></span><br><span class="line">       Set&lt;String&gt; names =  Set.of(<span class="string">&quot;低级&quot;</span>,<span class="string">&quot;空间&quot;</span>,<span class="string">&quot;多少&quot;</span>,<span class="string">&quot;换的&quot;</span>);</span><br><span class="line">        <span class="comment">//不支持添加操作</span></span><br><span class="line">        <span class="comment">//names.add(&quot;跟胡&quot;);</span></span><br><span class="line">        System.out.println( names );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.不可变的Map集合 不允许重复修改</span></span><br><span class="line">        Map&lt;String,Integer&gt; maps = Map.of(<span class="string">&quot;huawei&quot;</span>,<span class="number">2</span>,<span class="string">&quot;java&quot;</span>,<span class="number">1</span>,<span class="string">&quot;手表&quot;</span>,<span class="number">8</span>);</span><br><span class="line">        <span class="comment">//maps.put(&quot;衣服&quot;,3);</span></span><br><span class="line">        System.out.println( maps );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、Stream流</p><p>2.1 Stream流的概述</p><p>体验Stream流的作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个集合</span></span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(  );</span><br><span class="line">        Collections.addAll(names,<span class="string">&quot;张三丰&quot;</span>,<span class="string">&quot;张无忌&quot;</span>,<span class="string">&quot;周芷若&quot;</span>,<span class="string">&quot;赵敏&quot;</span>,<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        System.out.println(names);</span><br><span class="line"><span class="comment">//        //从集合中找出姓张的</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; zhangList = new ArrayList&lt;&gt;(  );</span></span><br><span class="line"><span class="comment">//        for (String name : names) &#123;</span></span><br><span class="line"><span class="comment">//            if(name.startsWith( &quot;张&quot; ))&#123;</span></span><br><span class="line"><span class="comment">//                zhangList.add( name );</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        System.out.println(zhangList);</span></span><br><span class="line"><span class="comment">//        //找zhang名称长度是三的</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; sanList  = new ArrayList&lt;&gt;(  );</span></span><br><span class="line"><span class="comment">//        for (String name : zhangList) &#123;</span></span><br><span class="line"><span class="comment">//            if(name.length() == 3)&#123;</span></span><br><span class="line"><span class="comment">//                sanList.add( name );</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        System.out.println( sanList );</span></span><br><span class="line">        <span class="comment">//使用stream实现</span></span><br><span class="line">        names.stream().filter( s -&gt; s.startsWith( <span class="string">&quot;张&quot;</span> ) ).filter( s -&gt; s.length() == <span class="number">3</span> ).forEach( s -&gt; System.out.println(s));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、Stream流的作用是什么，结合了什么技术？<br>简化集合、数组操作的API。结合了Lambda表达式。</p><p>2、说说Stream流的思想和使用步骤。<br>先得到集合或者数组的Stream流（就是一根传送带）。<br>把元素放上去。<br>然后就用这个Stream流简化的API来方便的操作元素。</p><h2 id="Stream流的获取"><a href="#Stream流的获取" class="headerlink" title="Stream流的获取"></a>Stream流的获取</h2><p>集合获取Stream流的方式</p><p>可以使用Collection接口中的默认方法stream()生成流</p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>default  Stream<E> stream()</td><td>获取当前集合对象的Stream流</td></tr></tbody></table></div><p>数组获取Stream流的方式</p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>public  static <T>  Stream<T>  stream(T[]  array)</td><td>获取当前数组的Stream流</td></tr><tr><td>public  static<T>  Stream<T>  of(T…  values)</td><td>获取当前数组/可变数据的Stream流</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//collection集合</span></span><br><span class="line">        Collection&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(  );</span><br><span class="line">        Stream&lt;String&gt; s = list.stream();</span><br><span class="line">        <span class="comment">//Map集合</span></span><br><span class="line">        Map&lt;String,Integer&gt; maps = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//键流</span></span><br><span class="line">        Stream&lt;String&gt; keyStream = maps.keySet().stream();</span><br><span class="line">        <span class="comment">//值流</span></span><br><span class="line">        Stream&lt;Integer&gt; valueStream= maps.values().stream();</span><br><span class="line">        <span class="comment">//键值流</span></span><br><span class="line">       Stream&lt;Map.Entry&lt;String,Integer&gt;&gt; keyAndValueStream =  maps.entrySet().stream();</span><br><span class="line">       <span class="comment">//数组获取值</span></span><br><span class="line">        String[] names = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line">       Stream&lt;String&gt; nameStream =  Arrays.stream( names );</span><br><span class="line"></span><br><span class="line">       Stream&lt;String&gt; nameStream2 = Stream.of(names);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>集合获取Stream流的方式？<br>集合获取Stream的方式是通过调用stream()方法实现的</p><h2 id="Stream流的常用方法"><a href="#Stream流的常用方法" class="headerlink" title="Stream流的常用方法"></a>Stream流的常用方法</h2><p>Stream流的常用API(中间操作方法)</p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Stream<T>  filter(Predicate&lt;?  super  T&gt;  predicate)</td><td>用于对流中的数据进行<strong>过滤。</strong></td></tr><tr><td>Stream<T>  limit(long maxSize)</td><td>获取前几个元素</td></tr><tr><td>Stream<T>  skip(long n)</td><td>跳过前几个元素</td></tr><tr><td>Stream<T>  distinct()</td><td>去除流中重复的元素。依赖(hashCode和equals方法)</td></tr><tr><td>static  <T> Stream<T> concat(Stream  a, Stream b)</td><td><strong>合并</strong>a和b两个流为一个流</td></tr></tbody></table></div><p>注意：<br>中间方法也称为非终结方法，调用完成后返回新的Stream流可以继续使用，支持链式编程。<br>在Stream流中无法直接修改集合、数组中的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.ls.LSOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(  );</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张忌&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;流无&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;撒你无&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过滤</span></span><br><span class="line">      <span class="comment">/*  list.stream().filter( new Predicate&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean test(String s) &#123;</span></span><br><span class="line"><span class="comment">                return s.startsWith(&quot;张&quot;) ;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125; );*/</span></span><br><span class="line">      list.stream().filter( s -&gt; s.startsWith( <span class="string">&quot;张&quot;</span> ) ).forEach(s -&gt; System.out.println(s));</span><br><span class="line">     <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span>  list.stream().filter( s -&gt; s.length() == <span class="number">3</span> ).count();</span><br><span class="line">        System.out.println( size );</span><br><span class="line">        <span class="comment">//limit取前几个元素</span></span><br><span class="line">        list.stream().filter( s -&gt; s.startsWith( <span class="string">&quot;张&quot;</span> ) ).limit( <span class="number">2</span> ).forEach( s -&gt; System.out.println(s) );</span><br><span class="line">        <span class="comment">//skip跳过</span></span><br><span class="line">        list.stream().filter( s -&gt; s.startsWith( <span class="string">&quot;张&quot;</span> ) ).skip( <span class="number">1</span> ).forEach( s -&gt; System.out.println(s) );</span><br><span class="line">        <span class="comment">//map加工方法</span></span><br><span class="line">        <span class="comment">//forEach 遍历</span></span><br><span class="line">        <span class="comment">//给集合前面都加上 外事</span></span><br><span class="line">        list.stream().map( s -&gt; <span class="string">&quot;外事：&quot;</span> + s).forEach( s -&gt; System.out.println(s) );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把所有名称加工成学生对象</span></span><br><span class="line">        list.stream().map( s -&gt; <span class="keyword">new</span> <span class="title class_">Student</span>( s ) ).forEach(s -&gt; System.out.println(s)  );</span><br><span class="line">        <span class="comment">//合并流 concat</span></span><br><span class="line">      Stream&lt;String&gt; s1 =  list.stream().filter( s -&gt; s.startsWith( <span class="string">&quot;张&quot;</span> ) );</span><br><span class="line">      Stream&lt;String&gt; s2 = Stream.of( <span class="string">&quot;Java1&quot;</span>,<span class="string">&quot;Java2&quot;</span> );</span><br><span class="line">      Stream&lt;String&gt; s3 = Stream.concat( s1,s2 );</span><br><span class="line">      s3.forEach( s -&gt; System.out.println(s) );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stream流的常见终结操作方法</p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>void  forEach(Consumer  action)</td><td>对此流的每个元素执行遍历操作</td></tr><tr><td>long count()</td><td>返回此流中的元素数</td></tr></tbody></table></div><p>注意：终结操作方法，调用完成后流就无法继续使用了，原因是不会返回Stream了。</p><h2 id="Stream流的综合应用"><a href="#Stream流的综合应用" class="headerlink" title="Stream流的综合应用"></a>Stream流的综合应用</h2><h2 id="收集Stream流"><a href="#收集Stream流" class="headerlink" title="收集Stream流"></a>收集Stream流</h2><h2 id="3、异常处理"><a href="#3、异常处理" class="headerlink" title="3、异常处理"></a>3、异常处理</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java ATM系统功能实战</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h1 id="ATM系统功能实战"><a href="#ATM系统功能实战" class="headerlink" title="ATM系统功能实战"></a>ATM系统功能实战</h1><h2 id="系统准备、首页设计"><a href="#系统准备、首页设计" class="headerlink" title="系统准备、首页设计"></a>系统准备、首页设计</h2><p><strong>系统准备内容分析：</strong></p><p>①每个用户的账户信息都是一个对象，需要提供账户类。</p><p>②需要准备一个容器，用于存储系统全部账户对象信息。</p><p>③首页只需要包含：登录和注册2个功能。</p><p><strong>实现步骤：</strong></p><p>①定义账户类，用于后期创建账户对象封装用户的账户信息。</p><p>②账户类中的信息至少需要包含（卡号、姓名、密码、余额、取现额度）</p><p>③需要准备一个ArrayList的集合，用于存储系统用户的账户对象。</p><p>④定义一个系统启动类ATMSystem需要展示欢迎页包含2个功能：开户功能、登录账户。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ATM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     系统的账户类，代表账户的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="keyword">private</span> String cardId; <span class="comment">// 卡号</span></span><br><span class="line">        <span class="keyword">private</span> String userName; <span class="comment">// 用户名称</span></span><br><span class="line">        <span class="keyword">private</span> String passWord; <span class="comment">// 密码</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> money; <span class="comment">// 账户余额</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> quotaMoney; <span class="comment">// 每次取现额度限度。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getCardId</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cardId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCardId</span><span class="params">(String cardId)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.cardId = cardId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> userName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.userName = userName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getPassWord</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> passWord;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassWord</span><span class="params">(String passWord)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.passWord = passWord;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getMoney</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> money;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(<span class="type">double</span> money)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.money = money;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getQuotaMoney</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> quotaMoney;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setQuotaMoney</span><span class="params">(<span class="type">double</span> quotaMoney)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.quotaMoney = quotaMoney;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ATM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.ServiceConfigurationError;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ATMSysteam</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                <span class="comment">// 2、创建一个集合对象，用于后期存入账户对象。</span></span><br><span class="line">                ArrayList&lt;Account&gt; accounts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 3、展示系统欢迎页面</span></span><br><span class="line">                System.out.println(<span class="string">&quot;======欢迎您进入到ATM系统===============&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;1、登录账户&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;2、注册账户&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;请您选择操作：&quot;</span>);</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">command</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                    <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            <span class="comment">// 登录操作</span></span><br><span class="line">                            login(accounts, sc);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                            <span class="comment">// 注册账户</span></span><br><span class="line">                            register(accounts, sc);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            System.out.println(<span class="string">&quot;当前输入的操作不存在！&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>用户的账户信息，系统如何表示的？ ⚫ 定义账户类Account，定义系统关心的属性信息。 2、系统采用什么来存储全部用户的账户对象信息？ ArrayList accounts = new ArrayList&lt;&gt;()；</p><h2 id="用户开户功能实现"><a href="#用户开户功能实现" class="headerlink" title="用户开户功能实现"></a>用户开户功能实现</h2><p>开户功能其实就是就是往系统的集合容器中存入一个新的账户对象的信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开户功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(ArrayList&lt;Account&gt; accounts, Scanner sc)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;==================欢迎您进入到开户操作======================&quot;</span>);</span><br><span class="line">    <span class="comment">// 2、创建一个账户对象封装账户信息</span></span><br><span class="line">    <span class="type">Account</span> <span class="variable">acc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">    <span class="comment">// 1、录入用户账户信息</span></span><br><span class="line">    System.out.println(<span class="string">&quot;请您输入账户名称：&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> sc.next();</span><br><span class="line">    acc.setUserName(userName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请您输入账户密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">passWord</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请您输入确认密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">okPassWord</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="keyword">if</span> (okPassWord.equals(passWord)) &#123;</span><br><span class="line">            <span class="comment">// 密码无问题</span></span><br><span class="line">            acc.setPassWord(okPassWord);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;两次输入的密码不一致！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;请您设置当次取现额度：&quot;</span>);</span><br><span class="line">    <span class="type">double</span> <span class="variable">quataMoney</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">    acc.setQuotaMoney(quataMoney);</span><br><span class="line">    <span class="comment">// 关键点：为当前账户生成一个随机的8位数字作为卡号，卡号不能与其他用户的卡号重复。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">cardId</span> <span class="operator">=</span> createCardId(accounts);</span><br><span class="line">    acc.setCardId(cardId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、把账户对象存入到集合容器对象中去</span></span><br><span class="line">    accounts.add(acc);</span><br><span class="line">    System.out.println(<span class="string">&quot;恭喜您,&quot;</span> + acc.getUserName() + <span class="string">&quot;先生/女士，您开户完成，您的卡号是：&quot;</span> + acc.getCardId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>开户功能实现步骤</strong></p><p>①定义方法完成开户：</p><p>②键盘录入姓名、密码、确认密码（需保证两次密码一致）</p><p>③生成账户卡号，卡号必须由系统自动生成8位数字（必须保证卡号的唯一）</p><p>④创建Account账户类对象用于封装账户信息（姓名、密码、卡号）</p><p>⑤把Account账户类对象存入到集合accounts中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="用户登录功能实现"><a href="#用户登录功能实现" class="headerlink" title="用户登录功能实现"></a>用户登录功能实现</h2><p><strong>分析</strong></p><p>①定义方法：</p><p>②让用户键盘录入卡号，根据卡号查询账户对象。</p><p>③如果没有找到了账户对象，说明卡号不存在，提示继续输入卡号。</p><p>④如果找到了账户对象，说明卡号存在，继续输入密码。</p><p>⑤如果密码不正确，提示继续输入密码</p><p>⑥如果密码正确，提示登陆成功！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 用户登录功能</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(ArrayList&lt;Account&gt; accounts, Scanner sc)</span> &#123;</span><br><span class="line">             System.out.println(<span class="string">&quot;==================欢迎您进入到登录操作======================&quot;</span>);</span><br><span class="line">             <span class="keyword">if</span> (accounts.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                 <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                     System.out.println(<span class="string">&quot;请您输入登录的卡号：&quot;</span>);</span><br><span class="line">                     <span class="type">String</span> <span class="variable">cardId</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                     <span class="comment">// 2、根据卡号去集合中查询是否存在账户对象</span></span><br><span class="line">                     <span class="type">Account</span> <span class="variable">acc</span> <span class="operator">=</span> getAccountByCardId(cardId, accounts);</span><br><span class="line">                     <span class="comment">// 判断账户对象是否存在，存在说明卡号正确</span></span><br><span class="line">                     <span class="keyword">if</span> (acc != <span class="literal">null</span>) &#123;</span><br><span class="line">                         <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                             <span class="comment">// 3、判断密码是否正确</span></span><br><span class="line">                             System.out.println(<span class="string">&quot;请您输入登录的密码：&quot;</span>);</span><br><span class="line">                             <span class="type">String</span> <span class="variable">passWord</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                             <span class="keyword">if</span> (acc.getPassWord().equals(passWord)) &#123;</span><br><span class="line">                                 <span class="comment">// 登录成功了！</span></span><br><span class="line">                                 System.out.println(<span class="string">&quot;欢迎你：&quot;</span> + acc.getUserName() + <span class="string">&quot;先生/女士进入系统，您可开始办理你的业务了!&quot;</span>);</span><br><span class="line">                                 <span class="comment">// 展示登录成功后的操作界面。</span></span><br><span class="line">                                 showCommand(sc, acc, accounts);</span><br><span class="line">                                 <span class="keyword">return</span>;</span><br><span class="line">                             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                 System.out.println(<span class="string">&quot;您的密码不正确！&quot;</span>);</span><br><span class="line">                             &#125;</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                         System.out.println(<span class="string">&quot;卡号不存在，请确认！&quot;</span>);</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 System.out.println(<span class="string">&quot;当前系统无任何账户，请先注册再登录！&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="用户操作页设计、查询账户、退出账户功能实现"><a href="#用户操作页设计、查询账户、退出账户功能实现" class="headerlink" title="用户操作页设计、查询账户、退出账户功能实现"></a>用户操作页设计、查询账户、退出账户功能实现</h2><p>①用户登录成功后，需要进入用户操作页，退出账户是需要回到首页的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">            * 登录后展示的界面</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showCommand</span><span class="params">(Scanner sc, Account acc, ArrayList&lt;Account&gt; accounts)</span> &#123;</span><br><span class="line">               <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                   System.out.println(<span class="string">&quot;==================欢迎您进入到操作界面======================&quot;</span>);</span><br><span class="line">                   System.out.println(<span class="string">&quot;1、查询&quot;</span>);</span><br><span class="line">                   System.out.println(<span class="string">&quot;2、存款&quot;</span>);</span><br><span class="line">                   System.out.println(<span class="string">&quot;3、取款&quot;</span>);</span><br><span class="line">                   System.out.println(<span class="string">&quot;4、转账&quot;</span>);</span><br><span class="line">                   System.out.println(<span class="string">&quot;5、修改密码&quot;</span>);</span><br><span class="line">                   System.out.println(<span class="string">&quot;6、退出&quot;</span>);</span><br><span class="line">                   System.out.println(<span class="string">&quot;7、注销账户&quot;</span>);</span><br><span class="line">                   System.out.println(<span class="string">&quot;请您输入操作命令：&quot;</span>);</span><br><span class="line">                   <span class="type">int</span> <span class="variable">command</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                   <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                           <span class="comment">// 查询账户信息展示</span></span><br><span class="line">                           showAccount(acc);</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                           <span class="comment">// 存款</span></span><br><span class="line">                           depositMoney(acc, sc);</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                           <span class="comment">// 取款</span></span><br><span class="line">                           drawMoney(acc, sc);</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                           <span class="comment">// 转账</span></span><br><span class="line">                           transferMoney(acc, accounts, sc);</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                           <span class="comment">// 修改密码</span></span><br><span class="line">                           updatePassWord(acc, sc);</span><br><span class="line">                           <span class="keyword">return</span>; <span class="comment">// 跳出当前操作的方法，最终回到首页</span></span><br><span class="line">                       <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                           <span class="comment">// 退出 回到首页</span></span><br><span class="line">                           System.out.println(<span class="string">&quot;欢迎下次继续光临！！&quot;</span>);</span><br><span class="line">                           <span class="keyword">return</span>; <span class="comment">// 结束登录后的全部操作</span></span><br><span class="line">                       <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                           <span class="comment">// 注销账户</span></span><br><span class="line">                           accounts.remove(acc); <span class="comment">// 从集合对象中删除当前账户对象。</span></span><br><span class="line">                           System.out.println(<span class="string">&quot;您的账户已经完成了销毁，您将不可以进行登录了！&quot;</span>);</span><br><span class="line">                           <span class="keyword">return</span>;</span><br><span class="line">                       <span class="keyword">default</span>:</span><br><span class="line">                           System.out.println(<span class="string">&quot;您的操作命令有误！&quot;</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>②查询就是直接展示当前登录成功的账户对象的信息。</p><h2 id="用户存款功能实现"><a href="#用户存款功能实现" class="headerlink" title="用户存款功能实现"></a>用户存款功能实现</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> static void show<span class="constructor">Account(Account <span class="params">acc</span>)</span> &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;==================您当前账户详情信息如下======================&quot;</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;卡号：&quot;</span> + acc.get<span class="constructor">CardId()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;户主：&quot;</span> + acc.get<span class="constructor">UserName()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;余额：&quot;</span> + acc.get<span class="constructor">Money()</span>);</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;当次取现额度：&quot;</span> + acc.get<span class="constructor">QuotaMoney()</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①存款就是拿到当前账户对象。</p><p>②然后让用户输入存款的金额。</p><p>③调用账户对象的setMoney方法将账户余额修改成存钱后的余额。</p><p>④存钱后需要查询一下账户信息，确认是否存钱成功了！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">depositMoney</span><span class="params">(Account acc, Scanner sc)</span> &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;==================欢迎进入账户存款操作======================&quot;</span>);</span><br><span class="line">              System.out.println(<span class="string">&quot;请您输入存款金额：&quot;</span>);</span><br><span class="line">              <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">              acc.setMoney(acc.getMoney() + money);</span><br><span class="line">              showAccount(acc);</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h2 id="用户取款功能实现"><a href="#用户取款功能实现" class="headerlink" title="用户取款功能实现"></a>用户取款功能实现</h2><p><strong>取款分析</strong></p><p>①取款需要先判断账户是否有钱。</p><p>②有钱则拿到自己账户对象。</p><p>③然后让用户输入取款金额</p><p>④判断取款金额是否超过了当次限额，以及余额是否足够</p><p>⑤满足要求则调用账户对象的setMoney方法完成金额的修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h2 id="用户转账功能实现"><a href="#用户转账功能实现" class="headerlink" title="用户转账功能实现"></a>用户转账功能实现</h2><p><strong>分析</strong></p><p>①转账功能需要判断系统中是否有2个账户对象及以上。</p><p>②同时还要判断自己账户是否有钱。</p><p>③接下来需要输入对方卡号，判断对方账户是否存在。</p><p>④对方账户存在还需要认证对方户主的姓氏。</p><p>⑤满足要求则可以把自己账户对象的金额修改到对方账户对象中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 从当前账户对象中把金额转给其他账户对象。</span></span><br><span class="line"><span class="comment">           *</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> acc</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> accounts</span></span><br><span class="line"><span class="comment">           * <span class="doctag">@param</span> sc</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">transferMoney</span><span class="params">(Account acc, ArrayList&lt;Account&gt; accounts, Scanner sc)</span> &#123;</span><br><span class="line">              <span class="comment">// 1、判断自己的账户中是否有钱</span></span><br><span class="line">              <span class="keyword">if</span> (acc.getMoney() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                  System.out.println(<span class="string">&quot;您自己都没钱，就别转了吧！&quot;</span>);</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 2、判断总账户数量是否大于等于2个。</span></span><br><span class="line">              <span class="keyword">if</span> (accounts.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                      <span class="comment">// 3、让当前用户输入对方的账号进行转账</span></span><br><span class="line">                      System.out.println(<span class="string">&quot;请您输入对方卡号：&quot;</span>);</span><br><span class="line">                      <span class="type">String</span> <span class="variable">cardId</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">                      <span class="comment">// 4、根据卡号查询出集合中的账户对象</span></span><br><span class="line">                      <span class="type">Account</span> <span class="variable">otherAcc</span> <span class="operator">=</span> getAccountByCardId(cardId, accounts);</span><br><span class="line">                      <span class="comment">// 5、判断账户对象是否存在，而且这个账户对象不能是自己。</span></span><br><span class="line">                      <span class="keyword">if</span> (otherAcc != <span class="literal">null</span>) &#123;</span><br><span class="line">                          <span class="comment">// 6、判断当前账户是否是自己。</span></span><br><span class="line">                          <span class="keyword">if</span> (acc.getCardId().equals(otherAcc.getCardId())) &#123;</span><br><span class="line">                              System.out.println(<span class="string">&quot;不能给自己账户转账！&quot;</span>);</span><br><span class="line">                          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                              <span class="comment">// 7、正式进入到转账逻辑了</span></span><br><span class="line">                              <span class="comment">// 黑马刘德华</span></span><br><span class="line">                              <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="string">&quot;*&quot;</span> + otherAcc.getUserName().substring(<span class="number">1</span>);</span><br><span class="line">                              System.out.println(<span class="string">&quot;请您确认[&quot;</span> + rs + <span class="string">&quot;]的姓氏来确认！&quot;</span>);</span><br><span class="line">                              System.out.println(<span class="string">&quot;请您输入对方的姓氏：&quot;</span>);</span><br><span class="line">                              <span class="type">String</span> <span class="variable">preName</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                              <span class="keyword">if</span> (otherAcc.getUserName().startsWith(preName)) &#123;</span><br><span class="line">                                  <span class="comment">// 认证通过</span></span><br><span class="line">                                  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                                      System.out.println(<span class="string">&quot;请您输入转账的金额（您最多可以转账：&quot;</span> + acc.getMoney() + <span class="string">&quot;元）：&quot;</span>);</span><br><span class="line">                                      <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">                                      <span class="keyword">if</span> (money &gt; acc.getMoney()) &#123;</span><br><span class="line">                                          System.out.println(<span class="string">&quot;你不听话，没有这么多钱可以转！&quot;</span>);</span><br><span class="line">                                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                          <span class="comment">// 开始转</span></span><br><span class="line">                                          acc.setMoney(acc.getMoney() - money); <span class="comment">// 更新自己账户</span></span><br><span class="line">                                          otherAcc.setMoney(otherAcc.getMoney() + money);</span><br><span class="line">                                          System.out.println(<span class="string">&quot;您已经完成转账！您当前还剩余：&quot;</span> + acc.getMoney());</span><br><span class="line">                                          <span class="keyword">return</span>;</span><br><span class="line">                                      &#125;</span><br><span class="line">                                  &#125;</span><br><span class="line"></span><br><span class="line">                              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                  System.out.println(<span class="string">&quot;您输入对方的信息有误！&quot;</span>);</span><br><span class="line">                              &#125;</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                          System.out.println(<span class="string">&quot;您输入的转账卡号不存在！&quot;</span>);</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  System.out.println(<span class="string">&quot;当前系统中没有其他账户可以转账，去注册一个账户吧！&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h2 id="用户密码修改、销户功能实现"><a href="#用户密码修改、销户功能实现" class="headerlink" title="用户密码修改、销户功能实现"></a>用户密码修改、销户功能实现</h2><p><strong>分析</strong></p><p>①修改密码就是把当前对象的密码属性使用set方法进行更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">            * 修改当前账户对象的密码</span></span><br><span class="line"><span class="comment">            *</span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> acc</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updatePassWord</span><span class="params">(Account acc, Scanner sc)</span> &#123;</span><br><span class="line">               <span class="comment">// 1、判断旧密码是否正确</span></span><br><span class="line">               <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                   System.out.println(<span class="string">&quot;请您输入当前密码认证：&quot;</span>);</span><br><span class="line">                   <span class="type">String</span> <span class="variable">passWord</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                   <span class="keyword">if</span> (acc.getPassWord().equals(passWord)) &#123;</span><br><span class="line">                       <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                           <span class="comment">// 2、输入新密码</span></span><br><span class="line">                           System.out.println(<span class="string">&quot;请您输入新密码：&quot;</span>);</span><br><span class="line">                           <span class="type">String</span> <span class="variable">newPassWord</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                           System.out.println(<span class="string">&quot;请您确认新密码：&quot;</span>);</span><br><span class="line">                           <span class="type">String</span> <span class="variable">okPassWord</span> <span class="operator">=</span> sc.next();</span><br><span class="line">                           <span class="comment">// 3、比对两次密码是否一致</span></span><br><span class="line">                           <span class="keyword">if</span> (newPassWord.equals(okPassWord)) &#123;</span><br><span class="line">                               acc.setPassWord(okPassWord);</span><br><span class="line">                               System.out.println(<span class="string">&quot;密码已经修改成功，请重新登录！&quot;</span>);</span><br><span class="line">                               <span class="keyword">return</span>;</span><br><span class="line">                           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                               System.out.println(<span class="string">&quot;两次密码不一致！&quot;</span>);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       System.out.println(<span class="string">&quot;您输入的密码有误。请重新确认密码！&quot;</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>②销户是从集合对象中删除当前对象，并回到首页。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 初始化 Hexo 项目</title>
      <link href="/posts/a4a81253.html"/>
      <url>/posts/a4a81253.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-远程连接失败排查流程"><a href="#1-远程连接失败排查流程" class="headerlink" title="1.远程连接失败排查流程"></a>1.远程连接失败排查流程</h1><h2 id="初始化-Hexo-项目"><a href="#初始化-Hexo-项目" class="headerlink" title="初始化 Hexo 项目"></a>初始化 Hexo 项目</h2><ol><li><p>在目标路径（我这里选的路径为【C:/Blog】）打开cmd命令窗口，执行<code>hexo init</code>初始化项目。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog-demo(项目名)<span class="number">2</span>.进入`blog-demo` ，输入`npm i`安装相关依赖。</span><br></pre></td></tr></table></figure></li></ol><p>2.进入<code>blog-demo</code> ，输入<strong><code>npm i</code></strong>安装相关依赖。</p><p>3.输入hexo server或者<strong>hexo s 启动项目</strong></p><p>4.打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> ，看到下面的效果，说明你的博客已经构建成功了。</p><h2 id="将静态博客挂载到-GitHub-Pages"><a href="#将静态博客挂载到-GitHub-Pages" class="headerlink" title="将静态博客挂载到 GitHub Pages"></a>将静态博客挂载到 GitHub Pages</h2><ol><li><p><strong>安装 hexo-deployer-git</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li><p><strong>修改 _config.yml 文件</strong><br>在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。<br>修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为<code>main</code>代表主分支（注意缩进）。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repository:</span> git@github.com:Fomalhaut-Blog/Fomalhaut-Blog.github.io.git</span><br><span class="line"><span class="symbol">  branch:</span> main</span><br></pre></td></tr></table></figure></li><li><p>修改好配置后，运行如下命令，将代码部署到 GitHub（Hexo三连）。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo <span class="keyword">generate</span> &amp;&amp; hexo deploy <span class="comment">// Git BASH终端</span></span><br><span class="line">hexo clean ; hexo <span class="keyword">generate</span> ; hexo deploy </span><br></pre></td></tr></table></figure></li></ol><p><strong>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令。</strong></p><p>hexo generate：生成静态文章，可以用<code>hexo g</code>缩写</p><p>   hexo deploy：部署文章，可以用<code>hexo d</code>缩写</p><h2 id="5-基础用法说明"><a href="#5-基础用法说明" class="headerlink" title="5. 基础用法说明"></a>5. 基础用法说明</h2><h3 id="5-1-Front-matter"><a href="#5-1-Front-matter" class="headerlink" title="5.1 Front-matter"></a>5.1 Front-matter</h3><p><code>Front-matter</code> 是 markdown 文件最上方以<code>---</code>分隔的区域，用于指定个别档案的变数。</p><ul><li>Page Front-matter 用于页面配置</li><li>Post Front-matter 用于文章页配置</li></ul><p>如果标注可选的参数，可根据自己需要添加，不用全部都写</p><p><strong>Page Front-matter：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">MARKDOWN</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">第一篇文章</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2023-4</span><span class="number">-14</span> <span class="number">22</span><span class="string">：27：00</span></span><br><span class="line"><span class="attr">updated:</span> <span class="number">2023-4</span><span class="number">-14</span> <span class="number">22</span><span class="string">：27：00</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">## 这是我的第一篇文章</span></span><br></pre></td></tr></table></figure><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><ol><li><p>前往你的Hexo博客根目录，打开<code>Git Bash</code>执行如下命令：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> tags</span><br></pre></td></tr></table></figure></li><li><p>在<code>[BlogRoot]\source\</code>会生成一个含有<code>index.md</code>文件的<code>tags</code>文件夹。</p></li><li><p>修改<code>[BlogRoot]\source\tags\index.md</code>，添加<code>type: &quot;tags&quot;</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-10-28 12:00:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><ol><li><p>前往你的Hexo博客根目录，打开cmd命令窗口执行如下命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHELL</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">hexo new page <span class="built_in">link</span></span></span><br></pre></td></tr></table></figure></li><li><p>在<code>[BlogRoot]\source\</code>会生成一个含有<code>index.md</code>文件的<code>link</code>文件夹</p></li><li><p>修改<code>[BlogRoot]\source\link\index.md</code>，添加<code>type: &quot;link&quot;</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">MARKDOWN</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">link</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2022-10-28 12:00:00</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;link&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li><li><p>前往<code>[BlogRoot]\source\_data</code>创建一个<code>link.yml</code>文件（如果沒有 <code>_data</code> 文件夹，请自行创建），并写入如下信息（根据你的需要写）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">YAML</span><br><span class="line"></span><br><span class="line">- class_name: <span class="number">1</span>.技术支持</span><br><span class="line">  class_desc: 本网站的搭建由以下开源作者提供技术支持</span><br><span class="line">  link_list: </span><br><span class="line">    - name: Hexo </span><br><span class="line">      link: https:<span class="regexp">//</span>hexo.io<span class="regexp">/zh-cn/</span></span><br><span class="line">      avatar: https:<span class="regexp">//</span>d33wubrfki0l68.cloudfront.net<span class="regexp">/6657ba50e702d84afb32fe846bed54fba1a77add/</span><span class="number">827</span>ae/logo.svg</span><br><span class="line">      descr: 快速、简单且强大的网志框架</span><br><span class="line">      siteshot: https:<span class="regexp">//</span>source.fomal.cc<span class="regexp">/siteshot/</span>hexo.io.jpg</span><br><span class="line">      </span><br></pre></td></tr></table></figure></li></ol><h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><p>主題內置了一个简单的404页面，可在设置中开放。</p><p>如需本地预览，请访问 <a href="http://localhost:4000/404.html">http://localhost:4000/404.html</a></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">YML</span><br><span class="line"><span class="meta"># A simple 404 page</span></span><br><span class="line"><span class="symbol">error_404:</span></span><br><span class="line"><span class="symbol">  enable:</span> true</span><br><span class="line"><span class="symbol">  subtitle:</span> <span class="string">&quot;页面沒有找到&quot;</span></span><br><span class="line"><span class="symbol">  background:</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础</title>
      <link href="/posts/a4a81253.html"/>
      <url>/posts/a4a81253.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-远程连接失败排查流程"><a href="#1-远程连接失败排查流程" class="headerlink" title="1.远程连接失败排查流程"></a>1.远程连接失败排查流程</h1><h2 id="1-1-ip地址，端口号，协议"><a href="#1-1-ip地址，端口号，协议" class="headerlink" title="1.1 ip地址，端口号，协议"></a>1.1 ip地址，端口号，协议</h2><div class="table-container"><table><thead><tr><th>p地址简易分类</th><th></th></tr></thead><tbody><tr><td>内网ip地址（局域 网，私网）</td><td>ip地址只能在某范围内使用。 192.168.xx.xx 10.0.0.200</td></tr><tr><td>公网ip地址（极其宝 贵 ipv4）</td><td>用公网ip的服务器（设备），可以被 任何地方访问。</td></tr></tbody></table></div><p>查询 IP地址 ip a =ip address</p><p>2) 端口<br>端口号： 用于区分不同服务的。</p><p>http协议 80</p><p>https协议 443</p><p><strong>远程连接 22</strong></p><h2 id="1-2排错流程"><a href="#1-2排错流程" class="headerlink" title="1.2排错流程"></a>1.2排错流程</h2><h3 id="1）-道路是否畅通"><a href="#1）-道路是否畅通" class="headerlink" title="1） 道路是否畅通"></a>1） 道路是否畅通</h3><p>ping ip</p><h3 id="2-检查是否劫财劫色"><a href="#2-检查是否劫财劫色" class="headerlink" title="2) 检查是否劫财劫色"></a>2) 检查是否劫财劫色</h3><p>目前第1个阶段之内，基本不会出现。<br>原因： 防火墙，Selinux </p><h3 id="3-检查是否提供特殊服务"><a href="#3-检查是否提供特殊服务" class="headerlink" title="3) 检查是否提供特殊服务"></a>3) 检查是否提供特殊服务</h3><p>检查端口是否存在、运行，间接检查服务是否运行、</p><h3 id="4-排查与连接工具。"><a href="#4-排查与连接工具。" class="headerlink" title="4)排查与连接工具。"></a>4)排查与连接工具。</h3><p>todesk (走公网) 安装使用的时候打开然后发送 id和密码。<br>teamviewer （走公网或局域网</p><h1 id="2-Bash命令行核心内容"><a href="#2-Bash命令行核心内容" class="headerlink" title="2.Bash命令行核心内容"></a>2.Bash命令行核心内容</h1><p>目标： 熟练掌握Linux命令行的特点（规则，格式，要求）</p><h2 id="2-1关机"><a href="#2-1关机" class="headerlink" title="2.1关机"></a>2.1关机</h2><p>shutdown 关机</p><p>-h 时间<br>shutdown -h now  现在关机</p><p>shutdown -c 取消关机</p><p>shutdown -h 10 #分钟</p><p>reboot  重启</p><p>halt 关机，还需要手动关闭电源。<br>poweroff 关机</p><h2 id="2-2常识"><a href="#2-2常识" class="headerlink" title="2.2常识"></a>2.2常识</h2><p>ctrl + l 清屏，清除屏幕的内容。<br>ctrl + a 把光标移动到行首</p><p>ctrl + d 断开连接</p><p>ctrl + e end 把光标移动到行尾<br>ctrl + u 把光标到行首的内容剪切(删除)<br>ctrl + c cancel 取消当前操作<br>上 ↑ 上一个命令<br>下 ↓ 下一个命令<br>ctrl + k 把光标到行尾的内容剪切(删除)<br>ctrl + y 粘贴<br>ctrl + s 锁定屏幕<br>ctrl + q 解锁<br>Ctrl + z 让程序进入后台运行</p><h1 id="3-Linux核心命令"><a href="#3-Linux核心命令" class="headerlink" title="3.Linux核心命令"></a>3.Linux核心命令</h1><h2 id="3-1进入"><a href="#3-1进入" class="headerlink" title="3.1进入"></a>3.1进入</h2><p>cd ~进入根目录（用户目录）</p><p>cd / 系统根目录</p><p>ls （li’s’t）显示</p><p>ls -l检查（ll）</p><p>cd  ..进入当前目录的上级目录。</p><p>cd .进入当前目录</p><p>cd -进入上一次所在的目录</p><p>pwd查看自己所在目录</p><h2 id="3-2创建"><a href="#3-2创建" class="headerlink" title="3.2创建"></a>3.2创建</h2><p>mkdir 目录 创建文件夹</p><p>-p 递归创建目录（创建多级目录）mkdir -p 1 2</p><p>touch 创建文件（ touch  2.txt 3.txt）</p><p>echo 追加</p><p>创建多个文件</p><p>mv (move) 移动文件或改名 从哪里来到哪里去</p><h2 id="3-3复制"><a href="#3-3复制" class="headerlink" title="3.3复制"></a>3.3复制</h2><p>cp(copy)复制文件 cp 哪里 到哪里</p><p>cp -r 复制目录，或者多种文件（ cp -r 1 backup）</p><p>cp -p复制的时候属性信息不变</p><p>cp -a 相当于-r,-p,-d,-pdr</p><p>cp -d 复制文件连接</p><p>cp —o备份文件</p><h2 id="3-4输出"><a href="#3-4输出" class="headerlink" title="3.4输出"></a>3.4输出</h2><p>echo 输出信息到屏幕</p><p> echo {1..5}输出有规律的信息 1 2 3 4 5 </p><p>echo{1,5,9}输出没有规律信息</p><h2 id="3-5编辑"><a href="#3-5编辑" class="headerlink" title="3.5编辑"></a>3.5编辑</h2><p>vi是编辑器</p><p>vi 1/1.txt打开文件，准备编辑</p><p>i 进入编辑（INSERT进入编辑模式）</p><p>ese退出编辑</p><p>：wq退出</p><p>:q退出</p><p>:q!强制退出</p><h2 id="3-6删除"><a href="#3-6删除" class="headerlink" title="3.6删除"></a>3.6删除</h2><p>rm  用于删除给定的文件和目录</p><p>rm - f强制删除（force)</p><p>rm -r进入</p><h1 id="4-根目录-一切皆文件"><a href="#4-根目录-一切皆文件" class="headerlink" title="4.根目录 (一切皆文件)"></a>4.根目录 (一切皆文件)</h1><p>/sbin超级管理用户二进制 usr/sbin</p><p>/bin普通目录  usr/bin</p><p>/boot 与Linux引导系统启动，镜像</p><p>/dev device设备文件 光盘（cdroom）硬盘</p><p><strong>/etc</strong> 系统配置文件存放目录，软件</p><p>/home 普通用户家目录</p><p>/lib 库文件（服务软件依赖）</p><p>/ lost+found 系统宕机临时保存数据的位置</p><p>/mnt 默认的挂载点（空目录）</p><p>/opt 第三方软件安装位置</p><p>/proc 进程虚拟目录 存放内存信息不占内存</p><p>/sys 虚拟目录</p><p>/tmp  temp临时存放文件目录</p><p>/ust  存放用户安装软件  user</p><p><strong>/var varlible存放的位置 日志（服务日志）</strong> 有故障找日志</p><h1 id="6-Linux核心目录的核心文件概述"><a href="#6-Linux核心目录的核心文件概述" class="headerlink" title="6.Linux核心目录的核心文件概述"></a>6.Linux核心目录的核心文件概述</h1><p> /etc 下面</p><h2 id="6-1-etc-hosts"><a href="#6-1-etc-hosts" class="headerlink" title="6.1/etc/hosts"></a>6.1/etc/hosts</h2><p>主机ip地址与域名的对应关系</p><p>通过修改hosts方法，让相关人员访问测试环境（正式环境）</p><p>ip地址与主机名，域名对应解析关系</p><p>主机名之间互相连接访问</p><p>windows hosts文件：C:\Windows\System32\drivers\etc\hosts</p><p> 192.168.129.129 www.baidi.com</p><h2 id="6-2-etc-hostname-主机名"><a href="#6-2-etc-hostname-主机名" class="headerlink" title="6.2/etc/hostname 主机名"></a>6.2/etc/hostname 主机名</h2><p>修改主机名</p><p>hostnamectl  set-hostname nanci</p><h2 id="6-3-Linux-网卡配置文件"><a href="#6-3-Linux-网卡配置文件" class="headerlink" title="6.3 Linux 网卡配置文件"></a>6.3 Linux 网卡配置文件</h2><p>/etc/sysconfig/netpwork-scripts/ifcfg-eth0</p><h2 id="6-4-var目录（不要用这个看日志）"><a href="#6-4-var目录（不要用这个看日志）" class="headerlink" title="6.4 var目录（不要用这个看日志）"></a>6.4 var目录（不要用这个看日志）</h2><p>a./var/log/messages 系统通用日志</p><p>b./var/log/secure 用户安全日志</p><p>6.5 /proc/cpuinfo cpu信息</p><p>processor  cpu 核心的id</p><h2 id="6-5绝对路径和相对路径"><a href="#6-5绝对路径和相对路径" class="headerlink" title="6.5绝对路径和相对路径"></a>6.5绝对路径和相对路径</h2><p>a.绝对路径 /etc/hosts</p><p>从根开始</p><p>b.相对路径 cd /etc ls -l hosts</p><p>不是从根开始的路径</p><h2 id="6-6-查看日志"><a href="#6-6-查看日志" class="headerlink" title="6.6 查看日志"></a>6.6 查看日志</h2><p>head  头，默认显示前十行 head /etc/passwd</p><p>head-n 指定行数  head -n5 /etc/passwd</p><p>tail 显示文件最后几行</p><p>tail-n 指定行数  tail;-n5 /etc/passwd</p><p>显示文件实时更新（看日志必备）</p><p>less分屏上下翻页浏览文件内容，按页查看文件内容，看到最后一行不会退出</p><p>more显示文件内容，每次显示一屏，按页查看文件内容，看到最后一行会退出</p><h2 id="6-7-wc统计行数"><a href="#6-7-wc统计行数" class="headerlink" title="6.7 wc统计行数"></a>6.7 wc统计行数</h2><p> wc /etc/services</p><p>which 查询命令的绝对路径</p><p>whereis 查询命令的绝对路径，命令相关内容</p><h2 id="6-8-yum源（软件仓库）"><a href="#6-8-yum源（软件仓库）" class="headerlink" title="6.8 yum源（软件仓库）"></a>6.8 yum源（软件仓库）</h2><p>阿里</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -o <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/CentOS-Base.repo https:/</span><span class="regexp">/mirrors.aliyun.com/</span>repo/Centos-<span class="number">7</span>.repo</span><br><span class="line">curl -o <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/epel.repo http:/</span><span class="regexp">/mirrors.aliyun.com/</span>repo/epel-<span class="number">7</span>.repo</span><br><span class="line">yum install -y   tree   vim wget bash-completion bash-completion-extras lrzsz net-tools sysstat iotop iftop </span><br><span class="line">htop unzip nc nmap telnet bc psmisc httpd-tools bind-utils nethogs expect</span><br><span class="line">yum install  -y sl cowsay </span><br></pre></td></tr></table></figure><p>alist</p><p>查看状态：systemctl status alist<br>启动服务：systemctl start alist<br>重启服务：systemctl restart alist<br>停止服务：systemctl stop alist</p><h1 id="6-8防火墙"><a href="#6-8防火墙" class="headerlink" title="6.8防火墙"></a>6.8防火墙</h1><blockquote><blockquote><blockquote><p>关闭防火墙<br>systemctl stop firewalld.service             #停止firewall<br>systemctl disable firewalld.service        #禁止firewall开机启动</p><p> 开启端口<br> firewall-cmd —zone=public —add-port=80/tcp —permanent<br> 命令含义：<br> —zone #作用域<br> —add-port=80/tcp #添加端口，格式为：端口/通讯协议<br> —permanent #永久生效，没有此参数重启后失效<br> 重启防火墙<br> firewall-cmd —reload</p></blockquote></blockquote></blockquote><p>常用命令介绍<br>firewall-cmd —state                                  　　　　  ##查看防火墙状态，是否是running<br>firewall-cmd —reload                          　　　　　　 ##重新载入配置，比如添加规则之后，需要执行此命令<br>firewall-cmd —get-zones                       　　　　　 ##列出支持的zone<br>firewall-cmd —get-services                    　　　　　 ##列出支持的服务，在列表中的服务是放行的<br>firewall-cmd —query-service ftp               　　　　  ##查看ftp服务是否支持，返回yes或者no<br>firewall-cmd —add-service=ftp                 　　　　  ##临时开放ftp服务<br>firewall-cmd —add-service=ftp —permanent     　　##永久开放ftp服务<br>firewall-cmd —remove-service=ftp —permanent　   ##永久移除ftp服务<br>firewall-cmd —add-port=80/tcp —permanent            ##永久添加80端口<br>iptables -L -n                                 　　　　　　　  ##查看规则，这个命令是和iptables的相同的<br>man firewall-cmd                              　　　　　　  ##查看帮助</p><h1 id="7-Linux-常用命令"><a href="#7-Linux-常用命令" class="headerlink" title="7.Linux 常用命令"></a>7.Linux 常用命令</h1><blockquote><p>此处只列举命令名称，命令的具体用法可直接在手册中（<a href="https://www.linuxcool.com/）查询">https://www.linuxcool.com/）查询</a></p></blockquote><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><ul><li>uname 查看系统信息</li><li>hostname 查看主机名</li><li>cat /proc/cpuinfo 查看 CPU 信息</li><li>lsmod 查看已加载的系统模块</li><li>top 查看系统使用情况</li><li>df 查看磁盘使用情况</li><li>fdisk 查看磁盘分区</li><li>du 查看目录使用情况</li><li>iostat 查看 I / O 使用情况</li><li>free 显示系统内存情况</li><li>env 查看环境变量</li><li>uptime 查看系统运行时间、用户数、负载</li></ul><h2 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h2><ul><li>shutdown 关机</li><li>reboot 重启</li><li>mount 挂载设备</li><li>umount 卸载设备</li></ul><h2 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h2><ul><li>su 切换用户</li><li>sudo 以管理员身份执行</li><li>who 查看当前用户名</li><li>ssh 远程连接</li><li>logout 注销</li><li>useradd 创建用户</li><li>userdel 删除用户</li><li>usermod 修改用户</li><li>groupadd 创建用户组</li><li>groupdel 删除用户组</li><li>groupmod 修改用户组</li><li>passwd 修改密码</li><li>last 显示用户或终端的登录情况</li></ul><h2 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h2><ul><li>cd 切换目录</li><li>ls 查看目录列表</li><li>tree 打印目录树</li><li>mkdir 创建目录</li><li>rm 删除目录</li><li>touch 新建文件</li><li>cp 复制文件</li><li>mv 移动文件</li><li>ln 创建文件链接</li><li>find 搜索文件</li><li>locate 定位文件</li><li>whereis 查看可执行文件路径</li><li>which 在 PATH 指定的路径中，搜索某系统命令的位置</li><li>chmod 设置目录权限</li><li>cat / more / less 查看文件</li><li>tac 倒序查看文件</li><li>head / tail 查看文件开头 / 结尾</li><li>paste 合并文件</li><li>zip / tar / gzip 压缩文件</li><li>unzip / tar / gunzip 解压文件</li><li>grep / sed / awk 文本处理</li><li>vim 文本编辑</li></ul><h2 id="程序相关"><a href="#程序相关" class="headerlink" title="程序相关"></a>程序相关</h2><ul><li>crontab 计划任务</li><li>nohup 后台运行程序</li><li>jobs 查看系统任务</li><li>ps 查看进程</li><li>kill 杀死进程</li><li>rpm / yum / apt / apt-get / dpkg 软件包管理</li><li>service / systemctl 服务管理</li></ul><h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><ul><li>ifconfig 查看网络属性</li><li>netstat 查看网络状态</li><li>iptables 查看 iptables 规则</li></ul><h1 id="8-宝塔"><a href="#8-宝塔" class="headerlink" title="8.宝塔"></a>8.宝塔</h1><h2 id="8-1卸载"><a href="#8-1卸载" class="headerlink" title="8.1卸载"></a>8.1卸载</h2><p>一键卸载宝塔Linux面板及运行环境命令<br>1.进入ssh 输入以下命令下载脚本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>download.bt.cn<span class="regexp">/install/</span>bt-uninstall.sh</span><br></pre></td></tr></table></figure><p>复制代码<br>2.执行脚本 （若是ubutnu用户请在前面加sudo  例子sudo sh bt-uninstall.sh）</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sh</span> bt-uninstall.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p>复制代码<br>2.执行脚本 （若是ubutnu用户请在前面加sudo  例子sudo sh bt-uninstall.sh）<br>sh bt-uninstall.sh</p><h2 id="8-2安装"><a href="#8-2安装" class="headerlink" title="8.2安装"></a>8.2安装</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O install.sh http:<span class="regexp">//</span>f.cccyun.cc<span class="regexp">/bt/i</span>nstall_6.<span class="number">0</span>.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><p>开心版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSO https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/ztkink/</span>bthappy<span class="regexp">/main/</span>one_key_happy.sh &amp;&amp; bash one_key_happy.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Jva Set系列集合</title>
      <link href="/posts/176c3e6e.html"/>
      <url>/posts/176c3e6e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Set系列集合"><a href="#Set系列集合" class="headerlink" title="Set系列集合"></a>Set系列集合</h1><p>Set系列集系概述</p><p>Set系列集合的特点。<br>无序、不重复、无索引。<br>Set集合的实现类特点。<br>HashSet无序、不重复、无索引。<br>LinkedHashSet 有序、不重复、无索引。<br>TreeSet 可排序、不重复、无索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">setDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//看看set集合体系的特点</span></span><br><span class="line">        Set&lt;String&gt; sets = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();<span class="comment">//一行经典代码</span></span><br><span class="line">        <span class="comment">//无序不重复</span></span><br><span class="line">        sets.add( <span class="string">&quot;Java&quot;</span> );</span><br><span class="line">        sets.add( <span class="string">&quot;Java&quot;</span> );</span><br><span class="line">        sets.add( <span class="string">&quot;Html&quot;</span> );</span><br><span class="line">        sets.add( <span class="string">&quot;Spring&quot;</span> );</span><br><span class="line">        System.out.println( sets );</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(  );<span class="comment">//一行经典代码</span></span><br><span class="line">        <span class="comment">//有序、不重复、无索引</span></span><br><span class="line">        set.add( <span class="string">&quot;Java&quot;</span> );</span><br><span class="line">        set.add( <span class="string">&quot;Java&quot;</span> );</span><br><span class="line">        set.add( <span class="string">&quot;Html&quot;</span> );</span><br><span class="line">        set.add( <span class="string">&quot;Spring&quot;</span> );</span><br><span class="line">        System.out.println( sets );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：HashSet集合元素无序的底层原理：哈希表</p><p>哈希表的组成<br>JDK8之前的，底层使用数组+链表组成<br>JDK8开始后，底层采用数组+链表+红黑树组成。</p><p>哈希值：是JDK根据对象的地址，按照某种规则算出来的int类型的数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;南辞&quot;</span>;</span><br><span class="line">        System.out.println( name.hashCode() );</span><br><span class="line">        System.out.println( name.hashCode() );</span><br><span class="line">        <span class="type">String</span> <span class="variable">name1</span> <span class="operator">=</span> <span class="string">&quot;南辞&quot;</span>;</span><br><span class="line">        System.out.println( name1.hashCode() );</span><br><span class="line">        System.out.println( name1.hashCode() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashSet1.7版本原理解析：数组 + 链表  +（结合哈希算法）</p><p>创建一个默认长度16的数组，数组名table<br>根据元素的哈希值跟数组的长度求余计算出应存入的位置（哈希算法）<br>判断当前位置是否为null，如果是null直接存入<br>如果位置不为null，表示有元素，则调用equals方法比较<br>如果一样，则不存，如果不一样，则存入数组<br>JDK 7新元素占老元素位置，指向老元素<br>JDK 8中新元素挂在老元素下面</p><p>实现类：HashSet集合元素去重复的底层原理</p><p>实现类：LinkedHashSet</p><p>实现类：TreeSet</p><h1 id="Collection体系的特点、使用场景总结"><a href="#Collection体系的特点、使用场景总结" class="headerlink" title="Collection体系的特点、使用场景总结"></a>Collection体系的特点、使用场景总结</h1><h1 id="补充知识：可变参数"><a href="#补充知识：可变参数" class="headerlink" title="补充知识：可变参数"></a>补充知识：可变参数</h1><h1 id="补充知识：集合工具类Collections"><a href="#补充知识：集合工具类Collections" class="headerlink" title="补充知识：集合工具类Collections"></a>补充知识：集合工具类Collections</h1><h1 id="Collection体系的综合案例"><a href="#Collection体系的综合案例" class="headerlink" title="Collection体系的综合案例"></a>Collection体系的综合案例</h1><h1 id="Map集合体系"><a href="#Map集合体系" class="headerlink" title="Map集合体系"></a>Map集合体系</h1><h1 id="补充知识：集合的嵌套"><a href="#补充知识：集合的嵌套" class="headerlink" title="补充知识：集合的嵌套"></a>补充知识：集合的嵌套</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础语法 运算符</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础语法-运算符"><a href="#Java基础语法-运算符" class="headerlink" title="Java基础语法 运算符"></a>Java基础语法 运算符</h1><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">operator</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">operatorDemo1</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//掌握基本算数运算符；</span></span><br><span class="line">        <span class="built_in">int</span> a= <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">int</span> b=<span class="number">3</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a + b);<span class="comment">//13</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a - b);<span class="comment">//7</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a * b);<span class="comment">//30</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a / b);<span class="comment">//3</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a*<span class="number">1.0</span> / b);<span class="comment">//3.333333 转换为小数显示技巧</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a % b);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.1/和%的区别：两个数据做除法，/取结果的商，%取结果的余数。</p><p>1.2整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。</p><p>1.3数值拆分 </p><p>  一个三位数，将其拆分为个位、十位、百位后，打印出来</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> operatorTest2 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//需求：一个三位数，将其拆分为个位、十位、百位后，打印出来</span></span><br><span class="line">        <span class="keyword">int</span> data = <span class="number">234</span>;</span><br><span class="line">        <span class="keyword">int</span> ge = data % <span class="number">10</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(ge);<span class="comment">//4</span></span><br><span class="line">        <span class="keyword">int</span> shi = data / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(shi);<span class="comment">//3</span></span><br><span class="line">        <span class="keyword">int</span> bai = data <span class="regexp">/ 10 /</span> <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(bai);<span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公式总结：</p><p> 个位 ：数值 % 10 </p><p>十位 ：数值 / 10 % 10</p><p> 百位 ：数值 / 10 / 10 % 10 </p><p>千位 ：数值 / 10 / 10 / 10 % 10; ..</p><h2 id="2-字符的“-”操作"><a href="#2-字符的“-”操作" class="headerlink" title="2.字符的“+”操作"></a>2.字符的“+”操作</h2><p>2.1char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值：</p><p>‘a’  —  97        a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加</p><p>‘A’  —  65        A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加</p><p>‘0’  —  48        0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少</span></span><br><span class="line"><span class="type">char</span> <span class="variable">ch1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println(ch1 + <span class="number">1</span>); <span class="comment">// 输出98，97 + 1 = 98</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">ch2</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">System.out.println(ch2 + <span class="number">1</span>); <span class="comment">// 输出66，65 + 1 = 66</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">ch3</span> <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">System.out.println(ch3 + <span class="number">1</span>); <span class="comment">// 输出49，48 + 1 = 49</span></span><br></pre></td></tr></table></figure><p>2.2 byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。</p><p>2.3 整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型</p><p>2.4 除了做基本数学运算，还有哪些功能？</p><p>  与字符串做+运算时会被当成连接符，其结果还是字符串。  能算则算，不能算就在一起</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">operator</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">operatorDemo2</span>&lt;<span class="title">abc</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//符号+连接符</span></span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">5</span> ;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;abc&quot;</span> + a); <span class="comment">// abc5</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="number">5</span> + a); <span class="comment">// 10</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;abc&quot;</span> + <span class="number">5</span> + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//abc5a</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="number">15</span> + <span class="string">&quot;abc&quot;</span> + <span class="number">15</span>);<span class="comment">//abc15abc</span></span><br><span class="line">System.<span class="keyword">out</span>.println(a + <span class="string">&quot;&quot;</span> +<span class="string">&#x27;a&#x27;</span>);<span class="comment">//5a</span></span><br><span class="line">System.<span class="keyword">out</span>.println(a + <span class="string">&#x27;a&#x27;</span>+<span class="string">&quot; nanci &quot;</span>);<span class="comment">//=5+97 nanci = 102 anci</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;nanci&quot;</span>+ a + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//nanci5a</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;nanci&quot;</span>+ ( a + <span class="string">&#x27;a&#x27;</span> ));<span class="comment">//nanci102</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       </p><h2 id="3-赋值运算符（应用）"><a href="#3-赋值运算符（应用）" class="headerlink" title="3.赋值运算符（应用）"></a>3.赋值运算符（应用）</h2><p>3.1 赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</p><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=10，将10赋值给变量a</td></tr><tr><td>+=</td><td>加后赋值</td><td>a+=b，将a+b的值给a</td></tr><tr><td>-=</td><td>减后赋值</td><td>a-=b，将a-b的值给a</td></tr><tr><td>*=</td><td>乘后赋值</td><td>a*=b，将a×b的值给a</td></tr><tr><td>/=</td><td>除后赋值</td><td>a/=b，将a÷b的商给a</td></tr><tr><td>%=</td><td>取余后赋值</td><td>a%=b，将a÷b的余数给a</td></tr></tbody></table></div><p>注意：扩展的赋值运算符隐含了强制类型转换。</p><ol><li><p>2作用是什么</p><p>基本作用是赋值；+=还可以实现数据的累加，把别人的数据加给自己</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会赋值运算符</span></span><br><span class="line">        <span class="type">int</span> a= <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">200</span>;</span><br><span class="line">        <span class="comment">//a = a + b;</span></span><br><span class="line">        a += b;<span class="comment">//a=(int)(a+b)</span></span><br><span class="line">        System.out.println(a);<span class="comment">//210</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">       <span class="comment">// i= (byte) (i+j);</span></span><br><span class="line">        i +=j;</span><br><span class="line">        System.out.println(i);<span class="comment">//30</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> m=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">3</span>;</span><br><span class="line">       <span class="comment">// m += n;//等价于m=(int)m+n;</span></span><br><span class="line">       <span class="comment">// m -= n;//等价于m=(int)m-n;</span></span><br><span class="line">       <span class="comment">// m *= n;//等价于m=(int)m*n;</span></span><br><span class="line">       <span class="comment">// m /= n;//等价于m=(int)m/n;</span></span><br><span class="line">        m %= n;<span class="comment">//等价于m=(int)m%n;</span></span><br><span class="line">        System.out.println(m);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-自增自减运算符"><a href="#3-自增自减运算符" class="headerlink" title="3.自增自减运算符"></a>3.自增自减运算符</h2><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>自增</td><td>变量的值加1</td></tr><tr><td>—</td><td>自减</td><td>变量的值减1</td></tr></tbody></table></div><p>3.1注意事项：</p><p>​    ++和— 既可以放在变量的后边，也可以放在变量的前边。</p><p>​    单独使用的时候， ++和— 无论是放在变量的前边还是后边，结果是一样的。</p><p>​    参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者—。</p><p>​    参与操作的时候，如果放在变量的前边，先拿变量做++或者—，后拿变量参与操作。</p><p>​    最常见的用法：单独使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会自增自减运算符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        i++; <span class="comment">// 单独使用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i:&quot;</span> + i); <span class="comment">// i:11</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        ++j; <span class="comment">// 单独使用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;j:&quot;</span> + j); <span class="comment">// j:11</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x++; <span class="comment">// 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;x:&quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y); <span class="comment">// x:11，y:10</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ++m; <span class="comment">// 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m:&quot;</span> + m + <span class="string">&quot;, m:&quot;</span> + m); <span class="comment">// m:11，m:11</span></span><br><span class="line">        <span class="comment">//面试题</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rs3</span> <span class="operator">=</span> c++ + ++c - --d - ++d + <span class="number">1</span> + c--;</span><br><span class="line">        <span class="comment">//c 10 11 12 11</span></span><br><span class="line">        <span class="comment">//d 5 4 5</span></span><br><span class="line">        <span class="comment">//rs3 =10 + 12 - 4 - 5 + 1 + 12=26</span></span><br><span class="line">        System.out.println(c);<span class="comment">//11</span></span><br><span class="line">        System.out.println(d);<span class="comment">//5</span></span><br><span class="line">        System.out.println(rs3);<span class="comment">//26</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.2 自增、自减运算符是什么，有什么作用？ </p><p>++、—。对当前变量值+1、-1 </p><p> 3.3 自增、自减运算符在变量前后有区别吗？</p><p> 如果单独使用放前后是没有区别的。</p><p> 非单独使用：在变量前 ，先进行变量自增/自减，再使用变量。 </p><p> 非单独使用：在变量后 ，先使用变量，再进行变量自增/自减</p><h2 id="4-关系运算符（应用）"><a href="#4-关系运算符（应用）" class="headerlink" title="4.关系运算符（应用）"></a>4.关系运算符（应用）</h2><p>4.1关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。</p><div class="table-container"><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td>!=</td><td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td></tr><tr><td>&gt;</td><td>a&gt;b，判断a是否大于b，成立为true，不成立为false</td></tr><tr><td>&gt;=</td><td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td>&lt;</td><td>a&lt;b，判断a是否小于b，成立为true，不成立为false</td></tr><tr><td>&lt;=</td><td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table></div><p>4.2 关系运算符的结果都是boolean类型，要么是true，要么是false。</p><p>4.3 千万不要把“==”误写成“=”，”==”是判断是否相等的关系，”=”是赋值。</p><h2 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h2><p>5.1 逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。</p><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与</td><td>a&amp;b，a和b都是true，结果为true，否则为false</td></tr><tr><td>\</td><td></td><td>逻辑或</td><td>a\</td><td>b，a和b都是false，结果为false，否则为true</td></tr><tr><td>^</td><td>逻辑异或</td><td>a^b，a和b结果不同为true，相同为false</td></tr><tr><td>!</td><td>逻辑非</td><td>!a，结果和a的结果正好相反</td></tr></tbody></table></div><h2 id="6-短路逻辑运算符"><a href="#6-短路逻辑运算符" class="headerlink" title="6.短路逻辑运算符"></a>6.短路逻辑运算符</h2><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>短路与</td><td>作用和&amp;相同，但是有短路效果</td></tr><tr><td>\</td><td>\</td><td></td><td>短路或</td><td>作用和\</td><td>相同，但是有短路效果</td></tr></tbody></table></div><p>6.1 说明：</p><ul><li>逻辑与&amp;，无论左边真假，右边都要执行。</li><li>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。</li><li>逻辑或|，无论左边真假，右边都要执行。</li><li>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</li></ul><p>6.2逻辑运算符有哪些，有什么特点？</p><p>⚫ 逻辑与“&amp;” ：有一个为false、结果是false </p><p>⚫ 短路与&amp;&amp;： 一个为false、结果是false。前一个为false,后一个条件不执行了 </p><p>⚫ 逻辑或“|”：有一个为true、结果是true </p><p>⚫ 短路或||：一个为true、结果是true。前一个为true，后一个条件不执行了 </p><p>⚫ 逻辑非“!”：!false=true、 !true=false </p><p>⚫ 逻辑异或“^” ：相同是false、不同是true。 </p><p>⚫ 注意：实际开发中、常用的逻辑运算符还是：&amp;&amp; 、 || 、 ！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会使用逻辑运算符</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">9.8</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">storage</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">        <span class="comment">//尺寸大于6.9；内存大于8；</span></span><br><span class="line">        <span class="comment">//逻辑&amp;前后都为真才为真</span></span><br><span class="line">        System.out.println(size &gt;= <span class="number">6.95</span> &amp; storage &gt;=<span class="number">8</span>);<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//尺寸大于6.9；内存大于8；</span></span><br><span class="line">        <span class="comment">//逻辑或前后都为真才为真</span></span><br><span class="line">        System.out.println(size &gt;= <span class="number">6.95</span> | storage &gt;=<span class="number">8</span>);<span class="comment">//ture</span></span><br><span class="line">        <span class="comment">//取反</span></span><br><span class="line"></span><br><span class="line">       System.out.println(!ture);<span class="comment">//false</span></span><br><span class="line">       System.out.println(!faluse);<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//异或两个不同为真</span></span><br><span class="line">       System.out.println(ture ^ ture);<span class="comment">//false</span></span><br><span class="line">       System.out.println(<span class="literal">false</span> ^ <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">        System.out.println(ture ^ <span class="literal">false</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(<span class="literal">false</span> ^ ture);<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//短路与</span></span><br><span class="line">        <span class="comment">//短路或；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">20</span>;</span><br><span class="line">        System.out.println(a &gt; <span class="number">100</span> &amp;&amp; ++b&gt;<span class="number">10</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(b);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        System.out.println(a &gt; <span class="number">100</span> &amp; ++b&gt;<span class="number">10</span>);<span class="comment">//false</span></span><br><span class="line">        System.out.println(b);<span class="comment">//21</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        System.out.println(i &gt;<span class="number">2</span> || ++j &gt; <span class="number">10</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(j);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i &gt;<span class="number">2</span> | ++j &gt; <span class="number">10</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(j);<span class="comment">//21</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-三元运算符"><a href="#7-三元运算符" class="headerlink" title="7.三元运算符"></a>7.三元运算符</h2><p>7.1三元运算符语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关系表达式 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会三元运算符</span></span><br><span class="line">       <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">98</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> score &gt;=<span class="number">60</span> ? <span class="string">&quot;考试通过&quot;</span>:<span class="string">&quot;挂科&quot;</span>;</span><br><span class="line">        System.out.println(rs);<span class="comment">//考试通过</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从两个数找出较大值；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> a&gt;b ? a:b;</span><br><span class="line">        System.out.println(max);<span class="comment">//100</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//求三个整数最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span><span class="number">30</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i &gt; j ? i:j;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rsmax</span> <span class="operator">=</span> temp &gt; k ? temp : k;</span><br><span class="line">        System.out.println(rsmax);<span class="comment">//30</span></span><br><span class="line">        <span class="comment">//三元嵌套</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rsmax2</span> <span class="operator">=</span> i &gt; j ? (i &gt; k ? i : k):(j &gt; k ? j : k);</span><br><span class="line">        System.out.println(rsmax2);<span class="comment">//30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-运算符优先级"><a href="#8-运算符优先级" class="headerlink" title="8.运算符优先级"></a>8.运算符优先级</h2><ol><li>1在表达式中，哪个运算符先执行后执行是要看优先级的，例如 “*、/” 的优先级高于”+、-”</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">operator</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">operatorDemo7</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="number">10</span> &gt; <span class="number">3</span> || <span class="number">10</span> &gt; <span class="number">3</span> &amp;&amp; <span class="number">10</span> &lt; <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line">        System.<span class="keyword">out</span>.println( (<span class="number">10</span> &gt; <span class="number">3</span> || <span class="number">10</span> &gt; <span class="number">3</span> ) &amp;&amp; <span class="number">10</span> &lt; <span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-键盘录入"><a href="#9-键盘录入" class="headerlink" title="9.键盘录入"></a>9.键盘录入</h2><p>9.1 请完成Java程序与用户交互，比如录入用户输入的名称、年龄，怎么办？。</p><p>API （Application Programming Interface,应用程序编程接口） ⚫ Java写好的程序(功能代码)，咱们可以直接调用。 ⚫ Oracle 也为Java写好的程序提供了相应的 API文档(技术使用说明书) 。</p><p>9.2 下载API文档： <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;//<span class="number">1.</span>导包</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ScannerDemo &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">     Scanner sc = <span class="built_in">new</span> Scanner(<span class="keyword">System</span>.<span class="keyword">in</span>);//得到键盘扫描对象</span><br><span class="line">    //调用对象功能等待接受</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;请输入您的年龄: &quot;);</span><br><span class="line">     <span class="type">int</span> age = sc.nextInt() ;</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;您的你年龄是: &quot;+age);</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;请输入您的名字: &quot;);</span><br><span class="line">     String <span class="type">name</span> = sc.next() ;</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;欢迎: &quot;+<span class="type">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请输入您的年龄:<br>120<br>您的你年龄是: 120<br>请输入您的名字:<br>南辞<br>欢迎: 南辞</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-常用API 02</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用API、Lambda、-常见算法"><a href="#常用API、Lambda、-常见算法" class="headerlink" title="常用API、Lambda、 常见算法"></a>常用API、Lambda、 常见算法</h1><h2 id="1-日期与时间"><a href="#1-日期与时间" class="headerlink" title="1 日期与时间"></a>1 日期与时间</h2><h3 id="1-1-Date"><a href="#1-1-Date" class="headerlink" title="1.1  Date"></a>1.1  Date</h3><p>Date类代表当前所在系统的日期时间信息</p><p>public Date() 创建一个Date对象，代表的是系统当前此刻日期时间。</p><p>public long getTime() 返回从1970年1月1日    00:00:00走到此刻的总的毫秒数</p><p>请计算出当前时间往后走1小时121秒之后的时间是多少。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用date处理时间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(  );</span><br><span class="line">        System.out.println( d );</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> d.getTime();</span><br><span class="line">        System.out.println( time);</span><br><span class="line">        <span class="comment">// Sun Nov 13 10:45:08 CST 2022</span></span><br><span class="line">        <span class="comment">//  1668307508663</span></span><br><span class="line">        <span class="comment">//请计算出当前时间往后走1小时121秒之后的时间是多少</span></span><br><span class="line">        System.out.println(<span class="string">&quot;*****************&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(  );</span><br><span class="line">        System.out.println( d1);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        time1 +=(<span class="number">60</span>*<span class="number">60</span>+<span class="number">121</span>)*<span class="number">1000</span>;</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>( time1 );</span><br><span class="line">        System.out.println( d2);</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">        d.setTime( time1 );</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、日期对象如何创建，如何获取时间毫秒值？<br>public  Date();<br>public long getTime();<br>2、时间毫秒值怎么恢复成日期对象<br>public Date(long time);<br>public void setTime(long time);</p><h3 id="2-1-SimpleDateFormat"><a href="#2-1-SimpleDateFormat" class="headerlink" title="2.1 SimpleDateFormat"></a>2.1 SimpleDateFormat</h3><p>代表简单日期格式化，可以用来把日期时间格式化成为我们想要的形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.SimpleTimeZone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(  );</span><br><span class="line">        System.out.println( d );</span><br><span class="line">        <span class="comment">//格式化日期对象</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>( <span class="string">&quot;yyyy年MM月dd日 HH:mm:ss EEE a&quot;</span> );</span><br><span class="line">        <span class="comment">//开始格式化日期对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> sdf.format( d );</span><br><span class="line">        System.out.println( rs );</span><br><span class="line">        <span class="comment">//格式化时间毫米值</span></span><br><span class="line">        <span class="comment">//121秒后时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time1</span> <span class="operator">=</span> System.currentTimeMillis()+ <span class="number">121</span>*<span class="number">1000</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rs2</span> <span class="operator">=</span> sdf.format( time1 );</span><br><span class="line">        System.out.println( rs2 );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式化方法</p><div class="table-container"><table><thead><tr><th>格式化方法</th><th>说明</th></tr></thead><tbody><tr><td>public final String <strong>format(Date date)</strong></td><td>将日期格式化成日期/时间字符串</td></tr><tr><td>public final String <strong>format(Object time)</strong></td><td>将时间毫秒值式化成日期/时间字符串</td></tr></tbody></table></div><p>学会 SimpleDateFormat 解析字符串时间成为日期对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">//学会 SimpleDateFormat 解析字符串时间成为日期对象</span></span><br><span class="line">        <span class="comment">//计算2021.8.26.11.11.11 后2.14.49.6时间</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;2021年08月06日 11:11:11&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把字符串解析成日期对象</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>( <span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span> );</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> sdf.parse( dateStr );</span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> d.getTime() + (<span class="number">2L</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span> +<span class="number">14</span>*<span class="number">60</span>*<span class="number">60</span>+<span class="number">49</span>*<span class="number">60</span>+<span class="number">6</span>)*<span class="number">1000</span>;</span><br><span class="line">        <span class="comment">//加L不会越界</span></span><br><span class="line">        System.out.println( sdf.format( time ) );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、SimpleDateFormat代表什么，有什么作用？<br>简单日期格式化对象<br>可以把日期对象及时间毫秒值格式化成我们想要的字符串形式。<br>可以把字符串的时间形式解析成Date日期对象。<br>2、SimpleDateFormat的对象如何创建？<br>public SimpleDateFormat(String pattern)<br>3、SimpleDateFormat格式化，以及解析时间的方法是怎么样的？<br>public final String format(Date d):格式化日期对象<br>public final String format(Object time):格式化时间毫秒值<br>public Date parse(String source)：解析字符串时间</p><p>需求<br>某购物网站举办秒杀活动，开始时间和结束时间如左图所示，当前活动结束后，系统记录到2位用户的付款时间分别如下：<br>小贾下单并付款的时间为：2020年11月11日 0:03:47<br>小皮下单并付款的时间为：2020年11月11日 0:10:11<br>规则：顾客的付款时间必须在秒杀时间之内，请判断出两位顾客是否秒杀成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">startTime</span> <span class="operator">=</span> <span class="string">&quot;2021-11-11 00.00.00&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">endTime</span> <span class="operator">=</span> <span class="string">&quot;2021-11-11 00.10.00&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">xiaojia</span> <span class="operator">=</span><span class="string">&quot;2021-11-11 00.03.47&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">xiaopi</span> <span class="operator">=</span><span class="string">&quot;2021-11-11 00.10.11&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>( <span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span> );</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> sdf.parse( startTime );</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d2</span> <span class="operator">=</span> sdf.parse( endTime );</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d3</span> <span class="operator">=</span> sdf.parse( xiaojia );</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d4</span> <span class="operator">=</span> sdf.parse( xiaopi );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(d3.after(d1) &amp;&amp; d3.before( d2 ))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小贾成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小贾失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(d4.after(d1) &amp;&amp; d4.before( d2 ))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小皮成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小皮失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-Calendar"><a href="#2-1-Calendar" class="headerlink" title="2.1 Calendar"></a>2.1 Calendar</h3><p>Calendar代表了系统此刻日期对应的日历对象。<br>Calendar是一个抽象类，不能直接创建对象。</p><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public int get(int field)</td><td>取日期中的某个字段信息。</td></tr><tr><td>public void set(int field,int value)</td><td>修改日历的某个字段信息。</td></tr><tr><td>public void add(int field,int amount)</td><td>为某个字段增加/减少指定的值</td></tr><tr><td>public final Date getTime()</td><td>拿到此刻日期对象。</td></tr><tr><td>public long getTimeInMillis()</td><td>拿到此刻时间毫秒值</td></tr></tbody></table></div><p>注意：calendar是可变日期对象，一旦修改后其对象本身表示的时间将产生变化</p><p>1、Calendar如何去得到日历对象的？</p><p>调用方法 抽象类不能创造对象</p><p>public static Calendar getInstance() ： 获取当前日历对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 取日期中的某个字段信息。</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">cal</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        System.out.println( cal );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 修改日历的某个字段信息。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> cal.get(Calendar.YEAR);</span><br><span class="line">        System.out.println( year );</span><br><span class="line">        <span class="type">int</span> month= cal.get(Calendar.MONTH);</span><br><span class="line">        System.out.println( month );</span><br><span class="line">        <span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> cal.get(Calendar.DAY_OF_YEAR);</span><br><span class="line">        System.out.println( days );</span><br><span class="line">        <span class="comment">// 3. 为某个字段增加/减少指定的值 一般不修改</span></span><br><span class="line">      <span class="comment">//  cal.set( Calendar.HOUR,16 );</span></span><br><span class="line">     <span class="comment">//   System.out.println( cal );</span></span><br><span class="line">        <span class="comment">//64天后时间</span></span><br><span class="line">        cal.add(Calendar.DAY_OF_YEAR,<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.  拿到此刻日期对象。</span></span><br><span class="line">       <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span>  cal.getTime();</span><br><span class="line">        System.out.println( d );</span><br><span class="line">        <span class="comment">//5. 拿到此刻时间毫秒值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> cal.getTimeInMillis();</span><br><span class="line">        System.out.println( time );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2022</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//317</span></span><br><span class="line"><span class="comment">//Mon Jan 16 11:46:33 CST 2023</span></span><br><span class="line"><span class="comment">//1673840793979</span></span><br></pre></td></tr></table></figure><h2 id="2-JDK8新增日期类"><a href="#2-JDK8新增日期类" class="headerlink" title="2 JDK8新增日期类"></a>2 JDK8新增日期类</h2><p>JDK8新增日期类</p><h4 id="2-1LocalTime-LocalDate-LocalDateTime"><a href="#2-1LocalTime-LocalDate-LocalDateTime" class="headerlink" title="2.1LocalTime /LocalDate / LocalDateTime"></a>2.1LocalTime /LocalDate / LocalDateTime</h4><div class="table-container"><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public int geYear()</td><td>获取年</td></tr><tr><td>public int getMonthValue()</td><td>获取月份（1-12）</td></tr><tr><td>Public int getDayOfMonth()</td><td>获取月中第几天乘法</td></tr><tr><td>Public int getDayOfYear()</td><td>获取年中第几天</td></tr><tr><td>Public DayOfWeek getDayOfWeek()</td><td>获取星期</td></tr></tbody></table></div><h4 id="2-2-Instant"><a href="#2-2-Instant" class="headerlink" title="2.2 Instant"></a>2.2 Instant</h4><p>Instant时间戳<br>JDK8获取时间戳特别简单，且功能更丰富。Instant类由一个静态的工厂方法now()可以返回当前时间戳。</p><p>Instant instant = Instant.<em>now</em>();<br> System.<em>out</em>.println(“当前时间戳是：” + instant);</p><p> Date date = Date.<em>from</em>(instant);<br> System.<em>out</em>.println(“当前时间戳是：” + date);</p><p> instant = date.toInstant();<br> System.<em>out</em>.println(instant);</p><h4 id="2-3-DateTimeFormatter"><a href="#2-3-DateTimeFormatter" class="headerlink" title="2.3 DateTimeFormatter"></a>2.3 DateTimeFormatter</h4><p>在JDK8中，引入了一个全新的日期与时间格式器DateTimeFormatter</p><h4 id="2-4-Duration-Period"><a href="#2-4-Duration-Period" class="headerlink" title="2.4 Duration/Period"></a>2.4 Duration/Period</h4><p>Period<br>在Java8中，我们可以使用以下类来计算日期间隔差异：java.time.Period<br>主要是 Period 类方法 getYears()，getMonths() 和 getDays() 来计算,只能精确到年月日。<br>用于 LocalDate 之间的比较。</p><h4 id="2-5-ChronoUnit"><a href="#2-5-ChronoUnit" class="headerlink" title="2.5 ChronoUnit"></a>2.5 ChronoUnit</h4><p>ChronoUnit类可用于在单个时间单位内测量一段时间，这个工具类是最全的了，可以用于比较所有的时间单位</p><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><h4 id="其实就是8种基本数据类型对应的引用类型"><a href="#其实就是8种基本数据类型对应的引用类型" class="headerlink" title="其实就是8种基本数据类型对应的引用类型"></a>其实就是8种基本数据类型对应的引用类型</h4><div class="table-container"><table><thead><tr><th>基本数据类型</th><th>引用数据类型</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table></div><h4 id="为什么提供包装类？"><a href="#为什么提供包装类？" class="headerlink" title="为什么提供包装类？"></a>为什么提供包装类？</h4><p>Java为了实现一切皆对象，为8种基本类型提供了对应的引用类型。<br>后面的集合和泛型其实也只能支持包装类型，不支持基本数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> integer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.ls.LSOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.Inet4Address;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a2</span> <span class="operator">=</span> a; <span class="comment">//自动装箱</span></span><br><span class="line">        System.out.println( a );</span><br><span class="line">        System.out.println( a1 );</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">it</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">it1</span> <span class="operator">=</span> it;</span><br><span class="line">        System.out.println( it1 );</span><br><span class="line">        <span class="type">double</span> <span class="variable">db</span> <span class="operator">=</span> <span class="number">99.5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Double</span> <span class="variable">db2</span> <span class="operator">=</span> db;<span class="comment">//装箱</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">db3</span> <span class="operator">=</span> db2;<span class="comment">//拆箱</span></span><br><span class="line">        System.out.println( db3 );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//容错率更高</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">age1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">age2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        System.out.println( <span class="string">&quot;*******************&quot;</span> );</span><br><span class="line">        <span class="comment">//基本数据类型转换成字符串</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> i3.toString();</span><br><span class="line">        System.out.println( rs + <span class="number">1</span> );<span class="comment">//231</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">rs1</span> <span class="operator">=</span> Integer.toString( i3 );</span><br><span class="line">        System.out.println( rs1 + <span class="number">1</span> );</span><br><span class="line">        <span class="comment">//可以直接加字符串得到字符串类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">rs2</span> <span class="operator">=</span> i3 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println( rs2 + <span class="number">1</span> );</span><br><span class="line">        System.out.println( <span class="string">&quot;***********************&quot;</span> );</span><br><span class="line">        <span class="comment">//可以把字符串类型的数值转换成真实的数据类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">number</span> <span class="operator">=</span> <span class="string">&quot;23&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//valueOf</span></span><br><span class="line">        <span class="comment">//转换成整数</span></span><br><span class="line">        <span class="comment">//int age = Integer.parseInt( number );</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.valueOf( number );</span><br><span class="line">        System.out.println( age + <span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">number1</span> <span class="operator">=</span> <span class="string">&quot;99.1&quot;</span>;</span><br><span class="line">        <span class="comment">//转换成小数</span></span><br><span class="line">       <span class="comment">// double score = Double.parseDouble( number1 );</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> Double.valueOf( number1 );</span><br><span class="line">        System.out.println(score+<span class="number">0.7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1、包装类是什么，作用是什么？"><a href="#1、包装类是什么，作用是什么？" class="headerlink" title="1、包装类是什么，作用是什么？"></a>1、包装类是什么，作用是什么？</h4><p>基本数据类型对应的引用类型，实现了一切皆对象。<br>后期集合和泛型不支持基本类型，只能使用包装类。</p><h4 id="2、包装类有哪些特殊功能？"><a href="#2、包装类有哪些特殊功能？" class="headerlink" title="2、包装类有哪些特殊功能？"></a>2、包装类有哪些特殊功能？</h4><p>可以把基本类型的数据转换成字符串类型(用处不大)<br>可以把字符串类型的数值转换成真实的数据类型（真的很有用）</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h4 id="需求：校验qq"><a href="#需求：校验qq" class="headerlink" title="需求：校验qq"></a>需求：校验qq</h4><p>假如现在要求校验一个qq号码是否正确，6位及20位之内，必须全部是数字 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//校验qq号</span></span><br><span class="line">        System.out.println(checkqq( <span class="string">&quot;2134564322345&quot;</span> ));</span><br><span class="line">        System.out.println(checkqq( <span class="string">&quot;21345dc322345&quot;</span> ));</span><br><span class="line">        System.out.println(checkqq( <span class="string">&quot;322345&quot;</span> ));</span><br><span class="line">        System.out.println(checkqq( <span class="string">&quot;213451234253214564322345&quot;</span> ));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkqq</span><span class="params">(String qq)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  qq !=<span class="literal">null</span> &amp;&amp; qq.matches( <span class="string">&quot;\\d&#123;6,20&#125;&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>public boolean matches(String regex):<br>判断是否匹配正则表达式，匹配返回true，不匹配返回false。</p><h4 id="需求-校验信息"><a href="#需求-校验信息" class="headerlink" title="需求:校验信息"></a>需求:校验信息</h4><p>请编写程序模拟用户输入手机号码、验证格式正确，并给出提示，直到格式输入正确为止。<br>请编写程序模拟用户输入邮箱号码、验证格式正确，并给出提示，直到格式输入正确为止。<br>请编写程序模拟用户输入电话号码、验证格式正确，并给出提示，直到格式输入正确为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="comment">//校验手机号码，邮箱电话号码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        checkPhone();</span><br><span class="line">        checkEmail();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title function_">checkEmail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>( System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的注册邮箱：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="comment">//判断手机号是否正确；</span></span><br><span class="line">            <span class="comment">//正则表达式</span></span><br><span class="line">            <span class="comment">// \\w 英文数组</span></span><br><span class="line">            <span class="keyword">if</span>(phone.matches( <span class="string">&quot;\\w&#123;1,30&#125;@[a-zA-z0-9]&#123;2,20&#125;(\\.[a-zA-Z0-9]&#123;2,20&#125;)&#123;1,2&#125;&quot;</span> ))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;邮箱注册完成&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println( <span class="string">&quot;邮箱注册失败&quot;</span> );</span><br><span class="line">            &#125;&#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title function_">checkPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>( System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的手机号：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            <span class="comment">//判断手机号是否正确；</span></span><br><span class="line">            <span class="comment">//正则表达式</span></span><br><span class="line">            <span class="keyword">if</span>(phone.matches( <span class="string">&quot;1[3-9]\\d&#123;9&#125;&quot;</span> ))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;手机号注册完成&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;手机号注册失败&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="正则表达式在方法中的应用"><a href="#正则表达式在方法中的应用" class="headerlink" title="正则表达式在方法中的应用"></a>正则表达式在方法中的应用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//按照正则表达式匹配的内容进行替换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">names</span> <span class="operator">=</span> <span class="string">&quot;张三8347937李四893475王五234&quot;</span>;</span><br><span class="line">      String[] arrs =   names.split( <span class="string">&quot;\\w+&quot;</span> );</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrs.length; i++) &#123;</span><br><span class="line">            System.out.println(arrs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">names2</span> <span class="operator">=</span>names.replaceAll( <span class="string">&quot;\\w&quot;</span>,<span class="string">&quot; &quot;</span> );</span><br><span class="line">        System.out.println( names2 );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="正则表达式支持爬取信息"><a href="#正则表达式支持爬取信息" class="headerlink" title="正则表达式支持爬取信息"></a>正则表达式支持爬取信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> regex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="string">&quot;来黑马程序学习Java,电话020-43422424，或者联系邮箱&quot;</span> +</span><br><span class="line">                <span class="string">&quot;itcast@itcast.cn,电话18762832633，0203232323&quot;</span> +</span><br><span class="line">                <span class="string">&quot;邮箱bozai@itcast.cn，400-100-3233 ，4001003232&quot;</span>;</span><br><span class="line">        <span class="comment">// 1.定义爬取规则</span></span><br><span class="line">        <span class="comment">// 2.编译正则表达式成为一个匹配规则对象</span></span><br><span class="line">        <span class="comment">// | 代表或</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(\\w&#123;1,&#125;@\\w&#123;2,10&#125;(\\.\\w&#123;2,10&#125;)&#123;1,2&#125;)|&quot;</span> +</span><br><span class="line">                <span class="string">&quot;(1[3-9]\\d&#123;9&#125;)|(0\\d&#123;2,5&#125;-?\\d&#123;5,15&#125;)|400-?\\d&#123;3,8&#125;-?\\d&#123;3,8&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile( regex );</span><br><span class="line">        <span class="comment">// 3.通过匹配规则对象得到一个匹配数据内容的匹配器对象</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher( rs );</span><br><span class="line">        <span class="comment">//4.通过匹配器去内容中爬取出信息</span></span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println( matcher.group() );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><h2 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h2><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-常用API 01</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h2 id="1-API概述"><a href="#1-API概述" class="headerlink" title="1. API概述"></a>1. API概述</h2><p>什么是API?</p><p>API(Application Programming interface)  应用程序编程接口。<br>简单来说：就是Java帮我们已经写好的一些方法，我们直接拿过来用就可以了。</p><h2 id="2-Object类：toString方法"><a href="#2-Object类：toString方法" class="headerlink" title="2. Object类：toString方法"></a>2. Object类：toString方法</h2><p>public String toString() 默认是返回当前对象在堆内存中的地址信息:类的全限名@内存地址</p><p>toString存在的意义<br>父类toString()方法存在的意义就是为了被子类重写，以便返回对象的内容信息，而不是地址信息！！  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> API;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;<span class="comment">//extends Object</span></span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">char</span> sex;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">char</span> sex, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//toS 回车回车</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&quot;</span> + sex +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自己重写equeals 内容一样返回ture</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否是一个对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//如果o 是null 返回false   Student !=  ..Pig</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//说明o一定是学生类型不是null</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">        <span class="keyword">return</span> sex == student.sex &amp;&amp;</span><br><span class="line">                age == student.age &amp;&amp;</span><br><span class="line">                Objects.equals( name, student.name );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash( name, sex, age );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> API;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>( <span class="string">&quot;张三&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">19</span> );</span><br><span class="line">     <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span>  s.toString();</span><br><span class="line">        System.out.println(rs);</span><br><span class="line">        System.out.println(s.toString());</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="comment">//返回当前对象的地址</span></span><br><span class="line">        <span class="comment">//直接输出对象变量，默认toString可以不写</span></span><br><span class="line">        <span class="comment">//API.Student@2d98a335</span></span><br><span class="line">        <span class="comment">//API.Student@2d98a335</span></span><br><span class="line">        <span class="comment">//API.Student@2d98a335</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Object的toString方法的基本作用是什么，存在的意义是什么？<br>基本作用：给子类继承，子类对象调用可以返回自己的地址。<br>意义：让子类重写，以便返回子类对象的内容。</p><h2 id="3-Object类：equals方法"><a href="#3-Object类：equals方法" class="headerlink" title="3. Object类：equals方法"></a>3. Object类：equals方法</h2><p>public boolean equals(Object o)  默认是比较当前对象与另一个对象的地址是否相同，相同返回true，不同返回false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> API;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>( <span class="string">&quot;张三&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">19</span> );</span><br><span class="line">        Student s2= <span class="keyword">new</span> <span class="title class_">Student</span>( <span class="string">&quot;张三&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">19</span> );</span><br><span class="line">        <span class="comment">//Object</span></span><br><span class="line">        <span class="comment">//equals 比较两个对象地址</span></span><br><span class="line">        System.out.println( s1.equals( s2 ) );<span class="comment">//通过重写eauals可以比较内容是否一样</span></span><br><span class="line">        System.out.println( s1 == s2 );<span class="comment">//地址</span></span><br><span class="line">        System.out.println( Objects.equals( s1, s2 ) );</span><br><span class="line">        <span class="comment">//true</span></span><br><span class="line">        <span class="comment">//false</span></span><br><span class="line">        <span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.1 Object的equals方法的基本作用，存在的意义是什么？<br>基本作用：默认是与另一个对象比较地址是否一样<br>存在的意义：让子类重写，以便比较对象的内容是否相同。</p><h2 id="4-Objects"><a href="#4-Objects" class="headerlink" title="4. Objects"></a>4. Objects</h2><p>Objects是一个工具类，提供了一些方法去完成一些功能。</p><p>使用Objects的equals方法在进行对象的比较会更安全。</p><p>public static boolean equals(Object a, Object b) 比较两个对象的，底层会先进行非空判断，从而可以避免空指针异常。再进行equals比较</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String s2= <span class="keyword">new</span> <span class="title class_">String</span>( <span class="string">&quot;ma&quot;</span> );</span><br><span class="line">       <span class="comment">// System.out.println( s1.equals( s2 ) );//留下了隐患 空指针异常</span></span><br><span class="line">        System.out.println( Objects.equals( s1,s2 ) );<span class="comment">//更安全准确</span></span><br><span class="line">        <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        System.out.println( Objects.isNull( s1 ) );<span class="comment">//true</span></span><br><span class="line">        System.out.println( s1 == <span class="literal">null</span> );<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println( Objects.isNull( s2 ) );<span class="comment">//false</span></span><br><span class="line">        System.out.println( s2 == <span class="literal">null</span> );<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.1 对象进行内容比较的时候建议使用什么？为什么？<br>建议使用Objects提供的equals方法。<br>比较的结果是一样的，但是更安全。</p><h2 id="5-StringBuilder"><a href="#5-StringBuilder" class="headerlink" title="5. StringBuilder"></a>5. StringBuilder</h2><p>性能好</p><p>StringBuilder是一个可变的字符串的操作类，我们可以把它看成是一个对象容器</p><p>使用StringBuilder的核心作用：操作字符串的性能比String要更高（如拼接、修改等）。</p><p>StringBuilder 构造器</p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>public  StringBuilder()</td><td>创建一个空白的可变的字符串对象，不包含任何内容</td></tr><tr><td>public  StringBuilder(String str)</td><td>创建一个指定字符串内容的可变字符串对象</td></tr></tbody></table></div><p>StringBuilder常用方法</p><div class="table-container"><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder append(任意类型)</td><td>添加数据并返回StringBuilder对象本身</td></tr><tr><td>public StringBuilder reverse()</td><td>将对象的内容反转</td></tr><tr><td>public int length()</td><td>返回对象内容长度</td></tr><tr><td>public String toString()</td><td>通过toString()就可以实现把StringBuilder转换为String</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StringBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(  );</span><br><span class="line">        sb.append( <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        sb.append( <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;$%&quot;</span> );</span><br><span class="line">        sb.append( <span class="string">&quot;32489&quot;</span>);</span><br><span class="line">        sb.append( <span class="string">&quot;健康&quot;</span>);</span><br><span class="line">        sb.append( <span class="string">&quot;21212&quot;</span>);</span><br><span class="line">        System.out.println( sb );</span><br><span class="line"></span><br><span class="line">        StringBuilder sb1= <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(  );</span><br><span class="line">        <span class="comment">//链式</span></span><br><span class="line">        sb1.append( <span class="string">&quot;a&quot;</span> ).append( <span class="string">&quot;b&quot;</span> ).append( <span class="string">&quot;c&quot;</span> );</span><br><span class="line">        System.out.println( sb1 );<span class="comment">//abc</span></span><br><span class="line">        <span class="comment">//反转</span></span><br><span class="line">        sb1.reverse().append( <span class="string">&quot;110&quot;</span> );</span><br><span class="line">        System.out.println( sb1 );<span class="comment">//cba110</span></span><br><span class="line"></span><br><span class="line">        System.out.println( sb1.length() );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终结果还是String</span></span><br><span class="line">        StringBuilder sb2= <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(  );</span><br><span class="line">        sb2.append( <span class="string">&quot;123&quot;</span> ).append(<span class="string">&quot;abc&quot;</span> );</span><br><span class="line">        <span class="comment">//恢复成String</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> sb2.toString();</span><br><span class="line">        check(rs);<span class="comment">//6</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(String data)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.1 为什么拼接、反转字符串建议使用StringBuilder?<br>StringBuilder：内容是可变的、拼接字符串性能好、代码优雅。只创建一个对象(堆中)<br>String ：内容是不可变的、拼接字符串性能差。需要一直创造对象</p><p>定义字符串使用String<br>拼接、修改等操作字符串使用StringBuilder</p><h2 id="6-打印整型数组内容"><a href="#6-打印整型数组内容" class="headerlink" title="6. 打印整型数组内容"></a>6. 打印整型数组内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StringBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1 = <span class="literal">null</span>;</span><br><span class="line">        System.out.println(toString( arr1 ));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr2 = &#123;<span class="number">10</span>,<span class="number">53</span>,<span class="number">45</span>&#125;;</span><br><span class="line">        System.out.println(toString( arr2));</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//拼接</span></span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>( <span class="string">&quot;[&quot;</span> );</span><br><span class="line">                <span class="comment">//遍历</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                    sb.append( arr[i] ).append( i == arr.length-<span class="number">1</span> ? <span class="string">&quot;&quot;</span>: <span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append( <span class="string">&quot;]&quot;</span> );</span><br><span class="line">                <span class="keyword">return</span>  sb.toString();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 异常</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-异常"><a href="#1-异常" class="headerlink" title="1 异常"></a>1 异常</h1><h2 id="1-1什么是异常？"><a href="#1-1什么是异常？" class="headerlink" title="1.1什么是异常？"></a>1.1什么是异常？</h2><p>异常是代码在编译或者执行的过程中可能出现的错误。</p><h2 id="1-2异常体系分类"><a href="#1-2异常体系分类" class="headerlink" title="1.2异常体系分类"></a>1.2异常体系分类</h2><p>简单来说：<br>编译时异常就是在编译的时候出现的异常，<br>运行时异常就是在运行时出现的异常。</p><h2 id="1-3异常分为几类？"><a href="#1-3异常分为几类？" class="headerlink" title="1.3异常分为几类？"></a>1.3异常分为几类？</h2><p>编译时异常、运行时异常。<br>编译时异常：没有继承RuntimeExcpetion的异常，编译阶段就会出错。<br>运行时异常：继承自RuntimeException的异常或其子类，编译阶段不报错，运行可能报错。</p><h1 id="2-运行时异常"><a href="#2-运行时异常" class="headerlink" title="2 运行时异常"></a>2 运行时异常</h1><h2 id="2-1运行时异常实例"><a href="#2-1运行时异常实例" class="headerlink" title="2.1运行时异常实例"></a>2.1运行时异常实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exceptionDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 运行出错程序终止</span></span><br><span class="line">        System.out.println(<span class="string">&quot;程序开始&quot;</span>);</span><br><span class="line">        <span class="comment">//数组索引越界异常: ArrayIndexOutOfBoundsException</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]); <span class="comment">//2 //位置</span></span><br><span class="line">        <span class="comment">// System.out.println(arr[3]); 运行出错程序终止</span></span><br><span class="line">        <span class="comment">//空指针异常 : NullPointerException，直接输出没有问题，但是调用空指针的变量的功能就会报错。</span></span><br><span class="line">        <span class="comment">//异常多线程</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        System.out.println( name );</span><br><span class="line">        <span class="comment">// System.out.println( name.length() ); //运行出错程序终止</span></span><br><span class="line">        <span class="comment">//类型转换异常：ClassCastException</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line">       <span class="comment">// String s = (String) o;</span></span><br><span class="line">        <span class="comment">//s 字符串怎么能指向整数</span></span><br><span class="line">        <span class="comment">//数学操作异常：ArithmeticException</span></span><br><span class="line">      <span class="comment">//  int c = 10 / 0; //0不知道分几块</span></span><br><span class="line">        <span class="comment">//数字转换异常： NumberFormatException</span></span><br><span class="line">       <span class="comment">// String number = &quot;23aabb&quot;; //非法</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">it</span> <span class="operator">=</span> Integer.valueOf( number );</span><br><span class="line">        System.out.println( it + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行时异常：一般是程序员业务没有考虑好或者是编程逻辑不严谨引起的程序错误，<br>自己的水平有问题！</p><h2 id="2-2运行时异常的特点"><a href="#2-2运行时异常的特点" class="headerlink" title="2.2运行时异常的特点"></a>2.2运行时异常的特点</h2><p>运行时异常：继承自RuntimeException的异常或者其子类，<br>编译阶段不报错,运行可能报错。</p><h1 id="3-编译时异常"><a href="#3-编译时异常" class="headerlink" title="3 编译时异常"></a>3 编译时异常</h1><h2 id="3-1编译时异常的特点"><a href="#3-1编译时异常的特点" class="headerlink" title="3.1编译时异常的特点"></a>3.1编译时异常的特点</h2><p>编译时异常：继承自Exception的异常或者其子类<br>编译阶段报错，必须处理，否则代码不通过。</p><h2 id="3-2默认异常处理机制。"><a href="#3-2默认异常处理机制。" class="headerlink" title="3.2默认异常处理机制。"></a>3.2默认异常处理机制。</h2><p>默认的异常处理机制并不好，一旦真的出现异常，程序立即死亡！</p><ol><li><p>```java<br>package exceptionDemo;<br>//默认的异常处理机制并不好，一旦真的出现异常，程序立即死亡</p><p>import org.w3c.dom.ls.LSOutput;</p><p>import java.sql.SQLOutput;</p><p>public class ExceptDemo3 {</p><pre><code>public static void main(String[] args) &#123;    System.out.println(&quot;程序开始&quot;);    chu(10,0);    System.out.println(&quot;程序关闭&quot;);&#125;public static void chu(int a ,int b)&#123;    System.out.println(a);    System.out.println(b);    int c = a / b ;    System.out.println( c );    //程序开始    //10    //0&#125;</code></pre><p>}</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">4</span> 异常处理</span><br><span class="line"></span><br><span class="line"><span class="number">4.1</span> 编译时异常的处理形式有三种：</span><br><span class="line"></span><br><span class="line"> 出现异常直接抛出去给调用者，调用者也继续抛出去。</span><br><span class="line"> 出现异常自己捕获处理，不麻烦别人。</span><br><span class="line">  前两者结合，出现异常直接抛出去给调用者，调用者捕获处理</span><br><span class="line"></span><br><span class="line"><span class="number">4.2</span> 异常处理方式</span><br><span class="line"></span><br><span class="line">异常处理方式<span class="number">1</span> —— <span class="keyword">throws</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">throws</span>：用在方法上，可以将方法内部出现的异常抛出去给本方法的调用者处理。</span><br><span class="line">这种方式并不好，发生异常的方法自己不处理异常，如果异常最终抛出去给虚拟机将引起程序死亡。</span><br><span class="line"></span><br><span class="line">异常处理方式<span class="number">2</span> —— <span class="keyword">try</span>…<span class="keyword">catch</span>…</span><br><span class="line"></span><br><span class="line">**CTRL+alt+t 选择第六个**</span><br><span class="line"></span><br><span class="line">监视捕获异常，用在方法内部，可以将方法内部出现的异常直接捕获处理。</span><br><span class="line">这种方式还可以，发生异常的方法自己独立完成异常的处理，程序可以继续往下执行。</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   *<span class="comment">// 可能出现异常的代码！</span></span><br><span class="line">\* &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">   **e.printStackTrace(); *<span class="comment">// 直接打印异常栈信息</span></span><br><span class="line">**\* &#125;</span><br><span class="line"></span><br><span class="line"> Exception（父类）可以捕获处理一切异常类型！</span><br><span class="line"></span><br><span class="line">异常处理方式<span class="number">3</span> —— 前两者结合</span><br><span class="line"></span><br><span class="line">方法直接将异通过<span class="keyword">throws</span>抛出去给调用者</span><br><span class="line">调用者收到异常后直接捕获处理。</span><br><span class="line"></span><br><span class="line">在开发中按照规范来说第三种方式是最好的：底层的异常抛出去给最外层，最外层集中捕获处理</span><br><span class="line"></span><br><span class="line"><span class="number">5</span> 运行时异常</span><br><span class="line"></span><br><span class="line"><span class="number">5.1</span> 运行时异常的处理形式</span><br><span class="line"></span><br><span class="line">运行时异常编译阶段不会出错，是运行时才可能出错的，所以编译阶段不处理也可以。</span><br><span class="line"></span><br><span class="line">  按照规范建议还是处理：建议在最外层调用处集中捕获处理即可。 </span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="keyword">package</span> <span class="keyword">runtime</span>;</span><br><span class="line"><span class="comment">// 按照规范建议还是处理：建议在最外层调用处集中捕获处理即可。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">&quot;程序开始&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            chu(<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace(); <span class="comment">//这里打出来的</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">&quot;程序关闭&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> chu(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)&#123; <span class="comment">//throws RuntimeException 默认的不抛</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(a);</span><br><span class="line">        System.out.<span class="keyword">println</span>(b);</span><br><span class="line">        <span class="keyword">int</span> c = a / b ;</span><br><span class="line">        System.out.<span class="keyword">println</span>( c );</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="6-异常处理使代码更稳健的案例"><a href="#6-异常处理使代码更稳健的案例" class="headerlink" title="6 异常处理使代码更稳健的案例"></a>6 异常处理使代码更稳健的案例</h1><h2 id="6-1-需求"><a href="#6-1-需求" class="headerlink" title="6.1 需求"></a>6.1 需求</h2><p> 键盘录入一个合理的价格为止（必须是数值）。<br>分析<br>定义一个死循环，让用户不断的输入价格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>( System.in );</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请您输入一个合法的价格： &quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">priceStr</span> <span class="operator">=</span> sc.nextLine(); <span class="comment">//行</span></span><br><span class="line">                <span class="comment">//转换成Double</span></span><br><span class="line">                <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> Double.valueOf( priceStr );</span><br><span class="line">                <span class="comment">//判断价格大于0</span></span><br><span class="line">                <span class="keyword">if</span>(price&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;定价： &quot;</span> + price);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;价格必须是正数&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;用户数据输入异常，请输入合法数据&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-自定义异常"><a href="#7-自定义异常" class="headerlink" title="7 自定义异常"></a>7 自定义异常</h1><h2 id="7-1-自定义异常的分类"><a href="#7-1-自定义异常的分类" class="headerlink" title="7.1 自定义异常的分类"></a>7.1 自定义异常的分类</h2><p>1、自定义编译时异常<br> 定义一个异常类继承Exception.<br> 重写构造器。<br> 在出现异常的地方用throw new 自定义对象抛出，<br>作用：编译时异常是编译阶段就报错，提醒更加强烈，一定需要处理！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> custom;</span><br><span class="line"><span class="comment">//自定义的编译异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="comment">//  定义一个异常类继承Exception.</span></span><br><span class="line">    <span class="comment">// 重写构造器。</span></span><br><span class="line">    <span class="comment">// 在出现异常的地方用throw new 自定义对象抛出，</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span> &#123;<span class="comment">//原因</span></span><br><span class="line">        <span class="built_in">super</span>( message );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> custom;</span><br><span class="line"><span class="comment">//认为年龄小于0大于100就是异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkAge( <span class="number">32</span> );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AgeException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkAge</span><span class="params">(<span class="type">int</span> age)</span> <span class="keyword">throws</span> AgeException &#123;</span><br><span class="line">        <span class="keyword">if</span>(age&lt;<span class="number">0</span> || age&gt;<span class="number">100</span>)&#123;</span><br><span class="line">            <span class="comment">//抛出去</span></span><br><span class="line">            <span class="comment">//throw在方法内部创建一个异常对象，从此处抛出</span></span><br><span class="line">            <span class="comment">//throws用在方法申明上，抛出方法内部的异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AgeException</span>( age + <span class="string">&quot;非法！&quot;</span> );</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄合法。推荐商品&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、自定义运行时异常<br>定义一个异常类继承RuntimeException.<br>重写构造器。<br>在出现异常的地方用throw new 自定义对象抛出!<br>作用：提醒不强烈，编译阶段不报错！！运行时才可能出现！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> custom;</span><br><span class="line"><span class="comment">//认为年龄小于0大于100就是异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkAge2(-<span class="number">32</span> );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkAge2</span><span class="params">(<span class="type">int</span> age)</span>  &#123;</span><br><span class="line">        <span class="keyword">if</span>(age &lt; <span class="number">0</span> || age &gt; <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">// 抛出去一个异常对象给调用者</span></span><br><span class="line">            <span class="comment">// throw ：在方法内部直接创建一个异常对象，并从此点抛出</span></span><br><span class="line">            <span class="comment">// throws : 用在方法申明上的，抛出方法内部的异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(age + <span class="string">&quot; is illeagal!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄合法：推荐商品给其购买~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkAge</span><span class="params">(<span class="type">int</span> age)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(age &lt; <span class="number">0</span> || age &gt; <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">// 抛出去一个异常对象给调用者</span></span><br><span class="line">            <span class="comment">// throw ：在方法内部直接创建一个异常对象，并从此点抛出</span></span><br><span class="line">            <span class="comment">// throws : 用在方法申明上的，抛出方法内部的异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(age + <span class="string">&quot; is illeagal!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄合法：推荐商品给其购买~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> custom;</span><br><span class="line"><span class="comment">//自定义的编译异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AgeException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="comment">//  定义一个异常类继承Exception.</span></span><br><span class="line">    <span class="comment">// 重写构造器。</span></span><br><span class="line">    <span class="comment">// 在出现异常的地方用throw new 自定义对象抛出，</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AgeException</span><span class="params">(String message)</span> &#123;<span class="comment">//原因</span></span><br><span class="line">        <span class="built_in">super</span>( message );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> custom;</span><br><span class="line"><span class="comment">//自定义的编译异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">itruntimeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="comment">//  定义一个异常类继承Exception.</span></span><br><span class="line">    <span class="comment">// 重写构造器。</span></span><br><span class="line">    <span class="comment">// 在出现异常的地方用throw new 自定义对象抛出，</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">itruntimeException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">itruntimeException</span><span class="params">(String message)</span> &#123;<span class="comment">//原因</span></span><br><span class="line">        <span class="built_in">super</span>( message );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 数组</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="什么是数组【理解】"><a href="#什么是数组【理解】" class="headerlink" title="什么是数组【理解】"></a>什么是数组【理解】</h3><p>​    数组就是存储数据长度固定的容器，存储多个数据的数据类型要一致。 </p><h3 id="1-数组定义格式【记忆】"><a href="#1-数组定义格式【记忆】" class="headerlink" title="1.数组定义格式【记忆】"></a>1.数组定义格式【记忆】</h3><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>​    数据类型[] 数组名</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr;        </span><br><span class="line"><span class="type">double</span>[] arr;      </span><br><span class="line"><span class="type">char</span>[] arr;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">array</span>.<span class="keyword">create</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ArrayDemo1 &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        //学会静态化定义数组</span><br><span class="line">       // <span class="type">double</span>[] score = <span class="built_in">new</span> <span class="type">double</span>[]&#123;<span class="number">12.3</span>,<span class="number">13.4</span>,<span class="number">15.6</span>&#125;;</span><br><span class="line">        <span class="type">double</span>[] score = &#123;<span class="number">12.3</span>,<span class="number">13.4</span>,<span class="number">15.6</span>&#125;;</span><br><span class="line"></span><br><span class="line">        //<span class="type">int</span>[] age = <span class="built_in">new</span> <span class="type">int</span>[]&#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] age = &#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>&#125;;</span><br><span class="line"></span><br><span class="line">       // String[] names  = <span class="built_in">new</span> String[]&#123;&quot;小名&quot;,&quot;小红&quot;,&quot;小黄&quot;&#125;;</span><br><span class="line">        String[] names  = &#123;&quot;小名&quot;,&quot;小红&quot;,&quot;小黄&quot;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>​    数据类型 数组名[]</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[];</span><br><span class="line"><span class="type">double</span> arr[];</span><br><span class="line"><span class="type">char</span> arr[];</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package <span class="built_in">array</span>.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">ArrayDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//理解数组的注意事项</span></span><br><span class="line">        <span class="built_in">int</span>[] age = &#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">45</span>&#125;;</span><br><span class="line">        <span class="built_in">int</span> age1[] = &#123;<span class="number">23</span>,<span class="number">45</span>,<span class="number">77</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//什么数组放什么类型</span></span><br><span class="line">        <span class="comment">//String[] names = &#123;&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;12&quot;&#125;;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//数组定义长度固定</span></span><br><span class="line">        <span class="built_in">int</span>[] age2 = &#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">23</span>&#125;;</span><br><span class="line">        System.<span class="keyword">out</span>.println(age2[<span class="number">3</span>]);<span class="comment">//只能到二</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-数组动态初始化"><a href="#2-数组动态初始化" class="headerlink" title="2.数组动态初始化"></a>2.数组动态初始化</h3><h4 id="什么是动态初始化"><a href="#什么是动态初始化" class="headerlink" title="什么是动态初始化"></a>什么是动态初始化</h4><p>​    数组动态初始化就是只给定数组的长度，由系统给出默认初始化值。</p><h4 id="动态初始化格式"><a href="#动态初始化格式" class="headerlink" title="动态初始化格式"></a>动态初始化格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[数组长度];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h4 id="动态初始化格式详解"><a href="#动态初始化格式详解" class="headerlink" title="动态初始化格式详解"></a>动态初始化格式详解</h4><ul><li><p>等号左边：</p><ul><li><p>int:数组的数据类型</p></li><li><p>[]:代表这是一个数组</p></li><li><p>arr:代表数组的名称</p></li></ul></li><li><p>等号右边：</p><ul><li>new:为数组开辟内存空间</li></ul></li><li>int:数组的数据类型<ul><li>[]:代表这是一个数组</li></ul></li><li>5:代表数组的长度</li></ul><p>数组是属于什么类型，数组变量名中存储的是什么？ 引用数据类型，存储的数组在内存中的地址信息</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ArrayDemo4</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//学会动态化数组</span></span><br><span class="line">        <span class="comment">//数据类型[] 数组名 = new 数据类型[数组长度];</span></span><br><span class="line">        <span class="built_in">double</span>[] scores = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">3</span>];<span class="comment">//&#123;0.0,0.0,0.0// &#125;</span></span><br><span class="line">        <span class="comment">//赋值                              0   1    2</span></span><br><span class="line">        scores[<span class="number">0</span>] = <span class="number">99.9</span>;</span><br><span class="line">        scores[<span class="number">1</span>] = <span class="number">99.9</span>;</span><br><span class="line">        scores[<span class="number">2</span>] = <span class="number">99.9</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(scores[<span class="number">0</span>]);<span class="comment">//99.9</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(scores[<span class="number">1</span>]);<span class="comment">//99.9</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(scores[<span class="number">2</span>]);<span class="comment">//99.9</span></span><br><span class="line"></span><br><span class="line">        String[] names = <span class="keyword">new</span> String[<span class="number">90</span>];</span><br><span class="line">        names[<span class="number">0</span>] = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        names[<span class="number">5</span>] = <span class="string">&quot;鲁肃&quot;</span>;</span><br><span class="line">        names[<span class="number">3</span>] = <span class="string">&quot;多环&quot;</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(names[<span class="number">0</span>]);<span class="comment">//张三</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(names[<span class="number">5</span>]);<span class="comment">//鲁肃</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(names[<span class="number">3</span>]);<span class="comment">//多环</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(names[<span class="number">2</span>]);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态初始化的写法"><a href="#动态初始化的写法" class="headerlink" title="动态初始化的写法"></a>动态初始化的写法</h4><ol><li><p>动态初始化的写法是什么样的？ 数据类型[] 数组名 = new 数据类型[长度]; int[] ages = new int[4]; </p></li><li><p><strong>两种数组定义时的特点和场景有什么区别</strong></p><p>⚫<strong>当前已经知道存入的元素值，用静态初始化。</strong> </p><p>⚫<strong>当前还不清楚要存入哪些数据，用动态初始化</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ArrayDemo5 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//掌握动态吃实话元素默认规则</span></span><br><span class="line">        <span class="comment">//整型默认0</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        System.out.<span class="keyword">println</span>(arr[<span class="number">0</span>]);<span class="comment">//0</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(arr[<span class="number">9</span>]);<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符数组默认0</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">100</span>];</span><br><span class="line">       System.out.<span class="keyword">println</span>((<span class="keyword">int</span>)chars[<span class="number">0</span>]);<span class="comment">//0</span></span><br><span class="line">       System.out.<span class="keyword">println</span>((<span class="keyword">int</span>)chars[<span class="number">99</span>]);<span class="comment">//0</span></span><br><span class="line">       <span class="comment">//浮点默认0</span></span><br><span class="line">        <span class="keyword">double</span>[] scores = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">90</span>];</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="number">0</span>);<span class="comment">//0.0</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="number">99</span>);<span class="comment">//0.0</span></span><br><span class="line">        <span class="comment">//布尔类型数组</span></span><br><span class="line">        <span class="keyword">boolean</span>[] booleans = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">100</span>];</span><br><span class="line">        System.out.<span class="keyword">println</span>(booleans[<span class="number">0</span>]);<span class="comment">//false</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(booleans[<span class="number">99</span>]);<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//引用类型数组</span></span><br><span class="line">        String[] names = <span class="keyword">new</span> String[<span class="number">100</span>];</span><br><span class="line">        System.out.<span class="keyword">println</span>(names[<span class="number">0</span>]);<span class="comment">//null</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(names[<span class="number">99</span>]);<span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两种初始化的的使用场景总结、注意事项说明： </p><p>⚫ 动态初始化：只指定数组长度，后期赋值，适合开始知道数据的数量，但是不确定具体元素值的业务场景。</p><p> ⚫ 静态初始化：开始就存入元素值，适合一开始就能确定元素值的业务场景</p><p> 动态初始化数组后元素的默认值是什么样的？</p><p>⚫ byte、short、int 、char、long类型数组元素的默认值都是0 </p><p>⚫ float、double类型数组元素的默认值都是0.0 </p><p>⚫ boolean类型数组元素的默认值是false、String类型数组元素的默认值是null</p></li></ol><h3 id="3-数组元素访问【应用】"><a href="#3-数组元素访问【应用】" class="headerlink" title="3.数组元素访问【应用】"></a>3.数组元素访问【应用】</h3><h4 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h4><p>​    每一个存储到数组的元素，都会自动的拥有一个编号，从0开始。</p><p>​    这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素。     </p><h4 id="访问数组元素格式"><a href="#访问数组元素格式" class="headerlink" title="访问数组元素格式"></a>访问数组元素格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会访问数组元素</span></span><br><span class="line">       <span class="comment">// 取值</span></span><br><span class="line">        <span class="type">int</span>[] ages = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> ages[<span class="number">0</span>];</span><br><span class="line">        System.out.println(a);<span class="comment">//12</span></span><br><span class="line">        System.out.println(ages[<span class="number">1</span>]);<span class="comment">//23</span></span><br><span class="line">        System.out.println(ages[<span class="number">2</span>]);<span class="comment">//34</span></span><br><span class="line">       <span class="comment">// 赋值</span></span><br><span class="line">        ages[<span class="number">2</span>] = <span class="number">100</span>;</span><br><span class="line">        System.out.println(ages[<span class="number">2</span>]);<span class="comment">//100</span></span><br><span class="line">        <span class="comment">//访问数组长度</span></span><br><span class="line">        System.out.println(ages.length);<span class="comment">//3</span></span><br><span class="line">        <span class="comment">//数组的最大索引(元素个数大于0)</span></span><br><span class="line"></span><br><span class="line">        System.out.println(ages.length-<span class="number">1</span>);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.如何访问数组的元素？ 数组名称[索引]</p><ol><li><p>如何访问数组的长度？ 数组名称.length  数组名称[索引] </p></li><li><p>数组的最大索引怎么获取？ 数组名. length – 1 // 前提：元素个数大于0</p></li></ol><ul><li><h3 id="4数组遍历"><a href="#4数组遍历" class="headerlink" title="4数组遍历"></a>4数组遍历</h3></li><li><p>数组遍历：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</p><p>如何遍历数组？</p><p> int[] ages = {20, 30, 40, 50}; </p><p>for (int i = 0; i &lt; ages.length; i++)<br> { System.out.println(ages[i])；}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">traverseDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会数组遍历</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">12</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">67</span>,<span class="number">87</span>,<span class="number">44</span>&#125;;</span><br><span class="line">        <span class="comment">//原始遍历方式</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);<span class="comment">//12</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);<span class="comment">//34</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);<span class="comment">//5</span></span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);<span class="comment">//67</span></span><br><span class="line">        System.out.println(arr[<span class="number">4</span>]);<span class="comment">//87</span></span><br><span class="line">        System.out.println(arr[<span class="number">5</span>]);<span class="comment">//44</span></span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt;5 ; i++) &#123;</span></span><br><span class="line">        <span class="comment">//System.out.println(arr[i]);</span></span><br><span class="line">          <span class="comment">//终极形式</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;arr.length ; i++) &#123;</span><br><span class="line">                System.out.print(arr[i]+<span class="string">&quot;\t&quot;</span>);<span class="comment">//12 34 5 67 87 44</span></span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组遍历求和"><a href="#数组遍历求和" class="headerlink" title="数组遍历求和"></a>数组遍历求和</h4><p>某部门5名员工的销售额分别是：16、26、36、6、100，请计算出他们部门的总销售额</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">traverseDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//数组遍历-求和</span></span><br><span class="line">        <span class="comment">//某部门5名员工的销售额分别是：16、26、36、6、100，请计算出他们部门的总销售额</span></span><br><span class="line">        <span class="built_in">int</span>[] money = &#123;<span class="number">16</span>, <span class="number">26</span>, <span class="number">36</span>, <span class="number">6</span>, <span class="number">100</span>&#125;;</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; money.length; i++) &#123;</span><br><span class="line">            <span class="keyword">sum</span> += money[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="keyword">sum</span>);<span class="comment">//184</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何实现批量数据的求和?</p><p>⚫ 使用数组存储批量数据</p><p> ⚫ 遍历数组中的每个数据，然后定义变量把他们累加起来。</p><h4 id="数组最值"><a href="#数组最值" class="headerlink" title="数组最值"></a>数组最值</h4><ul><li><p>最大值获取：从数组的所有元素中找出最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">traverseDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//求最大值</span></span><br><span class="line">        <span class="type">int</span>[] faceScores = &#123;<span class="number">15</span>, <span class="number">9000</span>, <span class="number">10000</span>, <span class="number">20000</span>, <span class="number">9500</span>, -<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> faceScores[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; faceScores.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(faceScores[i] &gt; max) &#123;</span><br><span class="line">                    max = faceScores[i];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;System.out.println(max);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p> 数组元素求最大值如何实现的？</p><p> ① 数据拿到程序中去，用数组装起来。</p><p> ② 定义一个变量用于记录最大值，这个变量建议默认存储第一个元素值作为参照。 </p><p>③ 遍历数组的元素，如果该元素大于变量存储的元素，则替换变量存储的值为该元素。</p><p> ④ 循环结束后输出最大值变量即可。 目录 Contents ➢ 数组的定义 ➢ 数组的遍历 ➢ 数组的案例 ◆ 数组元素求</p><p>猜数字</p><p>需求 开发一个幸运小游戏，游戏规则如下： 游戏后台随机生成1-20之间的5个数（无所谓是否重复），然后让大家来猜数字： ➢ 未猜中提示：“未命中”，并继续猜测 ➢ 猜中提示：“运气不错，猜中了”，并输出该数据第一次出现的位置，且输出全部5个数据， 最 终结束本游戏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">traverseDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//猜数字 开发一个幸运小游戏，游戏规则如下： 游戏后台随机生成1-20之间的5个数（无所谓是否重复），然后让大家来猜数字</span></span><br><span class="line">        <span class="comment">//1.定义动态数组</span></span><br><span class="line">        <span class="type">int</span>[] data = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">//2.动态生成数字</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;data.length ; i++) &#123;</span><br><span class="line">          data[i] = r.nextInt(<span class="number">20</span>)+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.使用死循环猜数字</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//扫描器</span></span><br><span class="line">        OUT:</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入一到二十整数：&quot;</span>);</span><br><span class="line">           <span class="type">int</span> <span class="variable">gussData</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">           <span class="comment">//4.遍历看是否相等</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>    (data[i] == gussData)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您猜中了！索引是：&quot;</span>+i);</span><br><span class="line">                <span class="keyword">break</span> OUT;<span class="comment">//结束整个死循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;没猜中，重新猜！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.输出全部元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            System.out.println(data[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>猜数字游戏的实现步骤？</p><p> 动态初始化数组，存入5个随机的1-20之间的数据 ② 定义一个死循环，不断的猜数据，遍历数组，判断数据是否在数组中，如果在，进行 对应提示并结束死循环；如果没有猜中，提示继续。</p><h4 id="随机排名"><a href="#随机排名" class="headerlink" title="随机排名"></a>随机排名</h4><p>某公司开发部5名开发人员，要进行项目进展汇报演讲，现在采取随机排名后进行汇报。 请先依次录入5名员工的工号，然后展示出一组随机的排名顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.ServiceConfigurationError;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">traverseDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//随机排名</span></span><br><span class="line">        <span class="comment">//1.动态初始化一个数组</span></span><br><span class="line">        <span class="type">int</span>[] codes = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">//2定义循环，循环五次</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//扫描器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; codes.length; i++) &#123;</span><br><span class="line">            <span class="comment">//录入工号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个员工的工号：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="comment">//存在数组</span></span><br><span class="line">            codes[i] = code;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.遍历数组元素位置，随机索引</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; codes.length; i++) &#123;</span><br><span class="line">            <span class="comment">//随机一个索引位置：codes[index]</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(codes.length);</span><br><span class="line">            <span class="comment">//定义一个临时变量</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> codes[index];</span><br><span class="line">            codes[index] = codes[i];</span><br><span class="line">            codes[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.遍历数组元素输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; codes.length; i++) &#123;</span><br><span class="line">            System.out.print(codes[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如何实现随机排名的？ ① 定义一个动态初始化的数组用于录入数据。 ② 遍历数组中的每个元素，每次随机一个索引值，让当前元素与该索引位置处的元素进行交换。 ③ 遍历输出数组中的内容即可。</p><p>冒泡排序</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">traverseDemo6</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//冒泡排序</span></span><br><span class="line">        <span class="comment">//1.定义数组排序</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">//2.定义循环次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">         <span class="comment">//3.控制循环次数占位</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;arr.length -i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//判断大小</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> temp = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.<span class="built_in">print</span>(arr[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>冒泡排序的实现步骤。 </p><p>⚫ 定义一个外部循环控制总共需要冒几轮（数组的长度-1）</p><p> ⚫ 定义一个内部循环，控制每轮依次往后比较几个位置（数组长度-i-1）。</p><p> ⚫ 如果当前位置的元素值&gt;后一个位置的元素值，两者交换。 </p><h3 id="5-内存分配"><a href="#5-内存分配" class="headerlink" title="5.内存分配"></a>5.内存分配</h3><h4 id="内存概述"><a href="#内存概述" class="headerlink" title="内存概述"></a>内存概述</h4><p>​    内存是计算机中的重要原件，临时存储区域，作用是运行程序。</p><p>​    我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的。</p><p>​    必须放进内存中才能运行，运行完毕后会清空内存。 </p><p>​    Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。 </p><h4 id="java中的内存分配"><a href="#java中的内存分配" class="headerlink" title="java中的内存分配"></a>java中的内存分配</h4><ul><li>目前我们只需要记住两个内存，分别是：栈内存和堆内存</li></ul><div class="table-container"><table><thead><tr><th>区域名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>寄存器</td><td style="text-align:center">给CPU使用，和我们开发无关。</td></tr><tr><td>本地方法栈</td><td style="text-align:center">JVM在使用操作系统功能的时候使用，和我们开发无关。</td></tr><tr><td>方法区</td><td style="text-align:center">存储可以运行的class文件。</td></tr><tr><td>堆内存</td><td style="text-align:center">存储对象或者数组，new来创建的，都存储在堆内存。</td></tr><tr><td>方法栈</td><td style="text-align:center">方法运行时使用的内存，比如main方法运行，进入方法栈中执行。</td></tr></tbody></table></div><h4 id="什么是静态初始化"><a href="#什么是静态初始化" class="headerlink" title="什么是静态初始化"></a>什么是静态初始化</h4><p>​    在创建数组时，直接将元素确定    </p><h4 id="静态初始化格式"><a href="#静态初始化格式" class="headerlink" title="静态初始化格式"></a>静态初始化格式</h4><ul><li><p>完整版格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,...&#125;;</span><br></pre></td></tr></table></figure></li><li><p>简化版格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,...&#125;;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">memoyDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;;</span><br><span class="line">                arr[<span class="number">0</span>] = <span class="number">44</span>;</span><br><span class="line">                arr[<span class="number">1</span>] = <span class="number">55</span>;</span><br><span class="line">                arr[<span class="number">2</span>] = <span class="number">66</span>;</span><br><span class="line">                System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">                System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">                System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>两个数组变量指向同一个数组对象</p><p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20221028163349860.png" alt="image-20221028163349860"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">array</span>.<span class="keyword">create</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> memoyDemo2 &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span>[] arr1 = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;;</span><br><span class="line">                <span class="type">int</span>[] arr2 = arr1;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(arr1);</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(arr2);</span><br><span class="line">                arr2[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(arr1[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(arr2[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="数组操作索引越界异常"><a href="#数组操作索引越界异常" class="headerlink" title="数组操作索引越界异常"></a>数组操作索引越界异常</h4><ul><li><p>出现原因</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数组长度为3，索引范围是0~2，但是我们却访问了一个3的索引。</strong></p><p>程序运行后，将会抛出ArrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。 </p></li><li><p>解决方案</p><p>将错误的索引修改为正确的索引范围即可！</p></li></ul><h4 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h4><ul><li><p>出现原因</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把null赋值给数组</span></span><br><span class="line">        arr = <span class="literal">null</span>;</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>arr = null 这行代码，意味着变量arr将不会再保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。</p></li><li><p>解决方案</p><p>给数组一个真正的堆内存空间引用即可！</p><p>如果访问的元素位置超过最大索引，执行时会出现ArrayIndexOutOfBoundsException(数组索引越界异常) 如果数组变量中没有存储数组的地址，而是null, 在访问数组信息时会出现NullPointerException(空指针异常)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 内部类</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>内部类就是定义在一个类里面的类，里面的类可以理解成（寄生），外部类可以理解成（宿主）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">   *<span class="comment">//* *内部类</span></span><br><span class="line">\*   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Heart</span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="2-内部类的使用场景"><a href="#2-内部类的使用场景" class="headerlink" title="2. 内部类的使用场景"></a>2. 内部类的使用场景</h2><h3 id="2-1-场景："><a href="#2-1-场景：" class="headerlink" title="2.1 场景："></a>2.1 场景：</h3><p>当一个事物的内部，还有一个部分需要一个完整的结构进行描述时。</p><h3 id="2-2-基本作用"><a href="#2-2-基本作用" class="headerlink" title="2.2 基本作用"></a>2.2 基本作用</h3><p>内部类通常可以方便访问外部类的成员，包括私有的成员。<br>内部类提供了更好的封装性，内部类本身就可以用private ，protectecd等修饰，封装性可以做更多控制。</p><h2 id="3-内部类的分类"><a href="#3-内部类的分类" class="headerlink" title="3. 内部类的分类"></a>3. 内部类的分类</h2><h3 id="3-1静态内部类-了解"><a href="#3-1静态内部类-了解" class="headerlink" title="3.1静态内部类[了解]"></a>3.1静态内部类[了解]</h3><h4 id="3-1-1-什么是静态内部类？"><a href="#3-1-1-什么是静态内部类？" class="headerlink" title="3.1.1 什么是静态内部类？"></a>3.1.1 什么是静态内部类？</h4><p>有static修饰，属于外部类本身。<br>它的特点和使用与普通类是完全一样的，类有的成分它都有，只是位置在别人里面而已。</p><p>格式：外部类名.内部类名 对象名 = new 外部类名.内部类构造器;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d1_static;</span><br><span class="line"><span class="comment">//外部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span>  <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span>  String hobby;<span class="comment">//属于静态外部类对象，不能直接访问</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">static</span>  String schoolName;</span><br><span class="line"><span class="comment">//静态成员内部类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Inner</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Inner</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSchoolName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> schoolName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setSchoolName</span><span class="params">(String schoolName)</span> &#123;</span><br><span class="line">            Inner.schoolName = schoolName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d1_static;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.Inner();</span><br><span class="line">        in.setName( <span class="string">&quot;张三&quot;</span> );</span><br><span class="line">        in.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-2-静态内部类中是否可以直接访问外部类的静态成员？"><a href="#3-1-2-静态内部类中是否可以直接访问外部类的静态成员？" class="headerlink" title="3.1.2 静态内部类中是否可以直接访问外部类的静态成员？"></a>3.1.2 静态内部类中是否可以直接访问外部类的静态成员？</h4><p>可以，外部类的静态成员只有一份可以被共享访问。</p><h4 id="3-1-3-静态内部类中是否可以直接访问外部类的实例成员？"><a href="#3-1-3-静态内部类中是否可以直接访问外部类的实例成员？" class="headerlink" title="3.1.3 静态内部类中是否可以直接访问外部类的实例成员？"></a>3.1.3 静态内部类中是否可以直接访问外部类的实例成员？</h4><p>不可以的，外部类的实例成员必须用外部类对象访问。</p><h2 id="3-2成员内部类（非静态内部类）-了解"><a href="#3-2成员内部类（非静态内部类）-了解" class="headerlink" title="3.2成员内部类（非静态内部类） [了解]"></a>3.2成员内部类（非静态内部类） [了解]</h2><h4 id="3-2-1什么是成员内部类？"><a href="#3-2-1什么是成员内部类？" class="headerlink" title="3.2.1什么是成员内部类？"></a>3.2.1什么是成员内部类？</h4><p>无static修饰，属于外部类的对象。<br>JDK16之前，成员内部类中不能定义静态成员，JDK 16开始也可以定义静态成员了。</p><p>成员内部类创建对象的格式：    </p><p>格式：外部类名.内部类名 对象名 = new  外部类构造器.new 内部类构造器();</p><p>范例：Outer.Inner in =  new Outer().new  Inner();</p><h4 id="3-2-2成员内部类中是否可以直接访问外部类的静态成员？"><a href="#3-2-2成员内部类中是否可以直接访问外部类的静态成员？" class="headerlink" title="3.2.2成员内部类中是否可以直接访问外部类的静态成员？"></a>3.2.2成员内部类中是否可以直接访问外部类的静态成员？</h4><p>可以，外部类的静态成员只有一份可以被共享访问。</p><h4 id="3-2-3成员内部类的实例方法中是否可以直接访问外部类的实例成员？"><a href="#3-2-3成员内部类的实例方法中是否可以直接访问外部类的实例成员？" class="headerlink" title="3.2.3成员内部类的实例方法中是否可以直接访问外部类的实例成员？"></a>3.2.3成员内部类的实例方法中是否可以直接访问外部类的实例成员？</h4><p>可以的，因为必须先有外部类对象，才能有成员内部类对象，所以可以直接访问外部类对象的实例成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> innnerclass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="comment">//成员内部类</span></span><br><span class="line">        <span class="keyword">private</span>  String name;</span><br><span class="line">        <span class="keyword">private</span>  <span class="type">int</span> age;</span><br><span class="line">       <span class="comment">// public  static  int a;//jdk16以后才支持</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// public  static  void test()&#123;</span></span><br><span class="line">            <span class="comment">//System.out.println(a);</span></span><br><span class="line">       <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;名称&quot;</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Inner</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Inner</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> innnerclass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>(  );</span><br><span class="line">        in.show();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-4成员内部类是什么样的、有什么特点？"><a href="#3-2-4成员内部类是什么样的、有什么特点？" class="headerlink" title="3.2.4成员内部类是什么样的、有什么特点？"></a>3.2.4成员内部类是什么样的、有什么特点？</h4><p> 无static修饰，属于外部类的对象。<br> 可以直接访问外部类的静态成员，实例方法中可以直接访问外部类的实例成员。</p><h4 id="3-2-5-成员内部类如何创建对象？"><a href="#3-2-5-成员内部类如何创建对象？" class="headerlink" title="3.2.5 成员内部类如何创建对象？"></a>3.2.5 成员内部类如何创建对象？</h4><p>外部类名.内部类名 对象名 = new  外部类构造器.new 内部类构造器();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> innnerclass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="type">int</span> <span class="variable">heartbeat</span> <span class="operator">=</span> <span class="number">150</span>;</span><br><span class="line">            <span class="keyword">class</span> <span class="title class_">Heart</span> &#123;</span><br><span class="line">                <span class="keyword">private</span> <span class="type">int</span> <span class="variable">heartbeat</span> <span class="operator">=</span> <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">heartbeat</span> <span class="operator">=</span> <span class="number">78</span>;</span><br><span class="line"></span><br><span class="line">                    System.out.println( heartbeat ); <span class="comment">// 78</span></span><br><span class="line">                      System.out.println(<span class="built_in">this</span>.heartbeat); <span class="comment">// 110</span></span><br><span class="line">                    System.out.println(People.<span class="built_in">this</span>.heartbeat); <span class="comment">// 150       </span></span><br><span class="line"></span><br><span class="line">            &#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-局部内部类-了解"><a href="#3-3-局部内部类-了解" class="headerlink" title="3.3 局部内部类[了解]"></a>3.3 局部内部类[了解]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d2_class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.PublicKey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">            <span class="keyword">private</span>  String name;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="variable">on</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> name;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.name = name;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOn</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> on;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOn</span><span class="params">(<span class="type">int</span> on)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.on = on;</span><br><span class="line">                <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">                c.setName(<span class="string">&quot;狗&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-匿名内部类（重点）"><a href="#3-4-匿名内部类（重点）" class="headerlink" title="3.4 匿名内部类（重点）"></a>3.4 匿名内部类（重点）</h3><h4 id="3-4-1-内部类之四：匿名内部类概述-重点"><a href="#3-4-1-内部类之四：匿名内部类概述-重点" class="headerlink" title="3.4.1 内部类之四：匿名内部类概述[重点]"></a>3.4.1 内部类之四：匿名内部类概述[重点]</h4><p>匿名内部类：<br>本质上是一个没有名字的局部内部类。<br>作用：方便创建子类对象，最终目的是为了简化代码编写。<br>格式：new 类|抽象类名|或者接口名() {   重写方法;};</p><h4 id="3-4-2-匿名内部类的作用？"><a href="#3-4-2-匿名内部类的作用？" class="headerlink" title="3.4.2 匿名内部类的作用？"></a>3.4.2 匿名内部类的作用？</h4><p>方便创建子类对象，最终目的为了简化代码编写。<br>匿名内部类的格式？</p><p>Animal a = new Employee() {<br>   public void run() {<br>   }<br> };<br> a. run();</p><h4 id="3-4-5-匿名内部类的特点？"><a href="#3-4-5-匿名内部类的特点？" class="headerlink" title="3.4.5 匿名内部类的特点？"></a>3.4.5 匿名内部类的特点？</h4><p>匿名内部类是一个没有名字的内部类，同时也代表一个对象。<br>匿名内部类的对象类型，相当于是当前new的那个类型的子类类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> anonymous;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//匿名内部类 编译看左 运行看右</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;老虎吃人&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        a.run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class Tiger extends  Animal&#123;</span></span><br><span class="line"> <span class="comment">//   @Override</span></span><br><span class="line">  <span class="comment">//  public void run() &#123;</span></span><br><span class="line">  <span class="comment">//      System.out.println(&quot;吃人&quot;);</span></span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span>  <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-6-匿名内部类常见使用形式"><a href="#3-4-6-匿名内部类常见使用形式" class="headerlink" title="3.4.6 匿名内部类常见使用形式"></a>3.4.6 匿名内部类常见使用形式</h4><p>某个学校需要让老师，学生，运动员一起参加游泳比赛</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> anonymous;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teat2</span> &#123;</span><br><span class="line">    <span class="comment">//匿名内部类可以作为一个对象，直接传输给方法。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Swimming</span> <span class="variable">s</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Swimming</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//接口不能创造对象 这是匿名类的对象</span></span><br><span class="line">                System.out.println(<span class="string">&quot;学生快乐自由泳&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        go(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&quot;</span>);</span><br><span class="line">        <span class="type">Swimming</span> <span class="variable">s1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Swimming</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//接口不能创造对象 这是匿名类的对象</span></span><br><span class="line">                System.out.println(<span class="string">&quot;老师游泳&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        go(s1);</span><br><span class="line">       <span class="comment">//方法的入参形式 </span></span><br><span class="line">        System.out.println(<span class="string">&quot;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&quot;</span>);</span><br><span class="line">        go(<span class="keyword">new</span> <span class="title class_">Swimming</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swim</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//接口不能创造对象 这是匿名类的对象</span></span><br><span class="line">                System.out.println(<span class="string">&quot;运动员游泳&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//某个学校需要让老师，学生，运动员一起参加游泳比赛</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">go</span> <span class="params">(Swimming s)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">        s.swim();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//匿名内部类不需要子类</span></span><br><span class="line"><span class="comment">//class  Student implements  Swimming&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  @Override</span></span><br><span class="line"><span class="comment">//  public void swim() &#123;</span></span><br><span class="line"><span class="comment">//     System.out.println(&quot;学生快乐自由泳&quot;);</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">interface</span>  <span class="title class_">Swimming</span>&#123;</span><br><span class="line">    <span class="keyword">void</span>  <span class="title function_">swim</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.4.7 匿名内部类真实使用场景演示[拓展]</p><p>匿名内部类在开发中的真实使用场景演示<br>给按钮绑定点击事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> anonymous;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyChangeListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="comment">//通过GUI编程理解匿名类的真实使用场景</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建窗口</span></span><br><span class="line">        <span class="type">JFrame</span> <span class="variable">win</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>( <span class="string">&quot;登录窗口&quot;</span> );</span><br><span class="line">        <span class="type">JPanel</span> <span class="variable">panel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>(  );</span><br><span class="line">        <span class="comment">//2.按钮</span></span><br><span class="line">        <span class="type">JButton</span> <span class="variable">btn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>( <span class="string">&quot;登录&quot;</span> );</span><br><span class="line">        <span class="comment">//匿名内部类使用 监听器</span></span><br><span class="line">       <span class="comment">// btn.addActionListener( new Action() &#123;</span></span><br><span class="line">         <span class="comment">//   @Override</span></span><br><span class="line">          <span class="comment">//  public Object getValue(String s) &#123;</span></span><br><span class="line">        <span class="comment">//        JOptionPane.showMessageDialog( win,&quot;你是🐖！&quot; );</span></span><br><span class="line">           <span class="comment">//     return null;</span></span><br><span class="line">         <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">//简化代码 一行搞定</span></span><br><span class="line">    btn.addActionListener( e -&gt; JOptionPane.showMessageDialog( win,<span class="string">&quot;你是🐖！&quot;</span> ) );</span><br><span class="line">        <span class="comment">//3.对象添加到窗口展示</span></span><br><span class="line">        win.add(btn);</span><br><span class="line">        <span class="comment">//4.展示窗口</span></span><br><span class="line">        win.setSize( <span class="number">400</span>,<span class="number">300</span> );</span><br><span class="line">        win.setLocationRelativeTo( <span class="literal">null</span> );</span><br><span class="line">        win.setVisible( <span class="literal">true</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 面向对象知识回顾</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象知识回顾"><a href="#面向对象知识回顾" class="headerlink" title="面向对象知识回顾"></a><strong>面向对象知识回顾</strong></h1><h2 id="1-面向对象思想概述、类、对象"><a href="#1-面向对象思想概述、类、对象" class="headerlink" title="1. 面向对象思想概述、类、对象"></a>1. 面向对象思想概述、类、对象</h2><h3 id="1-1-类"><a href="#1-1-类" class="headerlink" title="1.1 类"></a>1.1 类</h3><p>Java中要先定义类，才能创建对象；</p><p>类是相同事物共同特征的描述；对象是具体存在的实例；</p><p>建议一个Java文件建一个类；</p><p>类中可以定义的5大成分：<strong>成员变量、构造器、成员方法</strong>、代码块、内部类。</p><p> 修饰符 class 类名{</p><p>​         // 1、成员变量Field：描述类或者对象的属性信息，如：姓名、年龄。</p><p>​         // 2、成员方法Method: 描述类或者对象的行为的，如：唱歌、吃饭、买票。</p><p>​         // 3、构造器Constructor: 初始化一个类的对象返回。</p><p>​         // 4、内部类：<strong>还没有学习。</strong></p><p>​         // 5、代码块：<strong>还没有学习。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> classDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">char</span> sex;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">char</span> sex)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.sex = sex;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> sex;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.sex = sex;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> classDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        d.setName(<span class="string">&quot;徐超&quot;</span>);</span><br><span class="line">        d.setSex(<span class="string">&#x27;公&#x27;</span>);</span><br><span class="line">        System.out.println(d.getName());</span><br><span class="line">        System.out.println(d.getSex());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-构造器"><a href="#2-构造器" class="headerlink" title="2. 构造器"></a>2. 构造器</h2><h3 id="2-1-构造器"><a href="#2-1-构造器" class="headerlink" title="2.1 构造器"></a>2.1 <strong>构造器</strong></h3><p>初始化类的对象并返回对象的地址。</p><p><strong>构造器格式：</strong></p><p>修饰符 类名(形参列表){</p><p> }</p><p><strong>初始化对象格式</strong></p><p> 类名 对象变量 = new 构造器;</p><h3 id="2-2构造器的分类和作用"><a href="#2-2构造器的分类和作用" class="headerlink" title="2.2构造器的分类和作用"></a>2.2<strong>构造器的分类和作用</strong></h3><p>无参数构造器：初始化对象数据为默认值。</p><p>有参数构造器：可以在初始化对象的时候同时为对象的数据赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  String longinName;</span><br><span class="line">    <span class="keyword">private</span>  String  passWord;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//无参构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造器被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String longinName, String passWord, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.longinName = longinName;</span><br><span class="line">        <span class="built_in">this</span>.passWord = passWord;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLonginName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> longinName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLonginName</span><span class="params">(String longinName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.longinName = longinName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassWord</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> passWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassWord</span><span class="params">(String passWord)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.passWord = passWord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        System.out.println(u.getName());</span><br><span class="line">        System.out.println(u.getAge());</span><br><span class="line">        System.out.println(u.getPassWord());</span><br><span class="line">        System.out.println(u.getLonginName());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;ds&quot;</span>,<span class="string">&quot;12121&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        System.out.println(u2.getName());</span><br><span class="line">        System.out.println(u2.getAge());</span><br><span class="line">        System.out.println(u2.getPassWord());</span><br><span class="line">        System.out.println(u2.getLonginName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-构造器的作用？"><a href="#2-3-构造器的作用？" class="headerlink" title="2.3 构造器的作用？"></a>2.3 构造器的作用？</h3><p><strong>初始化类的对象，并返回对象的地址。</strong></p><h3 id="2-4-构造器有几种，各自的作用是什么？"><a href="#2-4-构造器有几种，各自的作用是什么？" class="headerlink" title="2.4 构造器有几种，各自的作用是什么？"></a>2.4 构造器有几种，各自的作用是什么？</h3><p><strong>无参数构造器：初始化的对象时，成员变量的数据均采用默认值。</strong></p><p><strong>有参数构造器：在初始化对象的时候，同时可以为对象进行赋值。</strong></p><h3 id="2-5-构造器有哪些注意事项？"><a href="#2-5-构造器有哪些注意事项？" class="headerlink" title="2.5 构造器有哪些注意事项？"></a>2.5 构造器有哪些注意事项？</h3><p>任何类定义出来，默认就自带了无参数构造器，写不写都有。</p><p><strong>一旦定义了有参数构造器，无参数构造器就没有了，此时就需要自己写无参数构造器了。</strong></p><h2 id="3-this关键字"><a href="#3-this关键字" class="headerlink" title="3. this关键字"></a>3. this关键字</h2><h3 id="3-1-作用："><a href="#3-1-作用：" class="headerlink" title="3.1 作用："></a>3.1 作用：</h3><p>出现在成员方法、构造器中代表当前对象的地址，用于指定访问当前对象的成员变量、成员方法。</p><p>this出现在构造器，或者方法中，哪个对象调用他们，this就代表哪个对象</p><p>在构造器中</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package thisdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.zip.GZIPOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span> <span class="params">(<span class="type">String</span> name ,<span class="type">double</span> price)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//this代表当前对象的地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="type">void</span> <span class="title">go</span><span class="params">(<span class="type">String</span> name)</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="keyword">this</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="keyword">this</span>.name + <span class="string">&quot;正在和&quot;</span> + name +<span class="string">&quot;比赛&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">setName</span><span class="params">(<span class="type">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">setPrice</span><span class="params">(<span class="type">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> thisdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Car</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;宝马&quot;</span>,<span class="number">5000</span>);</span><br><span class="line">        System.out.println(c2.getName());</span><br><span class="line">        System.out.println(c2.getPrice());</span><br><span class="line">        c2.go(<span class="string">&quot;奔驰&quot;</span>);</span><br><span class="line">        System.out.println(c2);<span class="comment">//宝马正在和奔驰比赛</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>代表当前对象的地址，可以用于指定访问当前对象的成员变量、方法</strong></p><h2 id="4-面向对象三大特征之一：封装"><a href="#4-面向对象三大特征之一：封装" class="headerlink" title="4. 面向对象三大特征之一：封装"></a>4. 面向对象三大特征之一：封装</h2><h3 id="4-1-面向对象的三大特征"><a href="#4-1-面向对象的三大特征" class="headerlink" title="4.1 面向对象的三大特征"></a>4.1 面向对象的三大特征</h3><p>：封装<strong>、</strong>继承、多态</p><p>封装基本思想：解决属性和方法属于哪个对象的问题。</p><p>封装步骤：通常将成员变量私有、提供方法进行暴露。</p><p>封装作用：提高业务功能设计的安全性，提高程序逻辑性和开发效率。</p><h4 id="4-2-特征的含义："><a href="#4-2-特征的含义：" class="headerlink" title="4.2 特征的含义："></a>4.2 <strong>特征的含义：</strong></h4><p>l所谓特征指的是已经成为Java设计代码的基本特点，即使毫无意义，通常也要需要满足这样的设计要求来编写程序。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package encapsulation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> &#123;</span><br><span class="line">    <span class="comment">//私有的成员只能在本类中被访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//暴露</span></span><br><span class="line">    <span class="comment">//赋值找get</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getAge</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//取值找set</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span>(<span class="params"><span class="built_in">int</span> age</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;年龄不合法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> encapsulation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> <span class="type">Student</span>();</span><br><span class="line">        s.setAge(<span class="number">-12</span>);</span><br><span class="line">        System.out.println(s.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-标准-JavaBean"><a href="#5-标准-JavaBean" class="headerlink" title="5. 标准 JavaBean"></a>5. 标准 JavaBean</h2><h3 id="5-1-书写标准-JavaBean-必须满足如下要求："><a href="#5-1-书写标准-JavaBean-必须满足如下要求：" class="headerlink" title="5.1 书写标准 JavaBean 必须满足如下要求："></a>5.1 书写标准 JavaBean 必须满足如下要求：</h3><p>也可以理解成实体类，其对象可以用于在程序中封装数据</p><p>成员变量使用 <strong>private</strong> 修饰。</p><p>提供每一个成员变量对应的 etXxx() /getXxx()</p><p>必须提供一个<strong>无参构造器。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//私有封装</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">double</span> height;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">double</span> salary;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> introduce;</span><br><span class="line"><span class="comment">//无参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//有参构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">double</span> height, <span class="type">double</span> salary, <span class="type">double</span> introduce)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        <span class="built_in">this</span>.introduce = introduce;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//getset方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(<span class="type">double</span> height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getIntroduce</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> introduce;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIntroduce</span><span class="params">(<span class="type">double</span> introduce)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.introduce = introduce;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//对象封装信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        u1.setSalary(<span class="number">1000</span>);</span><br><span class="line">        u1.setHeight(<span class="number">160</span>);</span><br><span class="line">        u1.setIntroduce(<span class="number">21</span>);</span><br><span class="line">        System.out.println(u1.getHeight());</span><br><span class="line">        System.out.println(u1.getIntroduce());</span><br><span class="line">        System.out.println(u1.getName());</span><br><span class="line">        System.out.println(u1.getSalary());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">1000</span>,<span class="number">10</span>,<span class="number">12</span>);</span><br><span class="line">        System.out.println(u1.getHeight());</span><br><span class="line">        System.out.println(u1.getIntroduce());</span><br><span class="line">        System.out.println(u1.getName());</span><br><span class="line">        System.out.println(u1.getSalary());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 面向对象 继承</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象三大特征之二：继承"><a href="#面向对象三大特征之二：继承" class="headerlink" title="面向对象三大特征之二：继承"></a>面向对象三大特征之二：继承</h1><h2 id="1-继承概述、使用继承的好处"><a href="#1-继承概述、使用继承的好处" class="headerlink" title="1 继承概述、使用继承的好处"></a>1 继承概述、使用继承的好处</h2><h4 id="1-1-什么是继承？"><a href="#1-1-什么是继承？" class="headerlink" title="1.1 什么是继承？"></a>1.1 什么是继承？</h4><p>Java中提供一个关键字extends，用这个关键字，我们可以让一个类和另一个类建立起父子关系。</p><p>Student称为子类（派生类），People称为父类(基类 或超类)。<br>作用：当子类继承父类后，就可以直接使用父类公共的属性和方法了</p><p>继承的优点： 可以提高代码的复用性。</p><h4 id="1-2-什么是继承-继承的好处是啥？"><a href="#1-2-什么是继承-继承的好处是啥？" class="headerlink" title="1.2 什么是继承? 继承的好处是啥？"></a>1.2 什么是继承? 继承的好处是啥？</h4><p>继承就是java允许我们用extends关键字，让一个类和另一个类建立起一种父子关系。<br>提高代码复用性，减少代码冗余，增强类的功能扩展性。<br>继承的格式 子类 extends父类</p><h4 id="1-3继承后子类的特点？"><a href="#1-3继承后子类的特点？" class="headerlink" title="1.3继承后子类的特点？"></a>1.3继承后子类的特点？</h4><p>子类 继承父类，子类可以得到父类的属性和行为，子类可以使用。<br>Java中子类更强大</p><h2 id="2-继承的设计规范、内存运行原理"><a href="#2-继承的设计规范、内存运行原理" class="headerlink" title="2 继承的设计规范、内存运行原理"></a>2 继承的设计规范、内存运行原理</h2><h4 id="2-1-继承设计规范："><a href="#2-1-继承设计规范：" class="headerlink" title="2.1 继承设计规范："></a>2.1 继承设计规范：</h4><p>子类们相同特征（共性属性，共性方法）放在父类中定义，子类独有的的属性和行为应该定义在子类自己里面。</p><h4 id="2-2-为什么？"><a href="#2-2-为什么？" class="headerlink" title="2.2 为什么？"></a>2.2 为什么？</h4><p>如果子类的独有属性、行为定义在父类中，会导致其它子类也会得到这些属性和行为，这不符合面向对象逻辑。</p><h4 id="2-3需求："><a href="#2-3需求：" class="headerlink" title="2.3需求："></a>2.3<strong>需求：</strong></h4><p> 在传智教育的tlias教学资源管理系统中，存在学生、老师角色会进入系统。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exends;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.ls.LSOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="comment">//人类，父类</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">queryCourse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在查看课表&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exends;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span>  <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="comment">//独有行为 子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">writeInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;写了语法好happy&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exends;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">            s.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            s.setAge(<span class="number">12</span>);</span><br><span class="line">        System.out.println(s.getName());</span><br><span class="line">        System.out.println(s.getAge());</span><br><span class="line">        s.queryCourse();</span><br><span class="line">        s.writeInfo();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>继承需要满足什么样的设计规范？<br>子类们相同特征（共性属性，共性方法）放在父类中定义。<br>子类独有的的属性和行为应该定义在子类自己里面。 </p><h2 id="3-继承的特点"><a href="#3-继承的特点" class="headerlink" title="3 继承的特点"></a>3 继承的特点</h2><h4 id="3-1-继承的特点"><a href="#3-1-继承的特点" class="headerlink" title="3.1 继承的特点"></a>3.1 继承的特点</h4><p>子类可以继承父类的属性和行为，但是子类不能继承父类的构造器。<br>Java是单继承模式：一个类只能继承一个直接父类。<br>Java不支持多继承、但是支持多层继承。<br>Java中所有的类都是Object类的子类。</p><h4 id="3-2-子类是否可以继承父类的构造器？"><a href="#3-2-子类是否可以继承父类的构造器？" class="headerlink" title="3.2 子类是否可以继承父类的构造器？"></a>3.2 子类是否可以继承父类的构造器？</h4><p>不可以的，子类有自己的构造器，父类构造器用于初始化父类对象。</p><h4 id="3-3-子类是否可以继承父类的私有成员？"><a href="#3-3-子类是否可以继承父类的私有成员？" class="headerlink" title="3.3 子类是否可以继承父类的私有成员？"></a>3.3 子类是否可以继承父类的私有成员？</h4><p>可以的，只是不能直接访问。</p><h4 id="3-4子类是否可以继承父类的静态成员？"><a href="#3-4子类是否可以继承父类的静态成员？" class="headerlink" title="3.4子类是否可以继承父类的静态成员？"></a>3.4子类是否可以继承父类的静态成员？</h4><p>有争议的知识点。<br>子类可以直接使用父类的静态成员（共享）<br>但个人认为：子类不能继承父类的静态成员。（共享并非继承）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exends;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="comment">//理解继承特点</span></span><br><span class="line">  <span class="comment">//  子类是否可以继承父类的私有成员？</span></span><br><span class="line">    <span class="comment">//可以的只是不能直接访问</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="comment">//t.eat();</span></span><br><span class="line">        <span class="comment">//子类是否可以继承父类的静态成员？</span></span><br><span class="line">        <span class="comment">//有争议的知识点。</span></span><br><span class="line">        <span class="comment">//子类可以直接使用父类的静态成员（共享）</span></span><br><span class="line">        <span class="comment">//但个人认为：子类不能继承父类的静态成员。（共享并非继承）</span></span><br><span class="line">        System.out.println(Dog.location);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animai</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物要吃东西***&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态成员</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> <span class="string">&quot;动物园&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animai</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java只支持单继承，不支持多继承。(反证法)   Java支持多层继承</p><h4 id="3-5-Object特点："><a href="#3-5-Object特点：" class="headerlink" title="3.5 Object特点："></a>3.5 Object特点：</h4><p>Java中所有类，要么直接继承了Object , 要么默认继承了Object , 要么间接继承了Object, Object是祖宗类。</p><h4 id="3-6继承有哪些特点？"><a href="#3-6继承有哪些特点？" class="headerlink" title="3.6继承有哪些特点？"></a>3.6继承有哪些特点？</h4><p>子类可以继承父类的属性和行为，但是子类不能继承父类的构造器。<br>Java是单继承模式：一个类只能继承一个直接父类。<br>Java不支持多继承、但是支持多层继承。<br>Java中所有的类都是Object类的子类。</p><h2 id="4-继承后：成员变量、成员方法的访问特点"><a href="#4-继承后：成员变量、成员方法的访问特点" class="headerlink" title="4 继承后：成员变量、成员方法的访问特点"></a>4 继承后：成员变量、成员方法的访问特点</h2><h4 id="4-1-在子类方法中访问成员（成员变量、成员方法）满足：就近原则"><a href="#4-1-在子类方法中访问成员（成员变量、成员方法）满足：就近原则" class="headerlink" title="4.1 在子类方法中访问成员（成员变量、成员方法）满足：就近原则"></a>4.1 在子类方法中访问成员（成员变量、成员方法）满足：就近原则</h4><p>先子类局部范围找<br>然后子类成员范围找<br>然后父类成员范围找，如果父类范围还没有找到则报错。</p><p>如果子父类中，出现了重名的成员，会优先使用子类的，此时如果一定要在子类中使用父类的怎么办？<br>可以通过super关键字，指定访问父类的成员。</p><p>在子类方法中访问成员（成员变量、成员方法）满足：<br>就近原则，子类没有找子类、子类没有找父类、父类没有就报错！</p><h4 id="4-2如果子父类中出现了重名的成员，此时如果一定要在子类中使用父类的怎么办？"><a href="#4-2如果子父类中出现了重名的成员，此时如果一定要在子类中使用父类的怎么办？" class="headerlink" title="4.2如果子父类中出现了重名的成员，此时如果一定要在子类中使用父类的怎么办？"></a>4.2如果子父类中出现了重名的成员，此时如果一定要在子类中使用父类的怎么办？</h4><p>格式：super.父类成员变量/父类成员方法格式：</p><p>this.子类成员变量/子类成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exends;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//成员方法</span></span><br><span class="line"><span class="type">xiaomi</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">xiaomi</span>();</span><br><span class="line">x.run2();;<span class="comment">//便宜</span></span><br><span class="line">x.run();<span class="comment">//5G</span></span><br><span class="line">        x.showName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iphone</span>&#123;</span><br><span class="line"><span class="comment">//父类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;4G&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;爸爸&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">xiaomi</span>   <span class="keyword">extends</span>  <span class="title class_">iphone</span>&#123;</span><br><span class="line">    <span class="comment">//子类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;儿子&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">run2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;便宜&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">showName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span><span class="string">&quot;局部名&quot;</span>;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);<span class="comment">//找子类</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name);<span class="comment">//找父类</span></span><br><span class="line">        <span class="built_in">super</span>.run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;5G&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-继承后：方法重写"><a href="#5-继承后：方法重写" class="headerlink" title="5 继承后：方法重写"></a>5 继承后：方法重写</h2><h4 id="5-1-什么是方法重写？"><a href="#5-1-什么是方法重写？" class="headerlink" title="5.1 什么是方法重写？"></a>5.1 什么是方法重写？</h4><p>在继承体系中，子类出现了和父类中一模一样的方法声明，我们就称子类这个方法是重写的方法。<br>方法重写的应用场景<br>当子类需要父类的功能，但父类的该功能不完全满足自己的需求时。<br>子类可以重写父类中的方法。</p><h4 id="5-2-案例演示："><a href="#5-2-案例演示：" class="headerlink" title="5.2 案例演示："></a>5.2 案例演示：</h4><p>旧手机的功能只能是基本的打电话，发信息<br>新手机的功能需要能够：基本的打电话下支持视频通话。基本的发信息下支持发送语音和图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> exends;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teat4</span> &#123;</span><br><span class="line">    <span class="comment">//认识方法重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NewPhone</span> <span class="variable">hw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewPhone</span>();</span><br><span class="line">        hw.call();<span class="comment">//打电话 视频通话</span></span><br><span class="line">        hw.sendMsg();<span class="comment">//发短信 发图片</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.call();</span><br><span class="line">        System.out.println(<span class="string">&quot;视频通话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写的方法 校验注解 提高程序的可读性</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.sendMsg();</span><br><span class="line">        System.out.println(<span class="string">&quot;发图片&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-Override重写注解"><a href="#5-3-Override重写注解" class="headerlink" title="5.3 @Override重写注解"></a>5.3 @Override重写注解</h4><p>@Override是放在重写后的方法上，作为重写是否正确的校验注解。<br>加上该注解后如果重写错误，编译阶段会出现错误提示。<br><strong>建议重写方法都加@Override注解，代码安全，优雅！</strong></p><h4 id="5-4-方法重写注意事项和要求"><a href="#5-4-方法重写注意事项和要求" class="headerlink" title="5.4 方法重写注意事项和要求"></a>5.4 方法重写注意事项和要求</h4><p><strong>重写方法的名称、形参列表必须与被重写方法的名称和参数列表一致。</strong><br>私有方法不能被重写。<br>子类重写父类方法时，访问权限必须大于或者等于父类 （暂时了解 ：缺省 &lt; protected &lt; public）<br>子类不能重方法重写是什么样的？<br>子类写一个与父类申明一样的方法覆盖父类的方法。<br>方法重写建议加上哪个注解，有什么好处？<br>@Override注解可以校验重写是否正确，同时可读性好。<br>重写方法有哪些基本要求？<br>重写方法的名称和形参列表应该与被重写方法一致。<br>私有方法不能被重写。<br>子类重写父类方法时，访问权限必须大于或者等于父类被重写的方法的权限。写父类的静态方法，如果重写会报错的。</p><h2 id="6-继承后：子类构造器的特点"><a href="#6-继承后：子类构造器的特点" class="headerlink" title="6 继承后：子类构造器的特点"></a>6 继承后：子类构造器的特点</h2><h4 id="6-1-子类继承父类后构造器的特点："><a href="#6-1-子类继承父类后构造器的特点：" class="headerlink" title="6.1 子类继承父类后构造器的特点："></a>6.1 子类继承父类后构造器的特点：</h4><p>子类中所有的构造器默认都会先访问父类中无参的构造器，再执行自己。</p><h4 id="6-2-为什么？"><a href="#6-2-为什么？" class="headerlink" title="6.2 为什么？"></a>6.2 为什么？</h4><p>子类在初始化的时候，有可能会使用到父类中的数据，如果父类没有完成初始化，子类将无法使用父类的数据。<br>子类初始化之前，一定要调用父类构造器先完成父类数据空间的初始化。</p><h4 id="6-3怎么调用父类构造器的？"><a href="#6-3怎么调用父类构造器的？" class="headerlink" title="6.3怎么调用父类构造器的？"></a>6.3怎么调用父类构造器的？</h4><p>子类构造器的第一行语句默认都是：super()，不写也存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animals</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">Animals</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类Animal无参数构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animals</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类Dog无参数构造器&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类有参数构造器&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        System.out.println(d1);</span><br><span class="line">        System.out.println(<span class="string">&quot;*********&quot;</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;金毛&quot;</span>);</span><br><span class="line">        System.out.println(d2);</span><br><span class="line">        <span class="comment">//父类Animal无参数构造器</span></span><br><span class="line">        <span class="comment">//子类Dog无参数构造器</span></span><br><span class="line">        <span class="comment">//Arr.Dog@16b98e56</span></span><br><span class="line">        <span class="comment">//*********</span></span><br><span class="line">        <span class="comment">//父类Animal无参数构造器</span></span><br><span class="line">        <span class="comment">//父类有参数构造器</span></span><br><span class="line">        <span class="comment">//Arr.Dog@7ef20235</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-子类继承父类后构造器的特点是什么样的？"><a href="#6-4-子类继承父类后构造器的特点是什么样的？" class="headerlink" title="6.4 子类继承父类后构造器的特点是什么样的？"></a>6.4 子类继承父类后构造器的特点是什么样的？</h4><p>子类中所有的构造器默认都会先访问父类中无参的构造器，再执行自己。</p><h2 id="7-继承后：子类构造器访问父类有参构造器"><a href="#7-继承后：子类构造器访问父类有参构造器" class="headerlink" title="7 继承后：子类构造器访问父类有参构造器"></a>7 继承后：子类构造器访问父类有参构造器</h2><h4 id="7-1-super调用父类有参数构造器的作用："><a href="#7-1-super调用父类有参数构造器的作用：" class="headerlink" title="7.1 super调用父类有参数构造器的作用："></a>7.1 super调用父类有参数构造器的作用：</h4><p> 初始化继承自父类的数据。</p><p>如果父类中没有无参数构造器，只有有参构造器，会出现什么现象呢？<br>会报错。因为子类默认是调用父类无参构造器的。</p><h4 id="7-2-如何解决？"><a href="#7-2-如何解决？" class="headerlink" title="7.2 如何解决？"></a>7.2 如何解决？</h4><p>子类构造器中可以通过书写 super(…)，手动调用父类的有参数构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Arrr2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span>  <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">People</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">People</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Arrr2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">Teacher</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="comment">//调用父类构造器,初始化父类数据</span></span><br><span class="line">        <span class="comment">//通过调用父类有参数构造器来初始化继承自父类的数据</span></span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Arrr2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        System.out.println(t.getAge());</span><br><span class="line">        System.out.println(t.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>1、super调用父类构造器的作用是什么？<br>通过调用父类有参数构造器来初始化继承自父类的数据</p><h2 id="8-this、super使用总结"><a href="#8-this、super使用总结" class="headerlink" title="8 this、super使用总结"></a>8 this、super使用总结</h2><h4 id="8-1-this和super详情"><a href="#8-1-this和super详情" class="headerlink" title="8.1 this和super详情"></a>8.1 this和super详情</h4><p>this：代表本类对象的引用；super：代表父类存储空间的标识。</p><div class="table-container"><table><thead><tr><th><strong>关键字</strong></th><th><strong>访问成员变量</strong></th><th><strong>访问成员方法</strong></th><th><strong>访问构造方法</strong></th></tr></thead><tbody><tr><td><strong>this</strong></td><td>this.成员变量  访问本类成员变量</td><td>this.成员方法(…)  访问本类成员方法</td><td><strong>this(…)</strong>  <strong>访问本类构器</strong></td></tr><tr><td><strong>super</strong></td><td>super.成员变量  访问父类成员变量</td><td>super.成员方法(…)  访问父类成员方法</td><td>super(…)  访问父类构造器</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Arrr2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String schoolName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>(name,<span class="string">&quot;西安外事学院&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, String schoolName)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.schoolName = schoolName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getSchoolName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> schoolName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSchoolName</span><span class="params">(String schoolName)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.schoolName = schoolName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Arrr2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//this访问兄弟构造器</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;北京大学&quot;</span>);</span><br><span class="line">        System.out.println(s1.getName());</span><br><span class="line">        System.out.println(s1.getSchoolName());</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;南辞&quot;</span>);</span><br><span class="line">        System.out.println(s2.getName());</span><br><span class="line">        System.out.println(s2.getSchoolName());</span><br><span class="line">           <span class="comment">//张三</span></span><br><span class="line">        <span class="comment">//北京大学</span></span><br><span class="line">        <span class="comment">//南辞</span></span><br><span class="line">        <span class="comment">//西安外事学院</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 面向对象 多态</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象三大特征之三：多态"><a href="#面向对象三大特征之三：多态" class="headerlink" title="面向对象三大特征之三：多态"></a>面向对象三大特征之三：多态</h1><h2 id="1-多态的概述"><a href="#1-多态的概述" class="headerlink" title="1. 多态的概述"></a>1. 多态的概述</h2><h2 id="1-1-什么是多态？"><a href="#1-1-什么是多态？" class="headerlink" title="1.1 什么是多态？"></a>1.1 什么是多态？</h2><p>指对象可以有多种形态。<br>多态的常见形式</p><h2 id="1-2-多态中成员访问特点"><a href="#1-2-多态中成员访问特点" class="headerlink" title="1.2 多态中成员访问特点"></a>1.2 多态中成员访问特点</h2><p>方法调用：编译看左边，运行看右边。<br>变量调用：编译看左边，运行也看左边。（注意）</p><h2 id="1-3-多态的前提"><a href="#1-3-多态的前提" class="headerlink" title="1.3 多态的前提"></a>1.3 多态的前提</h2><p>有继承/实现关系；有父类引用指向子类对象；有方法重写（多态侧重行为多态）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.polymorphic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跑&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;&#125;</span><br><span class="line">    <span class="keyword">package</span> com.company.polymorphic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span>  <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;🐕&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;🐕跑的快&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.company.polymorphic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tortoise</span> <span class="keyword">extends</span>  <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;🐢&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;🐢跑的慢&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.polymorphic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//多态形式</span></span><br><span class="line">        <span class="comment">//方法调用：编译看左边，运行看右边。</span></span><br><span class="line">        <span class="comment">//变量调用：编译看左边，运行也看左边</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        a.run();</span><br><span class="line">        System.out.println( ((Dog) a).name );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tortoise</span>();</span><br><span class="line">        a2.run();</span><br><span class="line">        System.out.println( ((Tortoise) a2).name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-多态的优势"><a href="#1-4-多态的优势" class="headerlink" title="1.4 多态的优势"></a>1.4 多态的优势</h2><p>在多态形式下，右边对象可以实现解耦合，便于扩展和维护。</p><p>定义方法的时候，使用父类型作为参数，该方法就可以接收这父类的一切子类对象，体现出多态的扩展性与便利。<br>多态下会产生的一个问题:<br>多态下不能使用子类的独有功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.polymorphic.advantage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        go(d);</span><br><span class="line">        <span class="comment">//多态下不能使用子类的独有功能</span></span><br><span class="line">        <span class="comment">//d.LookDog();</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tortoise</span>();</span><br><span class="line">        go(t);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">go</span><span class="params">(Animal a)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;预备&quot;</span>);</span><br><span class="line">        a.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-多态下-类型转换问题"><a href="#1-5-多态下-类型转换问题" class="headerlink" title="1.5 多态下: 类型转换问题"></a>1.5 多态下: 类型转换问题</h2><p>自动类型转换（从子到父)：Animal c = new Cat();<br>强制类型转换（从父到子)<br>从父到子（ 必须进行强制类型转换,否则报错）:  子类 对象变量 = (子类)父类类型的变量<br> 作用：可以解决多态下的劣势，可以实现调用子类独有的功能。<br> 注意： 有继承/实现关系的类就可以在编译阶段进行强制类型转换；但是，如果转型后的类型和对象真实对象的类型不是同一种类型，那么在运行代码时，就会出现ClassCastException</p><p>Java建议强转转换前使用instanceof判断当前对象的真实类型，再进行强制转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> convert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//自动类型转化</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        a.run();</span><br><span class="line">       <span class="comment">// a.lookDog();</span></span><br><span class="line">        <span class="comment">//强制类型转换 可以实现调用子类独有功能</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog) a;</span><br><span class="line">        d.LookDog();</span><br><span class="line">        <span class="comment">//注意，多态强制类型转换可能类型转换异常</span></span><br><span class="line">        <span class="comment">//运行可能出错</span></span><br><span class="line">        <span class="comment">//Tortoise t = (Tortoise) a;</span></span><br><span class="line">        <span class="comment">//先判断 instanceof</span></span><br><span class="line">        <span class="keyword">if</span>(a <span class="keyword">instanceof</span>  Tortoise) &#123;</span><br><span class="line">            <span class="type">Tortoise</span> <span class="variable">t</span> <span class="operator">=</span> (Tortoise) a;</span><br><span class="line">            t.LayEggs();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">            <span class="type">Dog</span> <span class="variable">d1</span> <span class="operator">=</span> (Dog) a;</span><br><span class="line">            d1.LookDog();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-引用数据类型的类型转换，有几种方式？"><a href="#1-6-引用数据类型的类型转换，有几种方式？" class="headerlink" title="1.6 引用数据类型的类型转换，有几种方式？"></a>1.6 引用数据类型的类型转换，有几种方式？</h2><p> 自动类型转换、强制类型转换。</p><h2 id="1-7-强制类型转换能解决什么问题？"><a href="#1-7-强制类型转换能解决什么问题？" class="headerlink" title="1.7 强制类型转换能解决什么问题？"></a>1.7 强制类型转换能解决什么问题？</h2><p> 可以转换成真正的子类类型，从而调用子类独有功能。</p><h2 id="1-8-强制类型转换需要注意什么？"><a href="#1-8-强制类型转换需要注意什么？" class="headerlink" title="1.8 强制类型转换需要注意什么？"></a>1.8 强制类型转换需要注意什么？</h2><p> 有继承关系/实现的2个类型就可以进行强制转换，编译无问题。<br> 运行时，如果发现强制转换后的类型不是对象真实类型则报错（ClassCastException）<br>强制类型转换前最好做什么事情，如何进行？<br> 使用instanceof判断当前对象的真实类型，再进行强制转换<br> 对象变量名 instanceof 真实类型</p><h2 id="1-9-多态的综合案例"><a href="#1-9-多态的综合案例" class="headerlink" title="1.9 多态的综合案例"></a>1.9 多态的综合案例</h2><p>①定义一个USB的接口（申明USB设备的规范必须是：可以接入和拔出）。</p><p>②提供2个USB实现类代表鼠标和键盘，让其实现USB接口，并分别定义独有功能。</p><p>③创建电脑对象，创建2个USB实现类对象，分别安装到电脑中并触发功能的执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">installUSB</span><span class="params">(USB u)</span>&#123;</span><br><span class="line">        u.connect();</span><br><span class="line">        <span class="keyword">if</span>(u <span class="keyword">instanceof</span>  Mouse)&#123;</span><br><span class="line">            <span class="type">Mouse</span> <span class="variable">m</span> <span class="operator">=</span>(Mouse) u;</span><br><span class="line">            m.click();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (u <span class="keyword">instanceof</span>  KeyBoard)&#123;</span><br><span class="line">            <span class="type">KeyBoard</span> <span class="variable">k</span> <span class="operator">=</span> (KeyBoard) u;</span><br><span class="line">            k.keyDown();</span><br><span class="line">        &#125;</span><br><span class="line">        u.unconnect();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KeyBoard</span> <span class="keyword">implements</span>  <span class="title class_">USB</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KeyBoard</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;成功弹出&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unconnect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;成功弹出&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">keyDown</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;666666666666666&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">implements</span>  <span class="title class_">USB</span>&#123;</span><br><span class="line"><span class="keyword">private</span>  String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mouse</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mouse</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;成功接入&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unconnect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;成功弹出&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">click</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;双击点亮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">USB</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unconnect</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="type">USB</span> <span class="variable">U</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mouse</span>(<span class="string">&quot;蜘蛛蟹&quot;</span>);</span><br><span class="line">        c.installUSB( U );</span><br><span class="line">        <span class="type">USB</span> <span class="variable">K</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">KeyBoard</span>( <span class="string">&quot;大闸蟹&quot;</span> );</span><br><span class="line">        c.installUSB( K );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 买飞机票</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-买飞机票"><a href="#1-买飞机票" class="headerlink" title="1.买飞机票"></a>1.买飞机票</h1><p> 需求: 机票价格按照淡季旺季、头等舱和经济舱收费、输入机票原价、月份和头等舱或经济舱。</p><p> 按照如下规则计算机票价格：旺季（5-10月）头等舱9折，经济舱8.5折，淡季（11月到来年4月）头等舱7 折，经济舱6.5折。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tastDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//买飞机票</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;机票原价：&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> sc.nextDouble();</span><br><span class="line">        System.out.println(<span class="string">&quot;月份是：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;仓位类型（头等舱，经济舱）：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">rs</span> <span class="operator">=</span> calc (price,month,type);</span><br><span class="line">        System.out.println(<span class="string">&quot;您当前价格是：&quot;</span>+rs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">calc</span><span class="params">(<span class="type">double</span> monkey, <span class="type">int</span> month, String type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (month &gt;= <span class="number">5</span> &amp;&amp; month &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">//旺季</span></span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;经济仓&quot;</span>:</span><br><span class="line">                    monkey *= <span class="number">0.85</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;头等舱&quot;</span>:</span><br><span class="line">                    monkey *= <span class="number">0.9</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;您输入的仓位不正确~~&quot;</span>);</span><br><span class="line">                    monkey = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month == <span class="number">11</span> || month == <span class="number">12</span> || month &gt;= <span class="number">1</span> &amp;&amp; month &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">//淡季</span></span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;经济仓&quot;</span>:</span><br><span class="line">                    monkey *= <span class="number">0.65</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;头等舱&quot;</span>:</span><br><span class="line">                    monkey *= <span class="number">0.7</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;您输入的仓位不正确~~&quot;</span>);</span><br><span class="line">                    monkey = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;月份有问题&quot;</span>);</span><br><span class="line">                monkey = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> monkey;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>遇到判断值匹配的时选择什么结构实现？ </li></ol><p>使用switch分支结构实现。</p><p> 2.遇到判断区间范围的时候选择什么结构实现？ </p><p> 使用if分支结构实现</p><h1 id="2-找素数"><a href="#2-找素数" class="headerlink" title="2.找素数"></a>2.找素数</h1><p> 101-200之间的数据可以采用循环依次拿到; 每拿到一个数，判断该数是否是素数。 </p><p>判断规则是：从2开始遍历到该数的一半的数据，看是否有数据可以整除它，有则不是素数，没有则是素数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tastDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//找素数</span></span><br><span class="line">       <span class="comment">// 101-200之间的数据可以采用循环依次拿到; 每拿到一个数，判断该数是否是素数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt;=<span class="number">200</span> ; i++) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//判断是否是素数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;i/<span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i%j == <span class="number">0</span>)&#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">               System.out.print(i + <span class="string">&quot;\t&quot;</span>);<span class="comment">//101    103    107    109    113    127    131    137    139    149    151    157    163    167    173    179    181    191    193    197    199    </span></span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>历2开始到该数的一半的数据去判断是否有整除它的</p><h1 id="3-开发验证码"><a href="#3-开发验证码" class="headerlink" title="3.开发验证码"></a>3.开发验证码</h1><p>需求：  定义方法实现随机产生一个5位的验证码，每位可能是数字、大写字母、小写字母。</p><p> 分析： ① 定义一个方法，生成验证码返回：方法参数是位数、方法的返回值类型是String。 ② 在方法内部使用for循环生成指定位数的随机字符，并连接起来。 ③ 把连接好的随机字符作为一组验证码进行返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tastDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> createCode(<span class="number">5</span>);</span><br><span class="line">        System.out.println(code);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createCode</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">//定义一个字符串生随机字符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;n; i++) &#123;</span><br><span class="line">            <span class="comment">//生成一个随机字符 随机数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span>r.nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="comment">//大写字符（A 65 -Z 65+25）（0-25）+65</span></span><br><span class="line">                    <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> (<span class="type">char</span>) (r.nextInt(<span class="number">26</span>)+<span class="number">65</span>);</span><br><span class="line">                    code +=ch;<span class="comment">//累加</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="comment">//小写字符（a 97 -z 97+25）（0-25）+97</span></span><br><span class="line">                    <span class="type">char</span> <span class="variable">ch1</span> <span class="operator">=</span> (<span class="type">char</span>) (r.nextInt(<span class="number">26</span>)+<span class="number">65</span>);</span><br><span class="line">                    code +=ch1;<span class="comment">//累加</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        <span class="comment">//数字</span></span><br><span class="line">                        code +=r.nextInt(<span class="number">10</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机验证码的核心实现逻辑是如何进行的？ ① 定义一个String类型的变量存储验证码字符。 ② 定义一个for循环，循环5次。 ③ 随机生成0|1|2的数据，依次代表当前位置要生成数字|大写字母|小写字母。 ④ 把0、1、2交给switch生成对应类型的随机字符，把字符交给String变量。 ⑤ 循环结束后，返回String类型的变量即是所求的验证码结果</p><h1 id="4-数组元素复制"><a href="#4-数组元素复制" class="headerlink" title="4.数组元素复制"></a>4.数组元素复制</h1><p>需求：  把一个数组中的元素复制到另一个新数组中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tastDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span>[] arr1 = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;;</span><br><span class="line">                <span class="comment">// int[] arr2 = arr1; // 没有完成了数组复制。</span></span><br><span class="line">                <span class="type">int</span>[] arr2 = <span class="keyword">new</span> <span class="title class_">int</span>[arr1.length];</span><br><span class="line"></span><br><span class="line">                copy(arr1 , arr2);</span><br><span class="line"></span><br><span class="line">                printArray(arr1);</span><br><span class="line">                printArray(arr2);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                    System.out.print(i == arr.length - <span class="number">1</span> ? arr[i] : arr[i] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2)</span>&#123;</span><br><span class="line">                <span class="comment">// 正式完成元素的复制</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line">                    arr2[i] = arr1[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="1-评委打分"><a href="#1-评委打分" class="headerlink" title="1.评委打分"></a>1.评委打分</h1><p>案例 需求 :  在唱歌比赛中，有6名评委给选手打分，分数范围是[0 - 100]之间的整数。选手的最后得分为：去掉最 高分、最低分后的4个评委的平均分，请完成上述过程并计算出选手的得分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tastDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 需求：在唱歌比赛中，有6名评委给选手打分，分数范围是[0 - 100]之间的整数。</span></span><br><span class="line"><span class="comment"> 选手的最后得分为：去掉最高分、最低分后的4个评委的平均分，请完成上述过程并计算出选手的得分。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 1、定义一个动态初始化的数组，用于后期录入6个评委的分数</span></span><br><span class="line">                <span class="type">int</span>[] scores = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2、录入6个评委的分数</span></span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请您输入第&quot;</span> + (i + <span class="number">1</span>) +<span class="string">&quot;个评委的打分：&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                    <span class="comment">// 3、把这个分数存入到数组的对应位置处</span></span><br><span class="line">                    scores[i] = score;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 3、遍历数组中的每个数据，找出最大值 最小值 总分</span></span><br><span class="line">                <span class="comment">// int max = scores[0] , min = scores[0] , sum = 0;</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> scores[<span class="number">0</span>] ;</span><br><span class="line">                <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> scores[<span class="number">0</span>] ;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; scores.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(scores[i] &gt; max)&#123;</span><br><span class="line">                        <span class="comment">// 替换最大值变量存储的数据</span></span><br><span class="line">                        max = scores[i];</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(scores[i] &lt; min)&#123;</span><br><span class="line">                        <span class="comment">// 替换最小值变量存储的数据</span></span><br><span class="line">                        min = scores[i];</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 统计总分</span></span><br><span class="line">                    sum += scores[i];</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;最高分是：&quot;</span> + max);</span><br><span class="line">                System.out.println(<span class="string">&quot;最低分是：&quot;</span> + min);</span><br><span class="line">                <span class="comment">// 4、统计平均分即可</span></span><br><span class="line">                <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> (sum - max - min) * <span class="number">1.0</span> / (scores.length - <span class="number">2</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;选手最终得分是：&quot;</span> + result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>.如何实现评委打分案例？</p><p> ① 定义一个动态初始化的数组用于存储分数数据。 ② 定义三个变量用于保存最大值、最小值和总和。 ③ 遍历数组中的每个元素，依次进行统计。 ④ 遍历结束后按照规则计算出结果即可。</p><h1 id="2-数字加密"><a href="#2-数字加密" class="headerlink" title="2.数字加密"></a>2.数字加密</h1><p> 需求： 某系统的数字密码，比如1983，采用加密方式进行传输，规则如下：先得到每位数，然后每位数都加上 5 , 再对10求余，最后将所有数字反转，得到一串新数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tastDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1、定义一个数组存储需要加密的数据</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、遍历数组中的每个数据，按照规则进行修改</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = (arr[i] + <span class="number">5</span>) % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、把数组中的元素进行反转操作。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = arr.length - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="comment">// 交换 i 和 j位置处的值，即可反转</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">            arr[j] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、遍历数组中的每个元素输出即可</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例中是如何完成数组元素的反转的？ ⚫ 定义2个变量分别占数组的首尾位置。 ⚫ 一个变量往前走，一个变量往后走，同步交换双方位置处的值</p><h1 id="3-抢红包"><a href="#3-抢红包" class="headerlink" title="3.抢红包"></a>3.抢红包</h1><p>需求： 一个大V直播抽奖，奖品是现金红包，分别有{2, 588 , 888, 1000, 10000}五个奖金。请使用代码模拟抽奖， 打印出每个奖项，奖项的出现顺序要随机且不重复。打印效果如下：（随机顺序，不一定是下面的顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tastDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 需求：一个大V直播抽奖，奖品是现金红包，分别有&#123;2, 588 , 888, 1000, 10000&#125;五个奖金。</span></span><br><span class="line"><span class="comment"> 请使用代码模拟抽奖，打印出每个奖项，奖项的出现顺序要随机且不重复。打印效果如下：（随机顺序，不一定是下面的顺序）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">                <span class="comment">// 1、定义一个数组存储可以抽奖的金额 总数</span></span><br><span class="line">                <span class="type">int</span>[] money = &#123;<span class="number">2</span>, <span class="number">588</span>, <span class="number">888</span>, <span class="number">1000</span>, <span class="number">10000</span>&#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2、定义一个数组用于存储已经被抽中的奖金金额。</span></span><br><span class="line">                <span class="type">int</span>[] lockMoney = <span class="keyword">new</span> <span class="title class_">int</span>[money.length];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 3、开始模拟抽奖逻辑</span></span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">                <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; money.length; i++) &#123;</span><br><span class="line">                    <span class="comment">// 分别代表抽奖一次。</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;您要开始打开红包吗，您可以输入任意内容进行抽奖：&quot;</span>);</span><br><span class="line">                    sc.next(); <span class="comment">// 目的是为了让程序在这里等一下，直到用户按了数据和回车就下来抽奖一次！</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                        <span class="comment">// 4、开始抽奖了，随机一个索引取提取金额</span></span><br><span class="line">                        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(money.length);</span><br><span class="line">                        <span class="type">int</span> <span class="variable">currentMoney</span> <span class="operator">=</span> money[index];</span><br><span class="line"></span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">// 代表默认没有被抽过</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 5、判断这个红包金额之前是否有人抽中过！</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; lockMoney.length; j++) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(lockMoney[j] == currentMoney)&#123;</span><br><span class="line">                                <span class="comment">// 说明这个金额已经被抽过了！</span></span><br><span class="line">                                flag = <span class="literal">false</span>; <span class="comment">// 表示已经被抽走了</span></span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;您当前很幸运，抽中了：&quot;</span> + currentMoney);</span><br><span class="line">                            <span class="comment">// 必须把这个金额放到被抽中的数组中去</span></span><br><span class="line">                            lockMoney[i] = currentMoney;</span><br><span class="line">                            <span class="keyword">break</span>; <span class="comment">// 当次抽象已经结束！</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>本次案例中是如何保证每次抽奖的金额不是之前抽过的？ ⚫ 定义一个数组用于记录已经抽到的金额。 ⚫ 每次抽奖都随机一个索引，取出索引对应的奖金金额，判断该金额之前是否 在已抽奖金额的数组中</p><h1 id="4-双色球系统"><a href="#4-双色球系统" class="headerlink" title="4.双色球系统"></a>4.双色球系统</h1><p>业务分析、随机生成一组中奖号码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Test;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tastDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 需求：双色球模拟</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">                <span class="comment">// 1、随机6个红球号码（1-33，不能重复），随机一个蓝球号码（1-16），可以采用数组装起来作为中奖号码</span></span><br><span class="line">                <span class="type">int</span>[] luckNumbers = createLuckNumber();</span><br><span class="line">                <span class="comment">// printArray(luckNumbers);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2、录入用户选中的号码</span></span><br><span class="line">                <span class="type">int</span>[] userNumbers = userInputNumbers();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 3、判断中奖情况</span></span><br><span class="line">                judge(luckNumbers, userNumbers);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">judge</span><span class="params">(<span class="type">int</span>[] luckNumbers, <span class="type">int</span>[] userNumbers )</span>&#123;</span><br><span class="line">                <span class="comment">// 判断是否中奖了。</span></span><br><span class="line">                <span class="comment">// luckNumbers = [12, 23, 8, 16, 15, 32,   9]</span></span><br><span class="line">                <span class="comment">// userNumbers = [23, 13, 18, 6, 8, 33,   10]</span></span><br><span class="line">                <span class="comment">// 1、定义2个变量分别存储红球命中的个数，以及蓝球命中的个数。</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">redHitNumbers</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">blueHitNumbers</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2、判断红球命中了几个，开始统计</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; userNumbers.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; luckNumbers.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                        <span class="comment">// 每次找到了相等了，意味着当前号码命中了</span></span><br><span class="line">                        <span class="keyword">if</span>(userNumbers[i] == luckNumbers[j])&#123;</span><br><span class="line">                            redHitNumbers ++ ;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 蓝球号码是否命中了</span></span><br><span class="line">                blueHitNumbers = luckNumbers[<span class="number">6</span>] == userNumbers[<span class="number">6</span>] ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;中奖号码是：&quot;</span>  );</span><br><span class="line">                printArray(luckNumbers);</span><br><span class="line">                System.out.println(<span class="string">&quot;您投注号码是：&quot;</span>  );</span><br><span class="line">                printArray(userNumbers);</span><br><span class="line">                System.out.println(<span class="string">&quot;您命中了几个红球：&quot;</span> + redHitNumbers);</span><br><span class="line">                System.out.println(<span class="string">&quot;您是否命中蓝球：&quot;</span> + ( blueHitNumbers == <span class="number">1</span> ? <span class="string">&quot;是&quot;</span>: <span class="string">&quot;否&quot;</span> ) );</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断中奖情况了</span></span><br><span class="line">                <span class="keyword">if</span>(blueHitNumbers == <span class="number">1</span> &amp;&amp; redHitNumbers &lt; <span class="number">3</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;恭喜您，中了5元小奖！&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(blueHitNumbers == <span class="number">1</span> &amp;&amp; redHitNumbers == <span class="number">3</span></span><br><span class="line">                        || blueHitNumbers == <span class="number">0</span> &amp;&amp; redHitNumbers == <span class="number">4</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;恭喜您，中了10元小奖！&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(blueHitNumbers == <span class="number">1</span> &amp;&amp; redHitNumbers == <span class="number">4</span></span><br><span class="line">                        || blueHitNumbers == <span class="number">0</span> &amp;&amp; redHitNumbers == <span class="number">5</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;恭喜您，中了200元！&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(blueHitNumbers == <span class="number">1</span> &amp;&amp; redHitNumbers == <span class="number">5</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;恭喜您，中了3000元大奖！&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(blueHitNumbers == <span class="number">0</span> &amp;&amp; redHitNumbers == <span class="number">6</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;恭喜您，中了500万超级大奖！&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(blueHitNumbers == <span class="number">1</span> &amp;&amp; redHitNumbers == <span class="number">6</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;恭喜您，中了1000万巨奖！可以开始享受人生，诗和远方！！&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;感谢您为福利事业做出的突出贡献！！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] userInputNumbers()&#123;</span><br><span class="line">                <span class="comment">// a、动态初始化一个数组，长度为7</span></span><br><span class="line">                <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;请您输入第&quot;</span>+(i + <span class="number">1</span>)+<span class="string">&quot;个红球号码（1-33、不重复）：&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                    numbers[i] = data;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// b、录入一个蓝球号码</span></span><br><span class="line">                System.out.println(<span class="string">&quot;请您输入一个蓝球号码（1-16）：&quot;</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">                numbers[numbers.length - <span class="number">1</span>] = data;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> numbers;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] createLuckNumber()&#123;</span><br><span class="line">                <span class="comment">// a、定义一个动态初始化的数组，存储7个数字</span></span><br><span class="line">                <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];  <span class="comment">// [12, 23, 0, 0, 0, 0, | 0]</span></span><br><span class="line">                <span class="comment">//                                   i</span></span><br><span class="line">                <span class="comment">// b、遍历数组，为每个位置生成对应的号码。(注意：遍历前6个位置，生成6个不重复的红球号码，范围是1-33)</span></span><br><span class="line">                <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                    <span class="comment">// 为当前位置找出一个不重复的1-33之间的数字</span></span><br><span class="line">                    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> r.nextInt(<span class="number">33</span>) + <span class="number">1</span>; <span class="comment">// 1-33 ====&gt;  (0-32) + 1</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// c、注意：必须判断当前随机的这个号码之前是否出现过，出现过要重新随机一个，直到不重复为止，才可以存入数组中去。</span></span><br><span class="line">                        <span class="comment">// 定义一个flag变量，默认认为data是没有重复的</span></span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(numbers[j] == data) &#123;</span><br><span class="line">                                <span class="comment">// data当前这个数据之前出现过，不能用</span></span><br><span class="line">                                flag = <span class="literal">false</span>;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                            <span class="comment">// data这个数据之前没有出现过，可以使用了</span></span><br><span class="line">                            numbers[i] = data;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// d、为第7个位置生成一个1-16的号码作为蓝球号码</span></span><br><span class="line">                numbers[numbers.length - <span class="number">1</span>] = r.nextInt(<span class="number">16</span>) + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> numbers;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>本次案例中是如何去统计红球的命中数量的？ ⚫ 遍历用户的每个选号，然后遍历中奖号码的数组。 ⚫ 看当前选号是否在中奖号码中存在，存在则命中数量加1</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 静态关键字</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h2 id="static静态关键字"><a href="#static静态关键字" class="headerlink" title="static静态关键字"></a>static静态关键字</h2><h3 id="1-static是什么"><a href="#1-static是什么" class="headerlink" title="1. static是什么"></a>1. static是什么</h3><p>static是静态的意思，可以用来修饰成员变量、成员方法。</p><p>static修饰成员变量之后称为静态成员变量（类变量），修饰方法之后称为静态方法（类方法）。</p><p>static修饰后的成员变量，可以被类的所有对象共享（访问、修改)。</p><ol><li>static是什么 ？</li></ol><p><strong>静态的意思，可以修饰成员变量、成员方法</strong></p><p>2.static修饰的成员变量是什么？ 有什么特点？</p><p>静态成员变量（有static修饰，属于类、加载一次，内存中只有一份），访问格式</p><p>实例成员变量（无static修饰，属于对象），访问格式：</p><p>3.两种成员变量各自在什么情况下定义？</p><p><strong>静态成员变量：表示在线人数等需要被类的所有对象共享的信息时。</strong></p><p>实例成员变量：属于每个对象，且每个对象的该信息不同时 如：name,age,money</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//静态成员变量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">onlineNumber</span> <span class="operator">=</span> <span class="number">161</span>;</span><br><span class="line">        <span class="comment">//实例成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span>  age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.类名，静态成员变量</span></span><br><span class="line">        System.out.println(User.onlineNumber);</span><br><span class="line">        <span class="comment">//2,对象名，实例成员变量</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u.name  =<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        u.age = <span class="number">21</span>;</span><br><span class="line">        System.out.println(u.name);</span><br><span class="line">        System.out.println(u.age);</span><br><span class="line">        u.onlineNumber++;</span><br><span class="line">        System.out.println(u.onlineNumber);</span><br><span class="line">        System.out.println(User.onlineNumber);<span class="comment">//推荐方式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-static修饰成员方法的基本用法"><a href="#2-static修饰成员方法的基本用法" class="headerlink" title="2. static修饰成员方法的基本用法"></a>2. static修饰成员方法的基本用法</h3><p><strong>成员方法的分类：</strong></p><p>静态成员方法（有static修饰，归属于类），建议用类名访问，也可以用对象访问。</p><p>实例成员方法（无static修饰，归属于对象），只能用对象触发访问。</p><p>表示对象自己的行为的，且方法中需要访问实例成员的，则该方法必须申明成实例方法。</p><p>如果该方法是以执行一个共用功能为目的，则可以申明成静态方法。</p><p>1.成员方法的分类和访问分别是什么样的？</p><p>   静态成员方法（有static修饰，属于类和对象共享）访问格式：</p><p>​    对象静态成员方法。（不推荐）</p><p>  实例成员方法（无static修饰，属于对象）的访问格式：</p><p>​    对象实例成员方法。</p><p>2.每种成员方法的使用场景是怎么样的？</p><p> 表示对象自己的行为的，且方法中需要直接访问实例成员，则该方法必须申明成实例方法。</p><p> 如果该方法是以执行一个通用功能为目的，或者需要方便访问，则可以申明成静态方法。</p><p>实例方法必须构建对象才能访问，静态方法可以被类和对象直接访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//实例成员变量，属于对象</span></span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态成员变量方法，有static修饰，用类和对象都能被访问</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> age1, <span class="type">int</span> age2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age1 &gt; age2 ? age1 :age2;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实例成员变量属于对象，只能被对象触发访问</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;在好好学习天天向上！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.静态成员方法</span></span><br><span class="line">        System.out.println(Student.getMax(<span class="number">10</span>, <span class="number">3</span>));<span class="comment">//10</span></span><br><span class="line">        System.out.println(getMax(<span class="number">10</span>, <span class="number">3</span>));<span class="comment">//10</span></span><br><span class="line">        <span class="comment">//2.对象，实例方法 构建对象访问</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        s.study();<span class="comment">//张三在好好学习天天向上！</span></span><br><span class="line">        <span class="comment">//3.对象也可以访问静态方法（不推荐）</span></span><br><span class="line">        System.out.println(s.getMax(<span class="number">13</span>,<span class="number">2</span>));<span class="comment">//13</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>static访问注意事项：<br>静态方法只能访问静态的成员，不可以直接访问实例成员。<br>实例方法可以访问静态的成员，也可以访问实例成员。因为实例方法构造对象访问<br>静态方法中是不可以出现this关键字的，this代表当前对象，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="comment">//静态成员</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="type">int</span> <span class="variable">onLineNumber</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===test2===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实例成员</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;跑的快&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ststic访问相关语法</span></span><br><span class="line">    <span class="comment">//3.静态方法中是不可以出现this关键字的，</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.实例方法可以访问静态的成员，也可以访问实例成员。</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(test.onLineNumber);</span><br><span class="line">        System.out.println(onLineNumber);</span><br><span class="line">        test();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        run();<span class="comment">//对象触发</span></span><br><span class="line">        <span class="comment">//this可以出现在实例</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 静态方法只能访问静态的成员，不可以直接访问实例成员。</span></span><br><span class="line">        System.out.println(test.onLineNumber);</span><br><span class="line">        System.out.println(onLineNumber);</span><br><span class="line">        test();</span><br><span class="line">        <span class="comment">// System.out.println(name);不可以直接访问实例成员</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-static应用知识：工具类"><a href="#3-static应用知识：工具类" class="headerlink" title="3. static应用知识：工具类"></a>3. static应用知识：工具类</h2><p>工具类是什么？<br>类中都是一些静态方法，每个方法都是以完成一个共用的功能为目的，这个类用来给系统开发人员共同使用的。</p><p>工具类定义时的其他要求：<br>由于工具里面都是静态方法，直接用类名即可访问，因此，工具类无需创建对象，建议将工具类的构造器进行私有</p><p>工具类是什么，有什么好处？<br>内部都是一些静态方法，每个方法完成一个功能<br>一次编写，处处可用，提高代码的重用性。</p><p>工具类有什么要求？<br>建议工具类的构造器私有化处理。<br>工具类不需要创建对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Util</span> &#123;</span><br><span class="line">    <span class="comment">//由于工具类无需创造对象，所以把其构造器私有化会显得很专业</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Util</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//工具类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">crezteVerifyCode</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//静态成员方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;qwertyuiopasdfghjklzxcvbnm1234567890QWERTYUIOPASDFGHJKLZXCVBNM&quot;</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//获取随机索引，得到几个字符</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(data.length());</span><br><span class="line">            code += data.charAt(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">check</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Util.crezteVerifyCode(<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义数组工具类</p><p>需求：在实际开发中，经常会遇到一些数组使用的工具类。请按照如下要求编写一个数组的工具类：ArraysUtils<br>：我们知道数组对象直接输出的时候是输出对象的地址的，而项目中很多地方都需要返回数组的内容，请在ArraysUtils中提供一个工具类方法toString，用于返回整数数组的内容，返回的字符串格式如：[10, 20, 50, 34, 100]（只考虑整数数组，且只考虑一维数组）<br>：经常需要统计平均值，平均值为去掉最低分和最高分后的分值，请提供这样一个工具方法getAerage，用于返回平均分。（只考虑浮点型数组，且只考虑一维数组）<br>：定义一个测试类TestDemo，调用该工具类的工具方法，并返回结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;</span><br><span class="line"><span class="comment">//完成数组工具类的设计</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">TestDemo</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="comment">//1.一些校验</span></span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.返回内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;[&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;arr.length ; i++) &#123;</span><br><span class="line">            result +=(i == arr.length - <span class="number">1</span>? arr[i] : arr[i] +<span class="string">&quot;,&quot;</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        result +=<span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>  result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr =<span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 =&#123;<span class="number">11</span>,<span class="number">23</span>,<span class="number">45</span>,<span class="number">67</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(TestDemo.toString(arr));</span><br><span class="line">        System.out.println(TestDemo.toString(arr1));</span><br><span class="line">        System.out.println(TestDemo.toString(arr2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-static应用知识：代码块"><a href="#4-static应用知识：代码块" class="headerlink" title="4 static应用知识：代码块"></a>4 static应用知识：代码块</h2><h3 id="4-1-代码块的分类、作用"><a href="#4-1-代码块的分类、作用" class="headerlink" title="4.1 代码块的分类、作用"></a>4.1 代码块的分类、作用</h3><p>代码块概述<br>代码块是类的5大成分之一（成员变量、构造器，方法，代码块，内部类），定义在类中方法外。<br>在Java类下，使用 { } 括起来的代码被称为代码块 。</p><h3 id="4-2-代码块分为"><a href="#4-2-代码块分为" class="headerlink" title="4.2 代码块分为"></a>4.2 代码块分为</h3><p>静态代码块:<br>格式：static{}<br>特点：需要通过static关键字修饰，随着类的加载而加载，并且自动触发、只执行一次 优先加载<br>使用场景：在类加载的时候做一些静态数据初始化的操作，以便后续使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticDemo1</span> &#123;</span><br><span class="line">    <span class="comment">//静态代码块，属于类，优先加载一次，自动触发执行</span></span><br><span class="line">    <span class="comment">//作用，可以初始化静态资源</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====静态代码块被触发执行=====&quot;</span>);</span><br><span class="line">        name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====main方法被执行=====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 构造代码块（了解，见的少）：<br>格式：{}<br>特点：每次创建对象，调用构造器执行时，都会执行该代码块中的代码，并且在构造器执行前执行<br>使用场景：初始化实例资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StaticDemo2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造器被触发执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实例代码块,无static修饰，属于对象，每次构造对象时都会被触发执行</span></span><br><span class="line">    &#123;</span><br><span class="line">        name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;====实例代码块被执行======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StaticDemo2</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticDemo2</span>();</span><br><span class="line">        System.out.println(s1.name);</span><br><span class="line">        StaticDemo2 s2= <span class="keyword">new</span> <span class="title class_">StaticDemo2</span>();</span><br><span class="line">        System.out.println(s2.name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-静态代码块的应用案例"><a href="#4-3-静态代码块的应用案例" class="headerlink" title="4.3 静态代码块的应用案例"></a>4.3 静态代码块的应用案例</h3><p>斗地主</p><p>需求：在启动游戏房间的时候，应该提前准备好54张牌，后续才可以直接使用这些牌数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticDemo3</span> &#123;</span><br><span class="line">    <span class="comment">//private本类访问 public 全部访问 公开</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span>  ArrayList&lt;String&gt; cards = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">       <span class="comment">//正式做牌</span></span><br><span class="line">       <span class="comment">//定义一个数组存储全部参数</span></span><br><span class="line">       String[] sizes = &#123;<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;J&quot;</span>,<span class="string">&quot;Q&quot;</span>,<span class="string">&quot;K&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">       <span class="comment">//花色</span></span><br><span class="line">       String[] colors = &#123;<span class="string">&quot;♥&quot;</span>,<span class="string">&quot;♠&quot;</span>,<span class="string">&quot;♦&quot;</span>,<span class="string">&quot;♣&quot;</span>&#125;;</span><br><span class="line">       <span class="comment">//遍历点数</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;sizes.length ; i++) &#123;</span><br><span class="line">           <span class="comment">//遍历花色</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; colors.length; j++) &#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">card</span> <span class="operator">=</span> sizes[i] + colors[j];</span><br><span class="line">               cards.add(card);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//加入大小王</span></span><br><span class="line">       cards.add(<span class="string">&quot;小🃏&quot;</span>);</span><br><span class="line">       cards.add(<span class="string">&quot;大🃏&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟初始化54张牌</span></span><br><span class="line">        System.out.println(<span class="string">&quot;新牌：&quot;</span> + cards);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-静态代码块的作用是什么"><a href="#4-4-静态代码块的作用是什么" class="headerlink" title="4.4 静态代码块的作用是什么?"></a>4.4 静态代码块的作用是什么?</h3><p>如果要在启动系统时对静态资源进行初始化，则建议使用静态代码块完成数据的初始化操作。</p><h1 id="5-static应用知识：单例设计模式"><a href="#5-static应用知识：单例设计模式" class="headerlink" title="5 static应用知识：单例设计模式"></a>5 static应用知识：单例设计模式</h1><p>设计模式、单例模式介绍、</p><h3 id="5-1-饿汉单例设计模式"><a href="#5-1-饿汉单例设计模式" class="headerlink" title="5.1 饿汉单例设计模式"></a>5.1 饿汉单例设计模式</h3><p>在用类获取对象的时候，对象已经提前为你创建好了。</p><p>设计步骤：<br>定义一个类，把构造器私有。<br>定义一个静态变量存储一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> code;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">singleinstance</span> &#123;</span><br><span class="line">    <span class="comment">//使用饿汉单例</span></span><br><span class="line">    <span class="comment">//获取对象前已经准备好了</span></span><br><span class="line">    <span class="comment">//定义一个静态变量存储一个对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">singleinstance</span> <span class="variable">instance</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">singleinstance</span>() ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.私有构造器</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="title function_">singleinstance</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">singleinstance</span> <span class="variable">s1</span> <span class="operator">=</span> singleinstance.instance;</span><br><span class="line">        singleinstance s2= singleinstance.instance;</span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-饿汉单例的实现步骤"><a href="#5-2-饿汉单例的实现步骤" class="headerlink" title="5.2 饿汉单例的实现步骤?"></a>5.2 饿汉单例的实现步骤?</h3><p>定义一个类，把构造器私有。<br>定义一个静态变量存储一个对象</p><h3 id="5-3-懒汉单例模式"><a href="#5-3-懒汉单例模式" class="headerlink" title="5.3 懒汉单例模式"></a>5.3 懒汉单例模式</h3><p>在真正需要该对象的时候，才去创建一个对象(延迟加载对象)。</p><p>设计步骤：<br>定义一个类，把构造器私有。<br>定义一个静态变量存储一个对象。<br>提供一个返回单例对象的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">singleinstance2</span> &#123;</span><br><span class="line">    <span class="comment">//2.定义一个静态成员变量存储对象</span></span><br><span class="line">    <span class="comment">//私有化防止外部测试出错，</span></span><br><span class="line">    <span class="keyword">private</span>   <span class="keyword">static</span>  singleinstance2 instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供一个方法，对外返回单例对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> singleinstance2 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//第一次拿对象创造对象</span></span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">singleinstance2</span>();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.私有构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">singleinstance2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.ls.LSOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//满汉单例</span></span><br><span class="line">        <span class="type">singleinstance2</span> <span class="variable">s1</span> <span class="operator">=</span> singleinstance2.getInstance();</span><br><span class="line">        <span class="type">singleinstance2</span> <span class="variable">s2</span> <span class="operator">=</span> singleinstance2.getInstance();</span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-懒汉单例的实现步骤"><a href="#5-4-懒汉单例的实现步骤" class="headerlink" title="5.4 懒汉单例的实现步骤?"></a>5.4 懒汉单例的实现步骤?</h3><p>定义一个类，把构造器私有。<br>定义一个静态变量存储一个对象。<br>提供一个返回单例对象的方法</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 基础笔记</title>
      <link href="/posts/b6543913.html"/>
      <url>/posts/b6543913.html</url>
      
        <content type="html"><![CDATA[<p>快捷键</p><p>main+enter=</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br></pre></td></tr></table></figure><p>sout=</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br></pre></td></tr></table></figure><p>alt+enter=万能提示键</p><p>CTRL+d 复制</p><p>fori输出for语句</p><p>print横行打印</p><p>\t加空格</p><p>arr.fori数组快捷键</p><p>ctrl ait t 调用for</p><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="1-自动类型转换"><a href="#1-自动类型转换" class="headerlink" title="1.自动类型转换"></a>1.自动类型转换</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package type;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">dmo</span>&lt;<span class="title">a</span>, <span class="title">b</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">byte</span> a = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">int</span> b = a; <span class="comment">//发生了自动类型转换</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a);</span><br><span class="line">        System.<span class="keyword">out</span>.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> age = <span class="number">23</span>;</span><br><span class="line">        <span class="built_in">double</span> c = age;<span class="comment">//自动类型转换</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">char</span> ch = <span class="string">&#x27;a&#x27;</span>; <span class="comment">//0001100</span></span><br><span class="line">        <span class="built_in">int</span> code = ch;<span class="comment">//00000000 00000000 00000000 00001100</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(code);<span class="comment">//37</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要进行类型转换？ </p><p> 存在不同类型的变量赋值给其他类型的变量 </p><p>自动类型转换是什么样的？ </p><p> 类型范围小的变量，可以直接赋值给类型范围大的变量</p><h2 id="2-表达式的自动类型转换"><a href="#2-表达式的自动类型转换" class="headerlink" title="2.表达式的自动类型转换"></a>2.表达式的自动类型转换</h2><p>表达式的自动类型转换是什么样的？</p><p>  小范围的类型会自动转换成大范围的类型运算。</p><p>表达式的最终结果类型是由谁决定的？</p><p>  最终类型由表达式中的最高类型决定。 </p><p>表达式的有哪些类型转换是需要注意的？ </p><p>   byte short char是直接转换成int类型参与运算的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package type;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TypeDemo2</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">byte</span> a = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">int</span> b = <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">double</span> c = <span class="number">1.0</span>;</span><br><span class="line">        <span class="built_in">double</span> rs = a + b + c;</span><br><span class="line">        System.<span class="keyword">out</span>.println(rs); <span class="comment">// 31.0</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">double</span> rs2 = a + b - <span class="number">2.3</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(rs2);  <span class="comment">// 27.7</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//面试题</span></span><br><span class="line">        <span class="built_in">byte</span> i = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">byte</span> j = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">int</span> k = i+ j;</span><br><span class="line">        System.<span class="keyword">out</span>.println(k);<span class="comment">//为了结果保真性 200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-强制类型转换"><a href="#3-强制类型转换" class="headerlink" title="3.强制类型转换"></a>3.强制类型转换</h2><p>   类型范围大的数据或者变量，不能直接<strong>赋值</strong>给<strong>类型范围小</strong>的变量，会报错，把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量必须进行强制类型转换。</p><p>强制类型转换格式：目标数据类型 变量名 = (目标数据类型)值或者变量;</p><p>整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型；</p><p>boolean类型不能与其他基本数据类型相互转；</p><p>强制类型转换有哪些需要注意的？ </p><p>可能出现数据丢失。 小数强制转换成整数是直接截断小数保留整数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package type;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TypeDemo3</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//理解强制类型转换</span></span><br><span class="line">        <span class="built_in">int</span> a = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">byte</span> b= (<span class="built_in">byte</span>) a;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a);<span class="comment">//20</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(b);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">1500</span>;</span><br><span class="line">        <span class="built_in">byte</span> j = (<span class="built_in">byte</span>) i;</span><br><span class="line">        System.<span class="keyword">out</span>.println(j);<span class="comment">//-36</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">double</span> score = <span class="number">99.5</span>;</span><br><span class="line">        <span class="built_in">int</span> it = (<span class="built_in">int</span>) score;</span><br><span class="line">        System.<span class="keyword">out</span>.println(it);<span class="comment">//99</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">operator</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">operatorDemo1</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//掌握基本算数运算符；</span></span><br><span class="line">        <span class="built_in">int</span> a= <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">int</span> b=<span class="number">3</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a + b);<span class="comment">//13</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a - b);<span class="comment">//7</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a * b);<span class="comment">//30</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a / b);<span class="comment">//3</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a*<span class="number">1.0</span> / b);<span class="comment">//3.333333 转换为小数显示技巧</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a % b);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  /和%的区别：两个数据做除法，/取结果的商，%取结果的余数。</p><p>  整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。</p><p>数值拆分 </p><p>需求：一个三位数，将其拆分为个位、十位、百位后，打印出来</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> operatorTest2 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//需求：一个三位数，将其拆分为个位、十位、百位后，打印出来</span></span><br><span class="line">        <span class="keyword">int</span> data = <span class="number">234</span>;</span><br><span class="line">        <span class="keyword">int</span> ge = data % <span class="number">10</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(ge);<span class="comment">//4</span></span><br><span class="line">        <span class="keyword">int</span> shi = data / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(shi);<span class="comment">//3</span></span><br><span class="line">        <span class="keyword">int</span> bai = data <span class="regexp">/ 10 /</span> <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(bai);<span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公式总结：</p><p> 个位 ：数值 % 10 </p><p>十位 ：数值 / 10 % 10</p><p> 百位 ：数值 / 10 / 10 % 10 </p><p>千位 ：数值 / 10 / 10 / 10 % 10; ..</p><h2 id="字符的“-”操作"><a href="#字符的“-”操作" class="headerlink" title="字符的“+”操作"></a>字符的“+”操作</h2><p>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值：</p><p>‘a’  —  97        a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加</p><p>‘A’  —  65        A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加</p><p>‘0’  —  48        0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少</span></span><br><span class="line"><span class="type">char</span> <span class="variable">ch1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println(ch1 + <span class="number">1</span>); <span class="comment">// 输出98，97 + 1 = 98</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">ch2</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">System.out.println(ch2 + <span class="number">1</span>); <span class="comment">// 输出66，65 + 1 = 66</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">ch3</span> <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">System.out.println(ch3 + <span class="number">1</span>); <span class="comment">// 输出49，48 + 1 = 49</span></span><br></pre></td></tr></table></figure><p>byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。</p><p>整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型</p><p>除了做基本数学运算，还有哪些功能？</p><p> 与字符串做+运算时会被当成连接符，其结果还是字符串。  能算则算，不能算就在一起</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">operator</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">operatorDemo2</span>&lt;<span class="title">abc</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//符号+连接符</span></span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">5</span> ;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;abc&quot;</span> + a); <span class="comment">// abc5</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="number">5</span> + a); <span class="comment">// 10</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;abc&quot;</span> + <span class="number">5</span> + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//abc5a</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="number">15</span> + <span class="string">&quot;abc&quot;</span> + <span class="number">15</span>);<span class="comment">//abc15abc</span></span><br><span class="line">System.<span class="keyword">out</span>.println(a + <span class="string">&quot;&quot;</span> +<span class="string">&#x27;a&#x27;</span>);<span class="comment">//5a</span></span><br><span class="line">System.<span class="keyword">out</span>.println(a + <span class="string">&#x27;a&#x27;</span>+<span class="string">&quot; nanci &quot;</span>);<span class="comment">//=5+97 nanci = 102 anci</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;nanci&quot;</span>+ a + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//nanci5a</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;nanci&quot;</span>+ ( a + <span class="string">&#x27;a&#x27;</span> ));<span class="comment">//nanci102</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       </p><h2 id="赋值运算符（应用）"><a href="#赋值运算符（应用）" class="headerlink" title="赋值运算符（应用）"></a>赋值运算符（应用）</h2><p>赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</p><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=10，将10赋值给变量a</td></tr><tr><td>+=</td><td>加后赋值</td><td>a+=b，将a+b的值给a</td></tr><tr><td>-=</td><td>减后赋值</td><td>a-=b，将a-b的值给a</td></tr><tr><td>*=</td><td>乘后赋值</td><td>a*=b，将a×b的值给a</td></tr><tr><td>/=</td><td>除后赋值</td><td>a/=b，将a÷b的商给a</td></tr><tr><td>%=</td><td>取余后赋值</td><td>a%=b，将a÷b的余数给a</td></tr></tbody></table></div><p>注意：</p><p>扩展的赋值运算符隐含了强制类型转换。</p><p> 作用是什么</p><p> 基本作用是赋值</p><p>+=还可以实现数据的累加，把别人的数据加给自己</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会赋值运算符</span></span><br><span class="line">        <span class="type">int</span> a= <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">200</span>;</span><br><span class="line">        <span class="comment">//a = a + b;</span></span><br><span class="line">        a += b;<span class="comment">//a=(int)(a+b)</span></span><br><span class="line">        System.out.println(a);<span class="comment">//210</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">       <span class="comment">// i= (byte) (i+j);</span></span><br><span class="line">        i +=j;</span><br><span class="line">        System.out.println(i);<span class="comment">//30</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> m=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">3</span>;</span><br><span class="line">       <span class="comment">// m += n;//等价于m=(int)m+n;</span></span><br><span class="line">       <span class="comment">// m -= n;//等价于m=(int)m-n;</span></span><br><span class="line">       <span class="comment">// m *= n;//等价于m=(int)m*n;</span></span><br><span class="line">       <span class="comment">// m /= n;//等价于m=(int)m/n;</span></span><br><span class="line">        m %= n;<span class="comment">//等价于m=(int)m%n;</span></span><br><span class="line">        System.out.println(m);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>自增</td><td>变量的值加1</td></tr><tr><td>—</td><td>自减</td><td>变量的值减1</td></tr></tbody></table></div><p>注意事项：</p><p>​    ++和— 既可以放在变量的后边，也可以放在变量的前边。</p><p>​    单独使用的时候， ++和— 无论是放在变量的前边还是后边，结果是一样的。</p><p>​    参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者—。</p><p>​    参与操作的时候，如果放在变量的前边，先拿变量做++或者—，后拿变量参与操作。</p><p>​    最常见的用法：单独使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会自增自减运算符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        i++; <span class="comment">// 单独使用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i:&quot;</span> + i); <span class="comment">// i:11</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        ++j; <span class="comment">// 单独使用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;j:&quot;</span> + j); <span class="comment">// j:11</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x++; <span class="comment">// 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;x:&quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y); <span class="comment">// x:11，y:10</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ++m; <span class="comment">// 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m:&quot;</span> + m + <span class="string">&quot;, m:&quot;</span> + m); <span class="comment">// m:11，m:11</span></span><br><span class="line">        <span class="comment">//面试题</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rs3</span> <span class="operator">=</span> c++ + ++c - --d - ++d + <span class="number">1</span> + c--;</span><br><span class="line">        <span class="comment">//c 10 11 12 11</span></span><br><span class="line">        <span class="comment">//d 5 4 5</span></span><br><span class="line">        <span class="comment">//rs3 =10 + 12 - 4 - 5 + 1 + 12=26</span></span><br><span class="line">        System.out.println(c);<span class="comment">//11</span></span><br><span class="line">        System.out.println(d);<span class="comment">//5</span></span><br><span class="line">        System.out.println(rs3);<span class="comment">//26</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自增、自减运算符是什么，有什么作用？ </p><p>++、—。对当前变量值+1、-1 </p><p> 自增、自减运算符在变量前后有区别吗？</p><p> 如果单独使用放前后是没有区别的。</p><p> 非单独使用：在变量前 ，先进行变量自增/自减，再使用变量。 </p><p> 非单独使用：在变量后 ，先使用变量，再进行变量自增/自减</p><h2 id="关系运算符（应用）"><a href="#关系运算符（应用）" class="headerlink" title="关系运算符（应用）"></a>关系运算符（应用）</h2><p>关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。</p><div class="table-container"><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td>!=</td><td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td></tr><tr><td>&gt;</td><td>a&gt;b，判断a是否大于b，成立为true，不成立为false</td></tr><tr><td>&gt;=</td><td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td>&lt;</td><td>a&lt;b，判断a是否小于b，成立为true，不成立为false</td></tr><tr><td>&lt;=</td><td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table></div><p>​    关系运算符的结果都是boolean类型，要么是true，要么是false。</p><p>​    千万不要把“==”误写成“=”，”==”是判断是否相等的关系，”=”是赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。</p><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与</td><td>a&amp;b，a和b都是true，结果为true，否则为false</td></tr><tr><td>\</td><td></td><td>逻辑或</td><td>a\</td><td>b，a和b都是false，结果为false，否则为true</td></tr><tr><td>^</td><td>逻辑异或</td><td>a^b，a和b结果不同为true，相同为false</td></tr><tr><td>!</td><td>逻辑非</td><td>!a，结果和a的结果正好相反</td></tr></tbody></table></div><h2 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h2><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>短路与</td><td>作用和&amp;相同，但是有短路效果</td></tr><tr><td>\</td><td>\</td><td></td><td>短路或</td><td>作用和\</td><td>相同，但是有短路效果</td></tr></tbody></table></div><ul><li><p>逻辑与&amp;，无论左边真假，右边都要执行。</p></li><li><p>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。</p></li><li><p>逻辑或|，无论左边真假，右边都要执行。</p></li><li><p>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</p></li></ul><p>逻辑运算符有哪些，有什么特点？</p><p>⚫ 逻辑与“&amp;” ：有一个为false、结果是false </p><p>⚫ 短路与&amp;&amp;： 一个为false、结果是false。前一个为false,后一个条件不执行了 </p><p>⚫ 逻辑或“|”：有一个为true、结果是true </p><p>⚫ 短路或||：一个为true、结果是true。前一个为true，后一个条件不执行了 </p><p>⚫ 逻辑非“!”：!false=true、 !true=false </p><p>⚫ 逻辑异或“^” ：相同是false、不同是true。 </p><p>⚫ 注意：实际开发中、常用的逻辑运算符还是：&amp;&amp; 、 || 、 ！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会使用逻辑运算符</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">9.8</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">storage</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">        <span class="comment">//尺寸大于6.9；内存大于8；</span></span><br><span class="line">        <span class="comment">//逻辑&amp;前后都为真才为真</span></span><br><span class="line">        System.out.println(size &gt;= <span class="number">6.95</span> &amp; storage &gt;=<span class="number">8</span>);<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//尺寸大于6.9；内存大于8；</span></span><br><span class="line">        <span class="comment">//逻辑或前后都为真才为真</span></span><br><span class="line">        System.out.println(size &gt;= <span class="number">6.95</span> | storage &gt;=<span class="number">8</span>);<span class="comment">//ture</span></span><br><span class="line">        <span class="comment">//取反</span></span><br><span class="line"></span><br><span class="line">       System.out.println(!ture);<span class="comment">//false</span></span><br><span class="line">       System.out.println(!faluse);<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//异或两个不同为真</span></span><br><span class="line">       System.out.println(ture ^ ture);<span class="comment">//false</span></span><br><span class="line">       System.out.println(<span class="literal">false</span> ^ <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">        System.out.println(ture ^ <span class="literal">false</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(<span class="literal">false</span> ^ ture);<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//短路与</span></span><br><span class="line">        <span class="comment">//短路或；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">20</span>;</span><br><span class="line">        System.out.println(a &gt; <span class="number">100</span> &amp;&amp; ++b&gt;<span class="number">10</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(b);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        System.out.println(a &gt; <span class="number">100</span> &amp; ++b&gt;<span class="number">10</span>);<span class="comment">//false</span></span><br><span class="line">        System.out.println(b);<span class="comment">//21</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        System.out.println(i &gt;<span class="number">2</span> || ++j &gt; <span class="number">10</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(j);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i &gt;<span class="number">2</span> | ++j &gt; <span class="number">10</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(j);<span class="comment">//21</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>三元运算符语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关系表达式 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会三元运算符</span></span><br><span class="line">       <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">98</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> score &gt;=<span class="number">60</span> ? <span class="string">&quot;考试通过&quot;</span>:<span class="string">&quot;挂科&quot;</span>;</span><br><span class="line">        System.out.println(rs);<span class="comment">//考试通过</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从两个数找出较大值；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> a&gt;b ? a:b;</span><br><span class="line">        System.out.println(max);<span class="comment">//100</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//求三个整数最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span><span class="number">30</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i &gt; j ? i:j;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rsmax</span> <span class="operator">=</span> temp &gt; k ? temp : k;</span><br><span class="line">        System.out.println(rsmax);<span class="comment">//30</span></span><br><span class="line">        <span class="comment">//三元嵌套</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rsmax2</span> <span class="operator">=</span> i &gt; j ? (i &gt; k ? i : k):(j &gt; k ? j : k);</span><br><span class="line">        System.out.println(rsmax2);<span class="comment">//30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>⚫ 在表达式中，哪个运算符先执行后执行是要看优先级的，例如 “*、/” 的优先级高于”+、-”</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">operator</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">operatorDemo7</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="number">10</span> &gt; <span class="number">3</span> || <span class="number">10</span> &gt; <span class="number">3</span> &amp;&amp; <span class="number">10</span> &lt; <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line">        System.<span class="keyword">out</span>.println( (<span class="number">10</span> &gt; <span class="number">3</span> || <span class="number">10</span> &gt; <span class="number">3</span> ) &amp;&amp; <span class="number">10</span> &lt; <span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="键盘录入"><a href="#键盘录入" class="headerlink" title="键盘录入"></a>键盘录入</h2><p>请完成Java程序与用户交互，比如录入用户输入的名称、年龄，怎么办？。</p><p>API （Application Programming Interface,应用程序编程接口） ⚫ Java写好的程序(功能代码)，咱们可以直接调用。 ⚫ Oracle 也为Java写好的程序提供了相应的 API文档(技术使用说明书) 。</p><p>下载API文档： <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;//<span class="number">1.</span>导包</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ScannerDemo &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">     Scanner sc = <span class="built_in">new</span> Scanner(<span class="keyword">System</span>.<span class="keyword">in</span>);//得到键盘扫描对象</span><br><span class="line">    //调用对象功能等待接受</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;请输入您的年龄: &quot;);</span><br><span class="line">     <span class="type">int</span> age = sc.nextInt() ;</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;您的你年龄是: &quot;+age);</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;请输入您的名字: &quot;);</span><br><span class="line">     String <span class="type">name</span> = sc.next() ;</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;欢迎: &quot;+<span class="type">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请输入您的年龄:<br>120<br>您的你年龄是: 120<br>请输入您的名字:<br>姚江<br>欢迎: 姚江</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 包</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-包"><a href="#1-包" class="headerlink" title="1. 包"></a>1. 包</h1><h2 id="1-1-什么是包？"><a href="#1-1-什么是包？" class="headerlink" title="1.1 什么是包？"></a>1.1 什么是包？</h2><p>包是用来分门别类的管理各种不同类的，类似于文件夹、建包利于程序的管理和维护。<br>建包的语法格式：package 公司域名倒写.技术名称。报名建议全部英文小写，且具备意义</p><p>建包语句必须在第一行，一般IDEA工具会帮助创建</p><h2 id="1-2-导包"><a href="#1-2-导包" class="headerlink" title="1.2 导包"></a>1.2 导包</h2><p>相同包下的类可以直接访问，不同包下的类必须导包,才可以使用！导包格式：import 包名.类名;<br>假如一个类中需要用到不同类，而这个两个类的名称是一样的，那么默认只能导入一个类，另一个类要带包名访问。</p><h1 id="2-权限修饰符"><a href="#2-权限修饰符" class="headerlink" title="2. 权限修饰符"></a>2. 权限修饰符</h1><h2 id="2-1-什么是权限修饰符？"><a href="#2-1-什么是权限修饰符？" class="headerlink" title="2.1 什么是权限修饰符？"></a>2.1 <strong>什么是权限修饰符？</strong></h2><p>权限修饰符：是用来控制一个成员能够被访问的范围。</p><p>可以修饰成员变量，方法，构造器，内部类，不同权限修饰符修饰的成员能够被访问的范围将受到限制。</p><h2 id="2-2-权限修饰符的分类和具体作用范围："><a href="#2-2-权限修饰符的分类和具体作用范围：" class="headerlink" title="2.2 权限修饰符的分类和具体作用范围："></a>2.2 权限修饰符的分类和具体作用范围：</h2><p>权限修饰符：有四种作用范围由小到大（private -&gt; 缺省 -&gt; protected - &gt; public ）</p><div class="table-container"><table><thead><tr><th><strong>修饰符</strong></th><th><strong>同一 个类中</strong></th><th><strong>同一个包中</strong>  <strong>其他类</strong></th><th><strong>不同包下的</strong>  <strong>子类</strong></th><th><strong>不同包下的</strong>  <strong>无关类</strong></th></tr></thead><tbody><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr><tr><td>缺省</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table></div><h2 id="2-3-学完权限修饰符需要具备如下能力"><a href="#2-3-学完权限修饰符需要具备如下能力" class="headerlink" title="2.3 学完权限修饰符需要具备如下能力"></a>2.3 学完权限修饰符需要具备如下能力</h2><p>能够识别别人定义的成员的访问范围。<br>自己定义成员（方法，成员变量，构造器等）一般需要满足如下要求：<br>成员变量一般私有。<br>方法一般公开。<br>如果该成员只希望本类访问，使用private修饰。<br>如果该成员只希望本类，同一个包下的其他类和子类访问，使用protected修饰。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> modifer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fu</span> &#123;</span><br><span class="line">    <span class="comment">//1.private</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.缺省</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Method</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.protected</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">protectedMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;protected&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.public</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publicMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;public&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">fu</span>();</span><br><span class="line">        f.Method();;</span><br><span class="line">        f.privateMethod();</span><br><span class="line">        f.publicMethod();</span><br><span class="line">        f.protectedMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> modifer.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> modifer.fu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">zi</span> <span class="keyword">extends</span>  <span class="title class_">fu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">zi</span> <span class="variable">z</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">zi</span>();</span><br><span class="line">        z.protectedMethod();</span><br><span class="line">        z.publicMethod();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> modifer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//权限修饰符作用范围</span></span><br><span class="line">        <span class="type">fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">fu</span>();</span><br><span class="line">        f.Method();</span><br><span class="line">        f.protectedMethod();</span><br><span class="line">        f.publicMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> modifer.itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> modifer.fu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">fu</span>();</span><br><span class="line">        f.publicMethod();</span><br><span class="line">        <span class="comment">//  f.Method();报错</span></span><br><span class="line">        <span class="comment">//f.protectedMethod();报错</span></span><br><span class="line">        <span class="comment">// f.privateMethod();报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-final"><a href="#3-final" class="headerlink" title="3. final"></a>3. final</h1><h2 id="3-1-final的作用"><a href="#3-1-final的作用" class="headerlink" title="3.1 final的作用"></a>3.1 final的作用</h2><p>final 关键字是最终的意思，可以修饰（类、方法、变量）<br>修饰类：表明该类是最终类，不能被继承。<br>修饰方法：表明该方法是最终方法，不能被重写。<br>修饰变量：表示该变量第一次赋值后，不能再次被赋值(有且仅能被赋值一次)</p><h2 id="3-2-final修饰变量的注意"><a href="#3-2-final修饰变量的注意" class="headerlink" title="3.2 final修饰变量的注意"></a>3.2 final修饰变量的注意</h2><p>final修饰的变量是基本类型：那么变量存储的数据值不能发生改变。<br>final修饰的变量是引用类型：那么变量存储的地址值不能发生改变，但是地址指向的对象内容是可以发生变化的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d3_final;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//记住final语法</span></span><br><span class="line">    <span class="comment">//final 关键字是最终的意思，可以修饰（类、方法、变量）</span></span><br><span class="line">    <span class="comment">//修饰类：表明该类是最终类，不能被继承。</span></span><br><span class="line">    <span class="comment">//修饰方法：表明该方法是最终方法，不能被重写。</span></span><br><span class="line">    <span class="comment">//修饰变量：表示该变量第一次赋值后，不能再次被赋值(有且仅能被赋值一次)。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span>  <span class="title class_">People</span>&#123;</span><br><span class="line"> <span class="comment">//   @Override</span></span><br><span class="line"> <span class="comment">//   public   void eat()&#123;</span></span><br><span class="line">  <span class="comment">//      System.out.println(&quot;学生吃的多&quot;);</span></span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class wolf extends Animal&#123;&#125;</span></span><br><span class="line"><span class="comment">//final  class  Animal&#123;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d3_final;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="comment">// 2.成员变量（实例成员变量和静态成员变量）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">school</span> <span class="operator">=</span> <span class="string">&quot;外事&quot;</span>;</span><br><span class="line">    <span class="comment">//实例成员变量和静态成员变量</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;小明&quot;</span>;<span class="comment">//几乎不用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//理解final修饰变量</span></span><br><span class="line">        <span class="comment">//1.局部变量</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">double</span> <span class="variable">rate</span> <span class="operator">=</span> <span class="number">3.12</span>;</span><br><span class="line">       <span class="comment">// school =&quot;西安&quot;; 二次赋值</span></span><br><span class="line">        <span class="comment">//rate = 2.33;//二次赋值不行</span></span><br><span class="line">        <span class="type">Test2</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test2</span>();</span><br><span class="line">        System.out.println(t.name);</span><br><span class="line">        <span class="comment">//t.name = &quot;张三&quot;; 不能二次赋值</span></span><br><span class="line">        <span class="comment">//重点： final 引用类型地址不可以改变 指向对象内容可以改变</span></span><br><span class="line">    <span class="keyword">final</span>    <span class="type">Teacher</span> <span class="variable">T</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;学习，上课，吃饭&quot;</span>);</span><br><span class="line">    <span class="comment">//T2 = null;</span></span><br><span class="line">        System.out.println(T.getHobby());</span><br><span class="line">        T.setHobby(<span class="string">&quot;运动&quot;</span>);</span><br><span class="line">        System.out.println(T.getHobby());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Teacher</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String hobby)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHobby</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobby</span><span class="params">(String hobby)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-常量"><a href="#4-常量" class="headerlink" title="4 常量"></a>4 常量</h1><p>常量是使用了public static final修饰的成员变量，必须有初始化值，而且执行的过程中其值不能被改变。<br>常量名的命名规范：英文单词全部大写，多个单词下划线连接起来。<br>常量的作用：通常用来记录系统的配置数据。</p><h2 id="4-1-常量做信息配置的原理、优势"><a href="#4-1-常量做信息配置的原理、优势" class="headerlink" title="4.1 常量做信息配置的原理、优势"></a>4.1 常量做信息配置的原理、优势</h2><p>在编译阶段会进行“宏替换”：把使用常量的地方全部替换成真实的字面量。<br>维护系统容易，可读性更好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d4_constant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SCHOOL_NAME</span> <span class="operator">=</span> <span class="string">&quot;外事学院&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UESR_NAME</span> <span class="operator">=</span> <span class="string">&quot;外事学院&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">final</span> String PASS_WORD= <span class="string">&quot;外事学院&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(SCHOOL_NAME);</span><br><span class="line">        System.out.println(SCHOOL_NAME);</span><br><span class="line">        System.out.println(SCHOOL_NAME);</span><br><span class="line">        System.out.println(SCHOOL_NAME);</span><br><span class="line">        <span class="keyword">if</span>(UESR_NAME.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-案例说明：超级玛丽游戏"><a href="#4-2-案例说明：超级玛丽游戏" class="headerlink" title="4.2 案例说明：超级玛丽游戏"></a>4.2 案例说明：超级玛丽游戏</h2><p>现在开发的超级玛丽游戏需要接收用户输入的四个方向的信号（上下左右），以便控制玛丽移动的方向。</p><p>选择常量做信息标志和分类：<br>代码可读性好，实现了软编码形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d4_constant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constant</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     常量类：配置类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UP</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DOWN</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LEFT</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RIGHT</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d4_constant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 目标：理解常量的另外一个作用：做信息的标志和分类。</span></span><br><span class="line">            <span class="comment">// 模拟：控制玛丽的移动：上下左右。</span></span><br><span class="line">            <span class="comment">// 桌面编程</span></span><br><span class="line">            <span class="comment">// 1、创建窗口</span></span><br><span class="line">            <span class="type">JFrame</span> <span class="variable">win</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;超级玛丽&quot;</span>);</span><br><span class="line">            win.setSize(<span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2、设计一个面板（桌布）</span></span><br><span class="line">            <span class="type">JPanel</span> <span class="variable">jPanel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">            win.add(jPanel);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2、放置几个按钮</span></span><br><span class="line">            <span class="type">JButton</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;上&quot;</span>);</span><br><span class="line">            jPanel.add(b1);</span><br><span class="line">            b1.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                    <span class="comment">// 控制玛丽往上跳</span></span><br><span class="line">                    move(Constant.UP);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="type">JButton</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;下&quot;</span>);</span><br><span class="line">            jPanel.add(b2);</span><br><span class="line">            b2.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                    <span class="comment">// 控制玛丽往下蹲</span></span><br><span class="line">                    move(Constant.DOWN);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="type">JButton</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;左&quot;</span>);</span><br><span class="line">            jPanel.add(b3);</span><br><span class="line">            b3.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                    <span class="comment">// 控制玛丽往左走</span></span><br><span class="line">                    move(Constant.LEFT);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="type">JButton</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;右&quot;</span>);</span><br><span class="line">            jPanel.add(b4);</span><br><span class="line">                    b4.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                            <span class="comment">// 控制玛丽往右走</span></span><br><span class="line">                    move(Constant.RIGHT);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            win.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">            win.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">            win.setVisible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> orientation)</span>&#123;</span><br><span class="line">            <span class="comment">// 控制玛丽移动</span></span><br><span class="line">            <span class="keyword">switch</span> (orientation) &#123;</span><br><span class="line">                <span class="keyword">case</span> Constant.UP:</span><br><span class="line">                    System.out.println(<span class="string">&quot;玛丽往↑飞了一下~~&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Constant.DOWN:</span><br><span class="line">                    System.out.println(<span class="string">&quot;玛丽往↓蹲了一下~~&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Constant.LEFT:</span><br><span class="line">                    System.out.println(<span class="string">&quot;玛丽往←跑了一下~~&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> Constant.RIGHT:</span><br><span class="line">                    System.out.println(<span class="string">&quot;玛丽往→跑了一下~~&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="5-枚举"><a href="#5-枚举" class="headerlink" title="5 枚举"></a>5 枚举</h1><h2 id="5-1枚举的概述"><a href="#5-1枚举的概述" class="headerlink" title="5.1枚举的概述"></a>5.1枚举的概述</h2><p>枚举是Java中的一种特殊类型<br>枚举的作用：”是为了做信息的标志和信息的分类”。<br>定义枚举类的格式：enum Season{   SPRING , SUMMER , AUTUMN , WINTER;}</p><h2 id="5-2-枚举特征："><a href="#5-2-枚举特征：" class="headerlink" title="5.2 枚举特征："></a>5.2 枚举特征：</h2><p>枚举类都是继承了枚举类型：java.lang.Enum<br>枚举都是最终类，不可以被继承。<br>构造器都是私有的，枚举对外不能创建对象。<br>枚举类的第一行默认都是罗列枚举对象的名称的。<br>枚举类相当于是多例模式。</p><h1 id="6-抽象类"><a href="#6-抽象类" class="headerlink" title="6 抽象类"></a>6 抽象类</h1><h2 id="6-1-抽象的使用场景"><a href="#6-1-抽象的使用场景" class="headerlink" title="6.1 抽象的使用场景"></a>6.1 抽象的使用场景</h2><p>抽象类可以理解成不完整的设计图，一般作为父类，让子类来继承。<br>当父类知道子类一定要完成某些行为，但是每个子类该行为的实现又不同，于是该父类就把该行为定义成抽象方法的形式，具体实现交给子类去完成。此时这个类就可以声明成抽象类。</p><h2 id="6-2-抽象类、抽象方法是什么样的？"><a href="#6-2-抽象类、抽象方法是什么样的？" class="headerlink" title="6.2 抽象类、抽象方法是什么样的？"></a>6.2 抽象类、抽象方法是什么样的？</h2><p>都是用abstract修饰的；抽象方法只有方法签名，不能写方法体。<br>一个类中定义了抽象方法，这个类必须声明成抽象类。</p><h2 id="6-3抽象类基本作用是啥？"><a href="#6-3抽象类基本作用是啥？" class="headerlink" title="6.3抽象类基本作用是啥？"></a>6.3抽象类基本作用是啥？</h2><p>作为父类，用来被继承的。</p><h2 id="6-4-继承抽象类有哪些要注意？"><a href="#6-4-继承抽象类有哪些要注意？" class="headerlink" title="6.4 继承抽象类有哪些要注意？"></a>6.4 继承抽象类有哪些要注意？</h2><p>一个类如果继承了抽象类，那么这个类必须重写完抽象类的全部抽象方法，否则这个类也必须定义成抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d5_abstract;</span><br><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span>  <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">//抽象方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d5_abstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span>  <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗跑的快&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d5_abstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//认识抽象类</span></span><br><span class="line">        <span class="comment">//父类就把该行为定义成抽象方法的形式，具体实现交给子类去完成。此时这个类就可以声明成抽象类</span></span><br><span class="line">        Dog D= <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        D.run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-系统需求-加油站"><a href="#6-4-系统需求-加油站" class="headerlink" title="6.4 系统需求 加油站"></a>6.4 系统需求 加油站</h2><p>某加油站推出了2种支付卡，一种是预存10000的金卡，后续加油享受8折优惠，另一种是预存5000的银卡 ,后续加油享受8.5折优惠。<br>请分别实现2种卡片进入收银系统后的逻辑，卡片需要包含主人名称，余额，支付功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d7_abstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Card</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String  username;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">double</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义支付方法</span></span><br><span class="line">    <span class="comment">//抽象方法不能给方法体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> money)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(<span class="type">double</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d7_abstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoldCard</span>  <span class="keyword">extends</span>  <span class="title class_">Card</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">double</span> money)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您当前消费： &quot;</span>+ money);</span><br><span class="line">        System.out.println(<span class="string">&quot;您当前消费余额 &quot;</span>+ getMoney());</span><br><span class="line">        <span class="type">double</span> <span class="variable">rs</span> <span class="operator">=</span> money*<span class="number">0.8</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;您实际支付： &quot;</span>+rs);</span><br><span class="line">        setMoney(getMoney() - rs);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d7_abstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GoldCard</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GoldCard</span>();</span><br><span class="line">        c.setMoney(<span class="number">10000</span>);</span><br><span class="line">        c.setUsername(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        c.pay(<span class="number">300</span>);</span><br><span class="line">        System.out.println(c.getUsername()+<span class="string">&quot;账户剩余余额：&quot;</span>+c.getMoney());</span><br><span class="line">        <span class="comment">//您当前消费： 300.0</span></span><br><span class="line">        <span class="comment">//您当前消费余额 10000.0</span></span><br><span class="line">        <span class="comment">//您实际支付： 240.0</span></span><br><span class="line">        <span class="comment">//张三账户剩余余额：9760.0</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-5-特征和注意事项"><a href="#6-5-特征和注意事项" class="headerlink" title="6.5 特征和注意事项"></a>6.5 特征和注意事项</h2><p>类有的成员（成员变量、方法、构造器）抽象类都具备<br>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类<br>一个类继承了抽象类必须重写完抽象类的全部抽象方法，否则这个类也必须定义成抽象类。<br>不能用abstract修饰变量、代码块、构造器。<br>最重要的特征：得到了抽象方法，失去了创建对象的能力（有得有失）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d8_abstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//类有的成员（成员变量、方法、构造器）抽象类都具备</span></span><br><span class="line">        <span class="comment">//抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</span></span><br><span class="line">        <span class="comment">//一个类继承了抽象类必须重写完抽象类的全部抽象方法，否则这个类也必须定义成抽象类。</span></span><br><span class="line">        <span class="comment">//不能用abstract修饰变量、代码块、构造器。</span></span><br><span class="line">        <span class="comment">//最重要的特征：得到了抽象方法，失去了创建对象的能力（有得有失）</span></span><br><span class="line">        <span class="comment">//原因 ： 反证法 加入抽象类可以创造对象</span></span><br><span class="line">        <span class="comment">//Animal a = new Animal();</span></span><br><span class="line">        <span class="comment">//a.run();//run方法都没有方法体</span></span><br><span class="line">      <span class="comment">//  Card c= new Card();//抽象方法不允许创造对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span>  <span class="keyword">class</span> <span class="title class_">Card</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cat</span> <span class="keyword">extends</span>  <span class="title class_">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-7-final和abstract是什么关系？面试题"><a href="#6-7-final和abstract是什么关系？面试题" class="headerlink" title="6.7 final和abstract是什么关系？面试题"></a>6.7 final和abstract是什么关系？面试题</h2><p>互斥关系<br>abstract定义的抽象类作为模板让子类继承，final定义的类不能被继承。<br>抽象方法定义通用功能让子类重写，final定义的方法子类不能重写。</p><h1 id="7-模板方法模式"><a href="#7-模板方法模式" class="headerlink" title="7 模板方法模式"></a>7 模板方法模式</h1><h2 id="7-1-理解模板方法：写作文案例"><a href="#7-1-理解模板方法：写作文案例" class="headerlink" title="7.1 理解模板方法：写作文案例"></a>7.1 理解模板方法：写作文案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d9_abstract;</span><br><span class="line"><span class="comment">//模板方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">final</span>  <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\t《我的爸爸》&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;我的爸爸啥样&quot;</span>);</span><br><span class="line">        <span class="comment">//正文部分</span></span><br><span class="line">        <span class="comment">//把正文部分定义成抽象方法交给子类完成</span></span><br><span class="line">        System.out.println(WriteMain());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;我的爸爸太好了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">abstract</span> String <span class="title function_">WriteMain</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d9_abstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentChild</span> <span class="keyword">extends</span>  <span class="title class_">Student</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">WriteMain</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我的爸爸太牛了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d9_abstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentMiddle</span> <span class="keyword">extends</span>  <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">WriteMain</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我的爸爸会飞&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-模板方法模式解决了什么问题？"><a href="#7-2-模板方法模式解决了什么问题？" class="headerlink" title="7.2 模板方法模式解决了什么问题？"></a>7.2 模板方法模式解决了什么问题？</h2><p> 提高了代码的复用性<br> 模板方法已经定义了通用结构，模板方法不能确定的部分定义成抽象方法，交给子类实现，因此，使用者只需要关心自己需要实现的功能即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d9_abstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StudentMiddle</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentMiddle</span>();</span><br><span class="line">        s.write();</span><br><span class="line">        <span class="type">StudentChild</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentChild</span>();</span><br><span class="line">        s2.write();</span><br><span class="line">        <span class="comment">// 《我的爸爸》</span></span><br><span class="line">        <span class="comment">//我的爸爸啥样</span></span><br><span class="line">        <span class="comment">//我的爸爸会飞</span></span><br><span class="line">        <span class="comment">//我的爸爸太好了</span></span><br><span class="line">        <span class="comment">// 《我的爸爸》</span></span><br><span class="line">        <span class="comment">//我的爸爸啥样</span></span><br><span class="line">        <span class="comment">//我的爸爸太牛了</span></span><br><span class="line">        <span class="comment">//我的爸爸太好了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-接口"><a href="#8-接口" class="headerlink" title="8 接口"></a>8 接口</h1><h2 id="8-1-接口是一种规范-规范一定是公开的"><a href="#8-1-接口是一种规范-规范一定是公开的" class="headerlink" title="8.1 接口是一种规范 规范一定是公开的"></a>8.1 接口是一种规范 规范一定是公开的</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d10_interface;</span><br><span class="line"><span class="comment">//声明了一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="comment">//1.常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span> String SCHOOL_NAME= <span class="string">&quot;外事&quot;</span>;</span><br><span class="line">    <span class="comment">//2.抽象方法</span></span><br><span class="line">    <span class="comment">//接口是公开的，所以public static 可以不写</span></span><br><span class="line">     <span class="keyword">void</span>  <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">// public  abstract  void  run();</span></span><br><span class="line">  <span class="keyword">void</span>  <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">  <span class="comment">//  public  abstract  void  eat();</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-2-类和接口多实现"><a href="#8-2-类和接口多实现" class="headerlink" title="8.2 类和接口多实现"></a>8.2 类和接口多实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d11_implements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//被类实现</span></span><br><span class="line">        <span class="type">PingPongMan</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PingPongMan</span>(<span class="string">&quot;张继科&quot;</span>);</span><br><span class="line">        p.run();</span><br><span class="line">        p.competition();</span><br><span class="line">        p.rule();</span><br><span class="line">        <span class="comment">//张继科必须跑步</span></span><br><span class="line">        <span class="comment">//张继科必须比赛</span></span><br><span class="line">        <span class="comment">//张继科必须守法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d11_implements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="keyword">void</span>  <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span>  <span class="title function_">competition</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d11_implements;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PingPongMan</span> <span class="keyword">implements</span>  <span class="title class_">SportMan</span>,Law &#123;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PingPongMan</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name +<span class="string">&quot;必须跑步&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">competition</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;必须比赛&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;必须守法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d11_implements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//被类实现</span></span><br><span class="line">        <span class="type">PingPongMan</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PingPongMan</span>(<span class="string">&quot;张继科&quot;</span>);</span><br><span class="line">        p.run();</span><br><span class="line">        p.competition();</span><br><span class="line">        p.rule();</span><br><span class="line">        <span class="comment">//张继科必须跑步</span></span><br><span class="line">        <span class="comment">//张继科必须比赛</span></span><br><span class="line">        <span class="comment">//张继科必须守法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-接口的基本使用"><a href="#8-3-接口的基本使用" class="headerlink" title="8.3 接口的基本使用"></a>8.3 接口的基本使用</h2><p>接口是用来被实现的，实现接口的类型称为实现类</p><p>类和类单继承；</p><p>接口和接口多继承</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d12_exends;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Law</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d12_exends;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d12_exends;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> <span class="keyword">extends</span> <span class="title class_">Law</span>,People&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">heh</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d12_exends;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ball</span> <span class="keyword">implements</span> <span class="title class_">Law</span>,People,SportMan &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">heh</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-4-JDK8开始接口新增方法-开发一般不用"><a href="#8-4-JDK8开始接口新增方法-开发一般不用" class="headerlink" title="8.4 JDK8开始接口新增方法 开发一般不用"></a>8.4 JDK8开始接口新增方法 开发一般不用</h2><p>接口不能创造对象</p><p>一个类实现多个接口，多个接口有同样的静态方法不冲突；</p><p>一个类继承了父类，同时又实现了接口，父类中的接口有同名的方法，默认用父类的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> d13_inface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMainter</span> &#123;</span><br><span class="line">    <span class="comment">//1.默认方法</span></span><br><span class="line">    <span class="comment">//接口不能创造对象，过继给了实现类，实现类对象才可以调用</span></span><br><span class="line">   <span class="keyword">default</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">       go();</span><br><span class="line">       System.out.println(<span class="string">&quot;跑得快&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.静态方法 static修饰</span></span><br><span class="line">    <span class="comment">//必须接口名自己调用</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title function_">inAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;今天下雨了&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.私有方法</span></span><br><span class="line">        <span class="comment">//接口内部使用 必须自己调用</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">go</span> <span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;跑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PingPong</span> <span class="keyword">implements</span>  <span class="title class_">SportMainter</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PingPong</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PingPong</span>();</span><br><span class="line">        p.run();</span><br><span class="line"></span><br><span class="line">        SportMainter.inAdd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Jva Set系列集合</title>
      <link href="/posts/176c3e6e.html"/>
      <url>/posts/176c3e6e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Set系列集合"><a href="#Set系列集合" class="headerlink" title="Set系列集合"></a>Set系列集合</h1><p>Set系列集系概述</p><p>Set系列集合的特点。<br>无序、不重复、无索引。<br>Set集合的实现类特点。<br>HashSet无序、不重复、无索引。<br>LinkedHashSet 有序、不重复、无索引。<br>TreeSet 可排序、不重复、无索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">setDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//看看set集合体系的特点</span></span><br><span class="line">        Set&lt;String&gt; sets = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();<span class="comment">//一行经典代码</span></span><br><span class="line">        <span class="comment">//无序不重复</span></span><br><span class="line">        sets.add( <span class="string">&quot;Java&quot;</span> );</span><br><span class="line">        sets.add( <span class="string">&quot;Java&quot;</span> );</span><br><span class="line">        sets.add( <span class="string">&quot;Html&quot;</span> );</span><br><span class="line">        sets.add( <span class="string">&quot;Spring&quot;</span> );</span><br><span class="line">        System.out.println( sets );</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(  );<span class="comment">//一行经典代码</span></span><br><span class="line">        <span class="comment">//有序、不重复、无索引</span></span><br><span class="line">        set.add( <span class="string">&quot;Java&quot;</span> );</span><br><span class="line">        set.add( <span class="string">&quot;Java&quot;</span> );</span><br><span class="line">        set.add( <span class="string">&quot;Html&quot;</span> );</span><br><span class="line">        set.add( <span class="string">&quot;Spring&quot;</span> );</span><br><span class="line">        System.out.println( sets );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：HashSet集合元素无序的底层原理：哈希表</p><p>哈希表的组成<br>JDK8之前的，底层使用数组+链表组成<br>JDK8开始后，底层采用数组+链表+红黑树组成。</p><p>哈希值：是JDK根据对象的地址，按照某种规则算出来的int类型的数值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;南辞&quot;</span>;</span><br><span class="line">        System.out.println( name.hashCode() );</span><br><span class="line">        System.out.println( name.hashCode() );</span><br><span class="line">        <span class="type">String</span> <span class="variable">name1</span> <span class="operator">=</span> <span class="string">&quot;南辞&quot;</span>;</span><br><span class="line">        System.out.println( name1.hashCode() );</span><br><span class="line">        System.out.println( name1.hashCode() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashSet1.7版本原理解析：数组 + 链表  +（结合哈希算法）</p><p>创建一个默认长度16的数组，数组名table<br>根据元素的哈希值跟数组的长度求余计算出应存入的位置（哈希算法）<br>判断当前位置是否为null，如果是null直接存入<br>如果位置不为null，表示有元素，则调用equals方法比较<br>如果一样，则不存，如果不一样，则存入数组<br>JDK 7新元素占老元素位置，指向老元素<br>JDK 8中新元素挂在老元素下面</p><p>实现类：HashSet集合元素去重复的底层原理</p><p>实现类：LinkedHashSet</p><p>实现类：TreeSet</p><h1 id="Collection体系的特点、使用场景总结"><a href="#Collection体系的特点、使用场景总结" class="headerlink" title="Collection体系的特点、使用场景总结"></a>Collection体系的特点、使用场景总结</h1><h1 id="补充知识：可变参数"><a href="#补充知识：可变参数" class="headerlink" title="补充知识：可变参数"></a>补充知识：可变参数</h1><h1 id="补充知识：集合工具类Collections"><a href="#补充知识：集合工具类Collections" class="headerlink" title="补充知识：集合工具类Collections"></a>补充知识：集合工具类Collections</h1><h1 id="Collection体系的综合案例"><a href="#Collection体系的综合案例" class="headerlink" title="Collection体系的综合案例"></a>Collection体系的综合案例</h1><h1 id="Map集合体系"><a href="#Map集合体系" class="headerlink" title="Map集合体系"></a>Map集合体系</h1><h1 id="补充知识：集合的嵌套"><a href="#补充知识：集合的嵌套" class="headerlink" title="补充知识：集合的嵌套"></a>补充知识：集合的嵌套</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Jva 运算符</title>
      <link href="/posts/176c3e6e.html"/>
      <url>/posts/176c3e6e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础语法-运算符"><a href="#Java基础语法-运算符" class="headerlink" title="Java基础语法 运算符"></a>Java基础语法 运算符</h1><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">operator</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">operatorDemo1</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//掌握基本算数运算符；</span></span><br><span class="line">        <span class="built_in">int</span> a= <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">int</span> b=<span class="number">3</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a + b);<span class="comment">//13</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a - b);<span class="comment">//7</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a * b);<span class="comment">//30</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a / b);<span class="comment">//3</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a*<span class="number">1.0</span> / b);<span class="comment">//3.333333 转换为小数显示技巧</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a % b);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.1/和%的区别：两个数据做除法，/取结果的商，%取结果的余数。</p><p>1.2整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。</p><p>1.3数值拆分 </p><p>  一个三位数，将其拆分为个位、十位、百位后，打印出来</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> operatorTest2 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//需求：一个三位数，将其拆分为个位、十位、百位后，打印出来</span></span><br><span class="line">        <span class="keyword">int</span> data = <span class="number">234</span>;</span><br><span class="line">        <span class="keyword">int</span> ge = data % <span class="number">10</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(ge);<span class="comment">//4</span></span><br><span class="line">        <span class="keyword">int</span> shi = data / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(shi);<span class="comment">//3</span></span><br><span class="line">        <span class="keyword">int</span> bai = data <span class="regexp">/ 10 /</span> <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(bai);<span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公式总结：</p><p> 个位 ：数值 % 10 </p><p>十位 ：数值 / 10 % 10</p><p> 百位 ：数值 / 10 / 10 % 10 </p><p>千位 ：数值 / 10 / 10 / 10 % 10; ..</p><h2 id="2-字符的“-”操作"><a href="#2-字符的“-”操作" class="headerlink" title="2.字符的“+”操作"></a>2.字符的“+”操作</h2><p>2.1char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值：</p><p>‘a’  —  97        a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加</p><p>‘A’  —  65        A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加</p><p>‘0’  —  48        0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少</span></span><br><span class="line"><span class="type">char</span> <span class="variable">ch1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println(ch1 + <span class="number">1</span>); <span class="comment">// 输出98，97 + 1 = 98</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">ch2</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">System.out.println(ch2 + <span class="number">1</span>); <span class="comment">// 输出66，65 + 1 = 66</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">ch3</span> <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">System.out.println(ch3 + <span class="number">1</span>); <span class="comment">// 输出49，48 + 1 = 49</span></span><br></pre></td></tr></table></figure><p>2.2 byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。</p><p>2.3 整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型</p><p>2.4 除了做基本数学运算，还有哪些功能？</p><p>  与字符串做+运算时会被当成连接符，其结果还是字符串。  能算则算，不能算就在一起</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">operator</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">operatorDemo2</span>&lt;<span class="title">abc</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//符号+连接符</span></span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">5</span> ;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;abc&quot;</span> + a); <span class="comment">// abc5</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="number">5</span> + a); <span class="comment">// 10</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;abc&quot;</span> + <span class="number">5</span> + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//abc5a</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="number">15</span> + <span class="string">&quot;abc&quot;</span> + <span class="number">15</span>);<span class="comment">//abc15abc</span></span><br><span class="line">System.<span class="keyword">out</span>.println(a + <span class="string">&quot;&quot;</span> +<span class="string">&#x27;a&#x27;</span>);<span class="comment">//5a</span></span><br><span class="line">System.<span class="keyword">out</span>.println(a + <span class="string">&#x27;a&#x27;</span>+<span class="string">&quot; nanci &quot;</span>);<span class="comment">//=5+97 nanci = 102 anci</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;nanci&quot;</span>+ a + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//nanci5a</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;nanci&quot;</span>+ ( a + <span class="string">&#x27;a&#x27;</span> ));<span class="comment">//nanci102</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       </p><h2 id="3-赋值运算符（应用）"><a href="#3-赋值运算符（应用）" class="headerlink" title="3.赋值运算符（应用）"></a>3.赋值运算符（应用）</h2><p>3.1 赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</p><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=10，将10赋值给变量a</td></tr><tr><td>+=</td><td>加后赋值</td><td>a+=b，将a+b的值给a</td></tr><tr><td>-=</td><td>减后赋值</td><td>a-=b，将a-b的值给a</td></tr><tr><td>*=</td><td>乘后赋值</td><td>a*=b，将a×b的值给a</td></tr><tr><td>/=</td><td>除后赋值</td><td>a/=b，将a÷b的商给a</td></tr><tr><td>%=</td><td>取余后赋值</td><td>a%=b，将a÷b的余数给a</td></tr></tbody></table></div><p>注意：扩展的赋值运算符隐含了强制类型转换。</p><ol><li><p>2作用是什么</p><p>基本作用是赋值；+=还可以实现数据的累加，把别人的数据加给自己</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会赋值运算符</span></span><br><span class="line">        <span class="type">int</span> a= <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">200</span>;</span><br><span class="line">        <span class="comment">//a = a + b;</span></span><br><span class="line">        a += b;<span class="comment">//a=(int)(a+b)</span></span><br><span class="line">        System.out.println(a);<span class="comment">//210</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">       <span class="comment">// i= (byte) (i+j);</span></span><br><span class="line">        i +=j;</span><br><span class="line">        System.out.println(i);<span class="comment">//30</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> m=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">3</span>;</span><br><span class="line">       <span class="comment">// m += n;//等价于m=(int)m+n;</span></span><br><span class="line">       <span class="comment">// m -= n;//等价于m=(int)m-n;</span></span><br><span class="line">       <span class="comment">// m *= n;//等价于m=(int)m*n;</span></span><br><span class="line">       <span class="comment">// m /= n;//等价于m=(int)m/n;</span></span><br><span class="line">        m %= n;<span class="comment">//等价于m=(int)m%n;</span></span><br><span class="line">        System.out.println(m);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-自增自减运算符"><a href="#3-自增自减运算符" class="headerlink" title="3.自增自减运算符"></a>3.自增自减运算符</h2><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>自增</td><td>变量的值加1</td></tr><tr><td>—</td><td>自减</td><td>变量的值减1</td></tr></tbody></table></div><p>3.1注意事项：</p><p>​    ++和— 既可以放在变量的后边，也可以放在变量的前边。</p><p>​    单独使用的时候， ++和— 无论是放在变量的前边还是后边，结果是一样的。</p><p>​    参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者—。</p><p>​    参与操作的时候，如果放在变量的前边，先拿变量做++或者—，后拿变量参与操作。</p><p>​    最常见的用法：单独使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会自增自减运算符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        i++; <span class="comment">// 单独使用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i:&quot;</span> + i); <span class="comment">// i:11</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        ++j; <span class="comment">// 单独使用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;j:&quot;</span> + j); <span class="comment">// j:11</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x++; <span class="comment">// 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;x:&quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y); <span class="comment">// x:11，y:10</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ++m; <span class="comment">// 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m:&quot;</span> + m + <span class="string">&quot;, m:&quot;</span> + m); <span class="comment">// m:11，m:11</span></span><br><span class="line">        <span class="comment">//面试题</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rs3</span> <span class="operator">=</span> c++ + ++c - --d - ++d + <span class="number">1</span> + c--;</span><br><span class="line">        <span class="comment">//c 10 11 12 11</span></span><br><span class="line">        <span class="comment">//d 5 4 5</span></span><br><span class="line">        <span class="comment">//rs3 =10 + 12 - 4 - 5 + 1 + 12=26</span></span><br><span class="line">        System.out.println(c);<span class="comment">//11</span></span><br><span class="line">        System.out.println(d);<span class="comment">//5</span></span><br><span class="line">        System.out.println(rs3);<span class="comment">//26</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.2 自增、自减运算符是什么，有什么作用？ </p><p>++、—。对当前变量值+1、-1 </p><p> 3.3 自增、自减运算符在变量前后有区别吗？</p><p> 如果单独使用放前后是没有区别的。</p><p> 非单独使用：在变量前 ，先进行变量自增/自减，再使用变量。 </p><p> 非单独使用：在变量后 ，先使用变量，再进行变量自增/自减</p><h2 id="4-关系运算符（应用）"><a href="#4-关系运算符（应用）" class="headerlink" title="4.关系运算符（应用）"></a>4.关系运算符（应用）</h2><p>4.1关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。</p><div class="table-container"><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td>!=</td><td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td></tr><tr><td>&gt;</td><td>a&gt;b，判断a是否大于b，成立为true，不成立为false</td></tr><tr><td>&gt;=</td><td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td>&lt;</td><td>a&lt;b，判断a是否小于b，成立为true，不成立为false</td></tr><tr><td>&lt;=</td><td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table></div><p>4.2 关系运算符的结果都是boolean类型，要么是true，要么是false。</p><p>4.3 千万不要把“==”误写成“=”，”==”是判断是否相等的关系，”=”是赋值。</p><h2 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h2><p>5.1 逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。</p><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与</td><td>a&amp;b，a和b都是true，结果为true，否则为false</td></tr><tr><td>\</td><td></td><td>逻辑或</td><td>a\</td><td>b，a和b都是false，结果为false，否则为true</td></tr><tr><td>^</td><td>逻辑异或</td><td>a^b，a和b结果不同为true，相同为false</td></tr><tr><td>!</td><td>逻辑非</td><td>!a，结果和a的结果正好相反</td></tr></tbody></table></div><h2 id="6-短路逻辑运算符"><a href="#6-短路逻辑运算符" class="headerlink" title="6.短路逻辑运算符"></a>6.短路逻辑运算符</h2><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>短路与</td><td>作用和&amp;相同，但是有短路效果</td></tr><tr><td>\</td><td>\</td><td></td><td>短路或</td><td>作用和\</td><td>相同，但是有短路效果</td></tr></tbody></table></div><p>6.1 说明：</p><ul><li>逻辑与&amp;，无论左边真假，右边都要执行。</li><li>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。</li><li>逻辑或|，无论左边真假，右边都要执行。</li><li>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</li></ul><p>6.2逻辑运算符有哪些，有什么特点？</p><p>⚫ 逻辑与“&amp;” ：有一个为false、结果是false </p><p>⚫ 短路与&amp;&amp;： 一个为false、结果是false。前一个为false,后一个条件不执行了 </p><p>⚫ 逻辑或“|”：有一个为true、结果是true </p><p>⚫ 短路或||：一个为true、结果是true。前一个为true，后一个条件不执行了 </p><p>⚫ 逻辑非“!”：!false=true、 !true=false </p><p>⚫ 逻辑异或“^” ：相同是false、不同是true。 </p><p>⚫ 注意：实际开发中、常用的逻辑运算符还是：&amp;&amp; 、 || 、 ！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会使用逻辑运算符</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">9.8</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">storage</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">        <span class="comment">//尺寸大于6.9；内存大于8；</span></span><br><span class="line">        <span class="comment">//逻辑&amp;前后都为真才为真</span></span><br><span class="line">        System.out.println(size &gt;= <span class="number">6.95</span> &amp; storage &gt;=<span class="number">8</span>);<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//尺寸大于6.9；内存大于8；</span></span><br><span class="line">        <span class="comment">//逻辑或前后都为真才为真</span></span><br><span class="line">        System.out.println(size &gt;= <span class="number">6.95</span> | storage &gt;=<span class="number">8</span>);<span class="comment">//ture</span></span><br><span class="line">        <span class="comment">//取反</span></span><br><span class="line"></span><br><span class="line">       System.out.println(!ture);<span class="comment">//false</span></span><br><span class="line">       System.out.println(!faluse);<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//异或两个不同为真</span></span><br><span class="line">       System.out.println(ture ^ ture);<span class="comment">//false</span></span><br><span class="line">       System.out.println(<span class="literal">false</span> ^ <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">        System.out.println(ture ^ <span class="literal">false</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(<span class="literal">false</span> ^ ture);<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//短路与</span></span><br><span class="line">        <span class="comment">//短路或；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">20</span>;</span><br><span class="line">        System.out.println(a &gt; <span class="number">100</span> &amp;&amp; ++b&gt;<span class="number">10</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(b);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        System.out.println(a &gt; <span class="number">100</span> &amp; ++b&gt;<span class="number">10</span>);<span class="comment">//false</span></span><br><span class="line">        System.out.println(b);<span class="comment">//21</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        System.out.println(i &gt;<span class="number">2</span> || ++j &gt; <span class="number">10</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(j);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i &gt;<span class="number">2</span> | ++j &gt; <span class="number">10</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(j);<span class="comment">//21</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-三元运算符"><a href="#7-三元运算符" class="headerlink" title="7.三元运算符"></a>7.三元运算符</h2><p>7.1三元运算符语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关系表达式 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会三元运算符</span></span><br><span class="line">       <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">98</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> score &gt;=<span class="number">60</span> ? <span class="string">&quot;考试通过&quot;</span>:<span class="string">&quot;挂科&quot;</span>;</span><br><span class="line">        System.out.println(rs);<span class="comment">//考试通过</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从两个数找出较大值；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> a&gt;b ? a:b;</span><br><span class="line">        System.out.println(max);<span class="comment">//100</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//求三个整数最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span><span class="number">30</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i &gt; j ? i:j;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rsmax</span> <span class="operator">=</span> temp &gt; k ? temp : k;</span><br><span class="line">        System.out.println(rsmax);<span class="comment">//30</span></span><br><span class="line">        <span class="comment">//三元嵌套</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rsmax2</span> <span class="operator">=</span> i &gt; j ? (i &gt; k ? i : k):(j &gt; k ? j : k);</span><br><span class="line">        System.out.println(rsmax2);<span class="comment">//30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-运算符优先级"><a href="#8-运算符优先级" class="headerlink" title="8.运算符优先级"></a>8.运算符优先级</h2><ol><li>1在表达式中，哪个运算符先执行后执行是要看优先级的，例如 “*、/” 的优先级高于”+、-”</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">operator</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">operatorDemo7</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="number">10</span> &gt; <span class="number">3</span> || <span class="number">10</span> &gt; <span class="number">3</span> &amp;&amp; <span class="number">10</span> &lt; <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line">        System.<span class="keyword">out</span>.println( (<span class="number">10</span> &gt; <span class="number">3</span> || <span class="number">10</span> &gt; <span class="number">3</span> ) &amp;&amp; <span class="number">10</span> &lt; <span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-键盘录入"><a href="#9-键盘录入" class="headerlink" title="9.键盘录入"></a>9.键盘录入</h2><p>9.1 请完成Java程序与用户交互，比如录入用户输入的名称、年龄，怎么办？。</p><p>API （Application Programming Interface,应用程序编程接口） ⚫ Java写好的程序(功能代码)，咱们可以直接调用。 ⚫ Oracle 也为Java写好的程序提供了相应的 API文档(技术使用说明书) 。</p><p>9.2 下载API文档： <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;//<span class="number">1.</span>导包</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ScannerDemo &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">     Scanner sc = <span class="built_in">new</span> Scanner(<span class="keyword">System</span>.<span class="keyword">in</span>);//得到键盘扫描对象</span><br><span class="line">    //调用对象功能等待接受</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;请输入您的年龄: &quot;);</span><br><span class="line">     <span class="type">int</span> age = sc.nextInt() ;</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;您的你年龄是: &quot;+age);</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;请输入您的名字: &quot;);</span><br><span class="line">     String <span class="type">name</span> = sc.next() ;</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;欢迎: &quot;+<span class="type">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请输入您的年龄:<br>120<br>您的你年龄是: 120<br>请输入您的名字:<br>南辞<br>欢迎: 南辞</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java类型转换</title>
      <link href="/posts/16b8fe02.html"/>
      <url>/posts/16b8fe02.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java-Basic-Grammar"><a href="#Java-Basic-Grammar" class="headerlink" title="Java-Basic-Grammar"></a>Java-Basic-Grammar</h1><p>Java基础语法</p><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="1-自动类型转换"><a href="#1-自动类型转换" class="headerlink" title="1.自动类型转换"></a>1.自动类型转换</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package type;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">dmo</span>&lt;<span class="title">a</span>, <span class="title">b</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">byte</span> a = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">int</span> b = a; <span class="comment">//发生了自动类型转换</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a);</span><br><span class="line">        System.<span class="keyword">out</span>.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> age = <span class="number">23</span>;</span><br><span class="line">        <span class="built_in">double</span> c = age;<span class="comment">//自动类型转换</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">char</span> ch = <span class="string">&#x27;a&#x27;</span>; <span class="comment">//0001100</span></span><br><span class="line">        <span class="built_in">int</span> code = ch;<span class="comment">//00000000 00000000 00000000 00001100</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(code);<span class="comment">//37</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.1 类型转换转换的原因：存在不同类型的变量赋值给其他类型的变量 。</p><p>1.2 自动类型转换是：类型范围小的变量，可以直接赋值给类型范围大的变量。</p><h2 id="2-表达式的自动类型转换"><a href="#2-表达式的自动类型转换" class="headerlink" title="2.表达式的自动类型转换"></a>2.表达式的自动类型转换</h2><p>2.1 表达式的自动类型转换是什么样的？</p><p>小范围的类型会自动转换成大范围的类型运算。</p><p>2.2 表达式的最终结果类型是由谁决定的？</p><p>最终类型由表达式中的最高类型决定。 </p><p>2.3 表达式的有哪些类型转换是需要注意的？ </p><p>byte short char是直接转换成int类型参与运算的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package type;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TypeDemo2</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">byte</span> a = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">int</span> b = <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">double</span> c = <span class="number">1.0</span>;</span><br><span class="line">        <span class="built_in">double</span> rs = a + b + c;</span><br><span class="line">        System.<span class="keyword">out</span>.println(rs); <span class="comment">// 31.0</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">double</span> rs2 = a + b - <span class="number">2.3</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(rs2);  <span class="comment">// 27.7</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//面试题</span></span><br><span class="line">        <span class="built_in">byte</span> i = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">byte</span> j = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">int</span> k = i+ j;</span><br><span class="line">        System.<span class="keyword">out</span>.println(k);<span class="comment">//为了结果保真性 200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-强制类型转换"><a href="#3-强制类型转换" class="headerlink" title="3.强制类型转换"></a>3.强制类型转换</h2><p>3.1 类型范围大的数据或者变量，不能直接赋值给类型范围小的变量，会报错，把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量必须进行强制类型转换。</p><p>3.2 强制类型转换格式：目标数据类型 变量名 = (目标数据类型)值或者变量;</p><p>3.3 整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型；</p><p>3.4 boolean类型不能与其他基本数据类型相互转；</p><p>3.5 强制类型转换有哪些需要注意的？ </p><p>可能出现数据丢失。 小数强制转换成整数是直接截断小数保留整数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package type;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TypeDemo3</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//理解强制类型转换</span></span><br><span class="line">        <span class="built_in">int</span> a = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">byte</span> b= (<span class="built_in">byte</span>) a;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a);<span class="comment">//20</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(b);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">1500</span>;</span><br><span class="line">        <span class="built_in">byte</span> j = (<span class="built_in">byte</span>) i;</span><br><span class="line">        System.<span class="keyword">out</span>.println(j);<span class="comment">//-36</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">double</span> score = <span class="number">99.5</span>;</span><br><span class="line">        <span class="built_in">int</span> it = (<span class="built_in">int</span>) score;</span><br><span class="line">        System.<span class="keyword">out</span>.println(it);<span class="comment">//99</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java笔记</title>
      <link href="/posts/b6543913.html"/>
      <url>/posts/b6543913.html</url>
      
        <content type="html"><![CDATA[<p>快捷键</p><p>main+enter=</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br></pre></td></tr></table></figure><p>sout=</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br></pre></td></tr></table></figure><p>alt+enter=万能提示键</p><p>CTRL+d 复制</p><p>fori输出for语句</p><p>print横行打印</p><p>\t加空格</p><p>arr.fori数组快捷键</p><p>ctrl ait t 调用for</p><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="1-自动类型转换"><a href="#1-自动类型转换" class="headerlink" title="1.自动类型转换"></a>1.自动类型转换</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package type;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">dmo</span>&lt;<span class="title">a</span>, <span class="title">b</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">byte</span> a = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">int</span> b = a; <span class="comment">//发生了自动类型转换</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a);</span><br><span class="line">        System.<span class="keyword">out</span>.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> age = <span class="number">23</span>;</span><br><span class="line">        <span class="built_in">double</span> c = age;<span class="comment">//自动类型转换</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(c);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">char</span> ch = <span class="string">&#x27;a&#x27;</span>; <span class="comment">//0001100</span></span><br><span class="line">        <span class="built_in">int</span> code = ch;<span class="comment">//00000000 00000000 00000000 00001100</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(code);<span class="comment">//37</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要进行类型转换？ </p><p> 存在不同类型的变量赋值给其他类型的变量 </p><p>自动类型转换是什么样的？ </p><p> 类型范围小的变量，可以直接赋值给类型范围大的变量</p><h2 id="2-表达式的自动类型转换"><a href="#2-表达式的自动类型转换" class="headerlink" title="2.表达式的自动类型转换"></a>2.表达式的自动类型转换</h2><p>表达式的自动类型转换是什么样的？</p><p>  小范围的类型会自动转换成大范围的类型运算。</p><p>表达式的最终结果类型是由谁决定的？</p><p>  最终类型由表达式中的最高类型决定。 </p><p>表达式的有哪些类型转换是需要注意的？ </p><p>   byte short char是直接转换成int类型参与运算的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package type;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TypeDemo2</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">byte</span> a = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">int</span> b = <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">double</span> c = <span class="number">1.0</span>;</span><br><span class="line">        <span class="built_in">double</span> rs = a + b + c;</span><br><span class="line">        System.<span class="keyword">out</span>.println(rs); <span class="comment">// 31.0</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">double</span> rs2 = a + b - <span class="number">2.3</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(rs2);  <span class="comment">// 27.7</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//面试题</span></span><br><span class="line">        <span class="built_in">byte</span> i = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">byte</span> j = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">int</span> k = i+ j;</span><br><span class="line">        System.<span class="keyword">out</span>.println(k);<span class="comment">//为了结果保真性 200</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-强制类型转换"><a href="#3-强制类型转换" class="headerlink" title="3.强制类型转换"></a>3.强制类型转换</h2><p>   类型范围大的数据或者变量，不能直接<strong>赋值</strong>给<strong>类型范围小</strong>的变量，会报错，把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量必须进行强制类型转换。</p><p>强制类型转换格式：目标数据类型 变量名 = (目标数据类型)值或者变量;</p><p>整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型；</p><p>boolean类型不能与其他基本数据类型相互转；</p><p>强制类型转换有哪些需要注意的？ </p><p>可能出现数据丢失。 小数强制转换成整数是直接截断小数保留整数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package type;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TypeDemo3</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//理解强制类型转换</span></span><br><span class="line">        <span class="built_in">int</span> a = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">byte</span> b= (<span class="built_in">byte</span>) a;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a);<span class="comment">//20</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(b);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">1500</span>;</span><br><span class="line">        <span class="built_in">byte</span> j = (<span class="built_in">byte</span>) i;</span><br><span class="line">        System.<span class="keyword">out</span>.println(j);<span class="comment">//-36</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">double</span> score = <span class="number">99.5</span>;</span><br><span class="line">        <span class="built_in">int</span> it = (<span class="built_in">int</span>) score;</span><br><span class="line">        System.<span class="keyword">out</span>.println(it);<span class="comment">//99</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">operator</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">operatorDemo1</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//掌握基本算数运算符；</span></span><br><span class="line">        <span class="built_in">int</span> a= <span class="number">10</span>;</span><br><span class="line">        <span class="built_in">int</span> b=<span class="number">3</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a + b);<span class="comment">//13</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a - b);<span class="comment">//7</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a * b);<span class="comment">//30</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a / b);<span class="comment">//3</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a*<span class="number">1.0</span> / b);<span class="comment">//3.333333 转换为小数显示技巧</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(a % b);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  /和%的区别：两个数据做除法，/取结果的商，%取结果的余数。</p><p>  整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。</p><p>数值拆分 </p><p>需求：一个三位数，将其拆分为个位、十位、百位后，打印出来</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> operatorTest2 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//需求：一个三位数，将其拆分为个位、十位、百位后，打印出来</span></span><br><span class="line">        <span class="keyword">int</span> data = <span class="number">234</span>;</span><br><span class="line">        <span class="keyword">int</span> ge = data % <span class="number">10</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(ge);<span class="comment">//4</span></span><br><span class="line">        <span class="keyword">int</span> shi = data / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(shi);<span class="comment">//3</span></span><br><span class="line">        <span class="keyword">int</span> bai = data <span class="regexp">/ 10 /</span> <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(bai);<span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公式总结：</p><p> 个位 ：数值 % 10 </p><p>十位 ：数值 / 10 % 10</p><p> 百位 ：数值 / 10 / 10 % 10 </p><p>千位 ：数值 / 10 / 10 / 10 % 10; ..</p><h2 id="字符的“-”操作"><a href="#字符的“-”操作" class="headerlink" title="字符的“+”操作"></a>字符的“+”操作</h2><p>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值：</p><p>‘a’  —  97        a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加</p><p>‘A’  —  65        A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加</p><p>‘0’  —  48        0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少</span></span><br><span class="line"><span class="type">char</span> <span class="variable">ch1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println(ch1 + <span class="number">1</span>); <span class="comment">// 输出98，97 + 1 = 98</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">ch2</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">System.out.println(ch2 + <span class="number">1</span>); <span class="comment">// 输出66，65 + 1 = 66</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="variable">ch3</span> <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">System.out.println(ch3 + <span class="number">1</span>); <span class="comment">// 输出49，48 + 1 = 49</span></span><br></pre></td></tr></table></figure><p>byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。</p><p>整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型</p><p>除了做基本数学运算，还有哪些功能？</p><p> 与字符串做+运算时会被当成连接符，其结果还是字符串。  能算则算，不能算就在一起</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">operator</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">operatorDemo2</span>&lt;<span class="title">abc</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//符号+连接符</span></span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">5</span> ;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;abc&quot;</span> + a); <span class="comment">// abc5</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="number">5</span> + a); <span class="comment">// 10</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;abc&quot;</span> + <span class="number">5</span> + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//abc5a</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="number">15</span> + <span class="string">&quot;abc&quot;</span> + <span class="number">15</span>);<span class="comment">//abc15abc</span></span><br><span class="line">System.<span class="keyword">out</span>.println(a + <span class="string">&quot;&quot;</span> +<span class="string">&#x27;a&#x27;</span>);<span class="comment">//5a</span></span><br><span class="line">System.<span class="keyword">out</span>.println(a + <span class="string">&#x27;a&#x27;</span>+<span class="string">&quot; nanci &quot;</span>);<span class="comment">//=5+97 nanci = 102 anci</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;nanci&quot;</span>+ a + <span class="string">&#x27;a&#x27;</span>);<span class="comment">//nanci5a</span></span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="string">&quot;nanci&quot;</span>+ ( a + <span class="string">&#x27;a&#x27;</span> ));<span class="comment">//nanci102</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​       </p><h2 id="赋值运算符（应用）"><a href="#赋值运算符（应用）" class="headerlink" title="赋值运算符（应用）"></a>赋值运算符（应用）</h2><p>赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</p><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=10，将10赋值给变量a</td></tr><tr><td>+=</td><td>加后赋值</td><td>a+=b，将a+b的值给a</td></tr><tr><td>-=</td><td>减后赋值</td><td>a-=b，将a-b的值给a</td></tr><tr><td>*=</td><td>乘后赋值</td><td>a*=b，将a×b的值给a</td></tr><tr><td>/=</td><td>除后赋值</td><td>a/=b，将a÷b的商给a</td></tr><tr><td>%=</td><td>取余后赋值</td><td>a%=b，将a÷b的余数给a</td></tr></tbody></table></div><p>注意：</p><p>扩展的赋值运算符隐含了强制类型转换。</p><p> 作用是什么</p><p> 基本作用是赋值</p><p>+=还可以实现数据的累加，把别人的数据加给自己</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会赋值运算符</span></span><br><span class="line">        <span class="type">int</span> a= <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">200</span>;</span><br><span class="line">        <span class="comment">//a = a + b;</span></span><br><span class="line">        a += b;<span class="comment">//a=(int)(a+b)</span></span><br><span class="line">        System.out.println(a);<span class="comment">//210</span></span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">       <span class="comment">// i= (byte) (i+j);</span></span><br><span class="line">        i +=j;</span><br><span class="line">        System.out.println(i);<span class="comment">//30</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> m=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> n=<span class="number">3</span>;</span><br><span class="line">       <span class="comment">// m += n;//等价于m=(int)m+n;</span></span><br><span class="line">       <span class="comment">// m -= n;//等价于m=(int)m-n;</span></span><br><span class="line">       <span class="comment">// m *= n;//等价于m=(int)m*n;</span></span><br><span class="line">       <span class="comment">// m /= n;//等价于m=(int)m/n;</span></span><br><span class="line">        m %= n;<span class="comment">//等价于m=(int)m%n;</span></span><br><span class="line">        System.out.println(m);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>自增</td><td>变量的值加1</td></tr><tr><td>—</td><td>自减</td><td>变量的值减1</td></tr></tbody></table></div><p>注意事项：</p><p>​    ++和— 既可以放在变量的后边，也可以放在变量的前边。</p><p>​    单独使用的时候， ++和— 无论是放在变量的前边还是后边，结果是一样的。</p><p>​    参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者—。</p><p>​    参与操作的时候，如果放在变量的前边，先拿变量做++或者—，后拿变量参与操作。</p><p>​    最常见的用法：单独使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会自增自减运算符</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        i++; <span class="comment">// 单独使用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i:&quot;</span> + i); <span class="comment">// i:11</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        ++j; <span class="comment">// 单独使用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;j:&quot;</span> + j); <span class="comment">// j:11</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x++; <span class="comment">// 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;x:&quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y); <span class="comment">// x:11，y:10</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ++m; <span class="comment">// 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m:&quot;</span> + m + <span class="string">&quot;, m:&quot;</span> + m); <span class="comment">// m:11，m:11</span></span><br><span class="line">        <span class="comment">//面试题</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rs3</span> <span class="operator">=</span> c++ + ++c - --d - ++d + <span class="number">1</span> + c--;</span><br><span class="line">        <span class="comment">//c 10 11 12 11</span></span><br><span class="line">        <span class="comment">//d 5 4 5</span></span><br><span class="line">        <span class="comment">//rs3 =10 + 12 - 4 - 5 + 1 + 12=26</span></span><br><span class="line">        System.out.println(c);<span class="comment">//11</span></span><br><span class="line">        System.out.println(d);<span class="comment">//5</span></span><br><span class="line">        System.out.println(rs3);<span class="comment">//26</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自增、自减运算符是什么，有什么作用？ </p><p>++、—。对当前变量值+1、-1 </p><p> 自增、自减运算符在变量前后有区别吗？</p><p> 如果单独使用放前后是没有区别的。</p><p> 非单独使用：在变量前 ，先进行变量自增/自减，再使用变量。 </p><p> 非单独使用：在变量后 ，先使用变量，再进行变量自增/自减</p><h2 id="关系运算符（应用）"><a href="#关系运算符（应用）" class="headerlink" title="关系运算符（应用）"></a>关系运算符（应用）</h2><p>关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。</p><div class="table-container"><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td>!=</td><td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td></tr><tr><td>&gt;</td><td>a&gt;b，判断a是否大于b，成立为true，不成立为false</td></tr><tr><td>&gt;=</td><td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td>&lt;</td><td>a&lt;b，判断a是否小于b，成立为true，不成立为false</td></tr><tr><td>&lt;=</td><td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table></div><p>​    关系运算符的结果都是boolean类型，要么是true，要么是false。</p><p>​    千万不要把“==”误写成“=”，”==”是判断是否相等的关系，”=”是赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。</p><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与</td><td>a&amp;b，a和b都是true，结果为true，否则为false</td></tr><tr><td>\</td><td></td><td>逻辑或</td><td>a\</td><td>b，a和b都是false，结果为false，否则为true</td></tr><tr><td>^</td><td>逻辑异或</td><td>a^b，a和b结果不同为true，相同为false</td></tr><tr><td>!</td><td>逻辑非</td><td>!a，结果和a的结果正好相反</td></tr></tbody></table></div><h2 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h2><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>短路与</td><td>作用和&amp;相同，但是有短路效果</td></tr><tr><td>\</td><td>\</td><td></td><td>短路或</td><td>作用和\</td><td>相同，但是有短路效果</td></tr></tbody></table></div><ul><li><p>逻辑与&amp;，无论左边真假，右边都要执行。</p></li><li><p>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。</p></li><li><p>逻辑或|，无论左边真假，右边都要执行。</p></li><li><p>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</p></li></ul><p>逻辑运算符有哪些，有什么特点？</p><p>⚫ 逻辑与“&amp;” ：有一个为false、结果是false </p><p>⚫ 短路与&amp;&amp;： 一个为false、结果是false。前一个为false,后一个条件不执行了 </p><p>⚫ 逻辑或“|”：有一个为true、结果是true </p><p>⚫ 短路或||：一个为true、结果是true。前一个为true，后一个条件不执行了 </p><p>⚫ 逻辑非“!”：!false=true、 !true=false </p><p>⚫ 逻辑异或“^” ：相同是false、不同是true。 </p><p>⚫ 注意：实际开发中、常用的逻辑运算符还是：&amp;&amp; 、 || 、 ！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会使用逻辑运算符</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">9.8</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">storage</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">        <span class="comment">//尺寸大于6.9；内存大于8；</span></span><br><span class="line">        <span class="comment">//逻辑&amp;前后都为真才为真</span></span><br><span class="line">        System.out.println(size &gt;= <span class="number">6.95</span> &amp; storage &gt;=<span class="number">8</span>);<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//尺寸大于6.9；内存大于8；</span></span><br><span class="line">        <span class="comment">//逻辑或前后都为真才为真</span></span><br><span class="line">        System.out.println(size &gt;= <span class="number">6.95</span> | storage &gt;=<span class="number">8</span>);<span class="comment">//ture</span></span><br><span class="line">        <span class="comment">//取反</span></span><br><span class="line"></span><br><span class="line">       System.out.println(!ture);<span class="comment">//false</span></span><br><span class="line">       System.out.println(!faluse);<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//异或两个不同为真</span></span><br><span class="line">       System.out.println(ture ^ ture);<span class="comment">//false</span></span><br><span class="line">       System.out.println(<span class="literal">false</span> ^ <span class="literal">false</span>);<span class="comment">//false</span></span><br><span class="line">        System.out.println(ture ^ <span class="literal">false</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(<span class="literal">false</span> ^ ture);<span class="comment">//ture</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//短路与</span></span><br><span class="line">        <span class="comment">//短路或；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span><span class="number">20</span>;</span><br><span class="line">        System.out.println(a &gt; <span class="number">100</span> &amp;&amp; ++b&gt;<span class="number">10</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(b);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        System.out.println(a &gt; <span class="number">100</span> &amp; ++b&gt;<span class="number">10</span>);<span class="comment">//false</span></span><br><span class="line">        System.out.println(b);<span class="comment">//21</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        System.out.println(i &gt;<span class="number">2</span> || ++j &gt; <span class="number">10</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(j);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">        System.out.println(i &gt;<span class="number">2</span> | ++j &gt; <span class="number">10</span>);<span class="comment">//ture</span></span><br><span class="line">        System.out.println(j);<span class="comment">//21</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>三元运算符语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关系表达式 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">operatorDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会三元运算符</span></span><br><span class="line">       <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">98</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">rs</span> <span class="operator">=</span> score &gt;=<span class="number">60</span> ? <span class="string">&quot;考试通过&quot;</span>:<span class="string">&quot;挂科&quot;</span>;</span><br><span class="line">        System.out.println(rs);<span class="comment">//考试通过</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从两个数找出较大值；</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> a&gt;b ? a:b;</span><br><span class="line">        System.out.println(max);<span class="comment">//100</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//求三个整数最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span><span class="number">30</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i &gt; j ? i:j;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rsmax</span> <span class="operator">=</span> temp &gt; k ? temp : k;</span><br><span class="line">        System.out.println(rsmax);<span class="comment">//30</span></span><br><span class="line">        <span class="comment">//三元嵌套</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rsmax2</span> <span class="operator">=</span> i &gt; j ? (i &gt; k ? i : k):(j &gt; k ? j : k);</span><br><span class="line">        System.out.println(rsmax2);<span class="comment">//30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>⚫ 在表达式中，哪个运算符先执行后执行是要看优先级的，例如 “*、/” 的优先级高于”+、-”</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">operator</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">operatorDemo7</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="number">10</span> &gt; <span class="number">3</span> || <span class="number">10</span> &gt; <span class="number">3</span> &amp;&amp; <span class="number">10</span> &lt; <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line">        System.<span class="keyword">out</span>.println( (<span class="number">10</span> &gt; <span class="number">3</span> || <span class="number">10</span> &gt; <span class="number">3</span> ) &amp;&amp; <span class="number">10</span> &lt; <span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="键盘录入"><a href="#键盘录入" class="headerlink" title="键盘录入"></a>键盘录入</h2><p>请完成Java程序与用户交互，比如录入用户输入的名称、年龄，怎么办？。</p><p>API （Application Programming Interface,应用程序编程接口） ⚫ Java写好的程序(功能代码)，咱们可以直接调用。 ⚫ Oracle 也为Java写好的程序提供了相应的 API文档(技术使用说明书) 。</p><p>下载API文档： <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;//<span class="number">1.</span>导包</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ScannerDemo &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">     Scanner sc = <span class="built_in">new</span> Scanner(<span class="keyword">System</span>.<span class="keyword">in</span>);//得到键盘扫描对象</span><br><span class="line">    //调用对象功能等待接受</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;请输入您的年龄: &quot;);</span><br><span class="line">     <span class="type">int</span> age = sc.nextInt() ;</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;您的你年龄是: &quot;+age);</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;请输入您的名字: &quot;);</span><br><span class="line">     String <span class="type">name</span> = sc.next() ;</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;欢迎: &quot;+<span class="type">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请输入您的年龄:<br>120<br>您的你年龄是: 120<br>请输入您的名字:<br>姚江<br>欢迎: 姚江</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java流程控制语句</title>
      <link href="/posts/e94a9901.html"/>
      <url>/posts/e94a9901.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java基础语法-流程控制语句"><a href="#Java基础语法-流程控制语句" class="headerlink" title="Java基础语法 流程控制语句"></a>Java基础语法 流程控制语句</h2><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。</p><h3 id="流程控制语句分类"><a href="#流程控制语句分类" class="headerlink" title="流程控制语句分类"></a>流程控制语句分类</h3><p>​    顺序结构</p><p>​    分支结构(if, switch)</p><p>​    循环结构(for, while, do…while)</p><h3 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1.顺序结构"></a>1.顺序结构</h3><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p><h2 id="2-分支结构"><a href="#2-分支结构" class="headerlink" title="2.分支结构"></a>2.分支结构</h2><h3 id="2-1分支结构：if语句"><a href="#2-1分支结构：if语句" class="headerlink" title="2. 1分支结构：if语句"></a>2. 1分支结构：if语句</h3><h4 id="if语句格式1"><a href="#if语句格式1" class="headerlink" title="if语句格式1"></a>if语句格式1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if语句格式2"><a href="#if语句格式2" class="headerlink" title="if语句格式2"></a>if语句格式2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if语句格式3"><a href="#if语句格式3" class="headerlink" title="if语句格式3"></a>if语句格式3</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125; </span><br><span class="line">…</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.branch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ifDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//学会if语句 if (条件表达式) &#123;语句体;&#125;</span></span><br><span class="line">        <span class="comment">//格式1心跳不正常，提醒检查</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">hearBeat</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">if</span>(hearBeat &lt; <span class="number">60</span> || hearBeat &gt; <span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您的心跳是：&quot;</span> + hearBeat +<span class="string">&quot;,您可能需要进一步检查！ &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;检查结束&quot;</span>);</span><br><span class="line">        <span class="comment">//格式2 if (条件表达式) &#123;语句体1;&#125; else &#123;语句体2;&#125;</span></span><br><span class="line">        <span class="comment">//发红包</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(money &gt;= <span class="number">1314</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您当前发送红包成功&quot;</span>);&#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您当前发送红包失败&quot;</span>);&#125;</span><br><span class="line">        <span class="comment">//格式3</span></span><br><span class="line">        <span class="comment">//绩效系统</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span><span class="number">99</span>;</span><br><span class="line">            <span class="keyword">if</span>(score &gt;=<span class="number">0</span> &amp;&amp;score &lt;<span class="number">60</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您本月绩效是：C&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>    <span class="keyword">if</span>(score &gt;=<span class="number">60</span> &amp;&amp;score &lt;<span class="number">80</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您本月绩效是：B&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>    <span class="keyword">if</span>(score &gt;=<span class="number">80</span> &amp;&amp;score &lt;<span class="number">90</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您本月绩效是：A&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>    <span class="keyword">if</span>(score &gt;=<span class="number">90</span> &amp;&amp;score &lt;=<span class="number">100</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您本月绩效是：A+&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;您输入的数不对&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-分支结构：switch语句"><a href="#2-2-分支结构：switch语句" class="headerlink" title="2.2 分支结构：switch语句"></a>2.2 分支结构：switch语句</h3><h5 id="switch语句结构"><a href="#switch语句结构" class="headerlink" title="switch语句结构"></a>switch语句结构</h5><ul><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句体n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行流程：</p><ul><li><p>首先计算出表达式的值 </p></li><li><p>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。 </p></li><li><p>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.itheima.branch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">switchDemo2</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">         <span class="comment">// 周一：埋头苦干，解决bug     周五：今晚吃鸡</span></span><br><span class="line">         <span class="comment">// 周二：请求大牛程序员帮忙    周六：与王婆介绍的小芳相亲</span></span><br><span class="line">         <span class="comment">//周三：今晚啤酒、龙虾、小烧烤  周日：郁郁寡欢、准备上班。</span></span><br><span class="line">         <span class="comment">// 周四： 主动帮助新来的女程序解决bug</span></span><br><span class="line">        String weekday = <span class="string">&quot;周三&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (weekday)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周一&quot;</span>:</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;埋头苦干，解决bug&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周二&quot;</span>:</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">&quot;请求大牛程序员帮忙&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周三&quot;</span>:</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">&quot;今晚啤酒、龙虾、小烧烤&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周四&quot;</span>:</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">&quot; 主动帮助新来的女程序解决bug&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周五&quot;</span>:</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">&quot;今晚吃鸡&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周六&quot;</span>:</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">&quot;与王婆介绍的小芳相亲&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;周日&quot;</span>:</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;郁郁寡欢、准备上班&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">&quot;数据有误！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if、switch分支各自适合做什么业务场景？</p><p> ⚫ if其实在功能上远远强大于switch。 </p><p>⚫ if适合做区间匹配。</p><p> ⚫ switch适合做：值匹配的分支选择、代码优雅。</p><p>switch分支注意事项： </p><p>① 表达式类型只能是byte、short、int、char，JDK5开始支持枚举，JDK7开始支持String、 不支持double、float、long。 </p><p>② case给出的值不允许重复，且只能是字面量，不能是变量。</p><p> ③ 不要忘记写break，否则会出现穿透现象。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.itheima.branch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">switchDemo3</span> &#123;</span><br><span class="line">    <span class="comment">//清楚switch注意点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> a = <span class="number">0.1</span>+<span class="number">0.2</span>;</span><br><span class="line">        System.out.<span class="built_in">println</span>(a);<span class="comment">//不支持，因为在java中计算不精确，不支持double、float、long。</span></span><br><span class="line"><span class="comment">//0.30000000000000004</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>switch穿透性案例(月份天数查看器)</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.branch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">switcDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//  需求：用户输入月份可以展示该月份的天数。</span></span><br><span class="line">        <span class="comment">// 1、3 、5、 7 、 8、 10、 12月份是 31天</span></span><br><span class="line">        <span class="comment">//2月份是闰年为29天、非闰年为28天。</span></span><br><span class="line">        <span class="comment">// 4 、6 、9、 11月份 是30天</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span>(month)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                System.out.println(month+<span class="string">&quot;是31天&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(month+<span class="string">&quot;闰年29天，非闰年28天&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                System.out.println(month+<span class="string">&quot;是31天&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注意：如果switch中得case，没有对应break的话，则会出现case穿透的现象。</li></ul><h3 id="3-循环结构：for循环"><a href="#3-循环结构：for循环" class="headerlink" title="3 循环结构：for循环"></a>3 循环结构：for循环</h3><h4 id="3-1-for循环结构（掌握）"><a href="#3-1-for循环结构（掌握）" class="headerlink" title="3.1 for循环结构（掌握）"></a>3.1 for循环结构（掌握）</h4><ul><li>for循环格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句;条件判断语句;条件控制语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>格式解释：</p><ul><li>初始化语句：  用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样</li><li>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去</li><li>循环体语句：  用于表示循环反复执行的内容，简单说就是循环反复执行的事情</li><li>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</li></ul></li><li><p>执行流程：</p><p>①执行初始化语句</p><p>②执行条件判断语句，看其结果是true还是false</p><p>​             如果是false，循环结束</p><p>​             如果是true，继续执行</p><p>③执行循环体语句</p><p>④执行条件控制语句</p><p>⑤回到②继续</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.nanci.loop;</span><br><span class="line"></span><br><span class="line">public class ForDemo1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span>);<span class="regexp">//</span>Hello World<span class="regexp">//</span>Hello World<span class="regexp">//</span>Hello World</span><br><span class="line">            <span class="regexp">//</span> 循环一开始，执行int i = <span class="number">0</span> 一次。</span><br><span class="line"><span class="regexp">//</span> 然后判断循环条件：<span class="number">0</span> &lt; <span class="number">3</span> 返回true ,进入到循环体中执行输出 ：helloWorld ，然后执行迭代语句i++ , 此时i=<span class="number">1</span>了。</span><br><span class="line"><span class="regexp">//</span>然后判断循环条件：<span class="number">1</span> &lt; <span class="number">3</span> 返回true ,进入到循环体中执行输出 ：helloWorld ，然后执行迭代语句i++ , 此时i=<span class="number">2</span>了。</span><br><span class="line"><span class="regexp">//</span> 然后判断循环条件：<span class="number">2</span> &lt; <span class="number">3</span> 返回true ,进入到循环体中执行输出 ：helloWorld， 然后执行迭代语句i++ , 此时i=<span class="number">3</span>了。</span><br><span class="line"><span class="regexp">//</span>然后判断循环条件：<span class="number">3</span> &lt; <span class="number">3</span> 返回false, 循环立即结束！</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World&quot;</span>);<span class="regexp">//</span>三次</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-2-for循环练习-输出数据"><a href="#3-2-for循环练习-输出数据" class="headerlink" title="3.2 for循环练习-输出数据"></a>3.2 for循环练习-输出数据</h4><ul><li>需求：在控制台输出1-5</li><li>示例代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanci.loop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求：在控制台输出1-5</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            sum += i;<span class="comment">//等价sum=sum+i</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;一到五的和是：&quot;</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-for循环练习-求奇数和"><a href="#3-3-for循环练习-求奇数和" class="headerlink" title="3.3 for循环练习-求奇数和"></a>3.3 for循环练习-求奇数和</h4><ul><li>需求：求1-10之间的奇数和，并把求和结果在控制台输出 }：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanci.loop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">                <span class="comment">//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="comment">//对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数</span></span><br><span class="line">                    <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                        sum += i;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//当循环执行完毕时，将最终数据打印出来</span></span><br><span class="line">                System.out.println(<span class="string">&quot;1-10之间的奇数和是：&quot;</span> + sum);<span class="comment">//1-10之间的奇数和是：25</span></span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line">            sum1 +=i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;1-10之间的奇数和是：&quot;</span> + sum1);<span class="comment">//1-10之间的奇数和是：25</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方式一：在for循环中，通过if筛选出奇数 for (int i = 1; i &lt;= 10; i++) { if (i % 2 == 1) { // i = 1 3 5 7…}}</p><p> 方式二：直接使用for循环找出奇数。 for (int i = 1; i &lt;= 10; i+=2) { }</p><h4 id="3-4-for循环练习-水仙花-统计水仙花数个数"><a href="#3-4-for循环练习-水仙花-统计水仙花数个数" class="headerlink" title="3.4 for循环练习-水仙花 统计水仙花数个数"></a>3.4 for循环练习-水仙花 统计水仙花数个数</h4><ul><li>需求：在控制台输出所有的“水仙花数” 统计“水仙花数”一共有多少个，并在控制台输出个数</li><li>解释：什么是水仙花数？<ul><li>水仙花数，指的是一个三位数，个位、十位、百位的数字立方和等于原数<ul><li>例如<code>153  3*3*3 + 5*5*5 + 1*1*1 = 153</code></li></ul></li></ul></li><li>思路：<ol><li>获取所有的三位数，准备进行筛选，最小的三位数为100，最大的三位数为999，使用for循环获取</li><li>获取每一个三位数的个位，十位，百位，做if语句判断是否是水仙花数</li></ol></li><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanci.loop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//需求：在控制台输出所有的“水仙花数”</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt;<span class="number">999</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i % <span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> i / <span class="number">10</span> / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(ge*ge*ge+shi*shi*shi+bai*bai*bai == i)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;\t&quot;</span>);<span class="comment">//153370371407</span></span><br><span class="line">                <span class="comment">//print横行打印   \t加空格</span></span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();<span class="comment">//换行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;水仙花个数是： &quot;</span>+count);<span class="comment">//水仙花个数是： 4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>今后如果需求带有统计xxx，请先想到计数器变量</p></li><li><p>计数器变量定义的位置，必须在循环外部</p></li><li><p>如何计算出水仙花的个数? </p><p>⚫ 在循环外定义一个变量count用于记录水仙花数。</p><p> ⚫ 每输出水仙花数时，让count++</p></li></ul><h3 id="4-循环结构：-while循环"><a href="#4-循环结构：-while循环" class="headerlink" title="4 循环结构： while循环"></a>4 循环结构： while循环</h3><h4 id="4-1-while结构"><a href="#4-1-while结构" class="headerlink" title="4.1 while结构"></a>4.1 while结构</h4><ul><li><p>while循环完整格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span> (条件判断语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>while循环执行流程：</p><p>①执行初始化语句</p><p>②执行条件判断语句，看其结果是true还是false</p><p>​             如果是false，循环结束</p><p>​             如果是true，继续执行</p><p>③执行循环体语句</p><p>④执行条件控制语句</p><p>⑤回到②继续：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ackage com.nanci.loop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">whileDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;nanci sir&quot;</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;nanci sir&quot;</span>);<span class="comment">//死循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什么时候用for循环，什么时候用while循环？</p><p> ⚫ 功能上是完全一样的，for能解决的while也能解决，反之亦然。 </p><p>⚫ 使用规范是：知道循环几次：使用for；不知道循环几次建议使用：while。</p><h4 id="4-2-while循环练习-珠穆朗玛峰"><a href="#4-2-while循环练习-珠穆朗玛峰" class="headerlink" title="4.2 while循环练习-珠穆朗玛峰"></a>4.2 while循环练习-珠穆朗玛峰</h4><ul><li>需求：世界最高山峰是珠穆朗玛峰(8844.43米=8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫米。请问，我折叠多少次，可以折成珠穆朗玛峰的高度?</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//定义一个计数器，初始值为0</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//定义纸张厚度</span></span><br><span class="line"><span class="type">double</span> <span class="variable">paper</span> <span class="operator">=</span> <span class="number">0.1</span>;</span><br><span class="line"><span class="comment">//定义珠穆朗玛峰的高度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">zf</span> <span class="operator">=</span> <span class="number">8844430</span>;</span><br><span class="line"><span class="comment">//因为要反复折叠，所以要使用循环，但是不知道折叠多少次，这种情况下更适合使用while循环</span></span><br><span class="line"><span class="comment">//折叠的过程中当纸张厚度大于珠峰就停止了，因此继续执行的要求是纸张厚度小于珠峰高度</span></span><br><span class="line"><span class="keyword">while</span>(paper &lt;= zf) &#123;</span><br><span class="line"><span class="comment">//循环的执行过程中每次纸张折叠，纸张的厚度要加倍</span></span><br><span class="line">paper *= <span class="number">2</span>;</span><br><span class="line"><span class="comment">//在循环中执行累加，对应折叠了多少次</span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印计数器的值</span></span><br><span class="line">System.out.println(<span class="string">&quot;需要折叠：&quot;</span> + count + <span class="string">&quot;次&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-循环结构：do-while循环"><a href="#5-循环结构：do-while循环" class="headerlink" title="5 循环结构：do-while循环"></a>5 循环结构：do-while循环</h3><h4 id="5-1-do…while循环结构"><a href="#5-1-do…while循环结构" class="headerlink" title="5.1 do…while循环结构"></a>5.1 do…while循环结构</h4><ul><li><p>完整格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">条件控制语句;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nanci.loop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DowhileDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会do while</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span>  <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;nanci&quot;</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(i&lt;<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-三种循环的区别（理解）"><a href="#6-三种循环的区别（理解）" class="headerlink" title="6 三种循环的区别（理解）"></a>6 三种循环的区别（理解）</h3><h4 id="6-1-三种循环的区别"><a href="#6-1-三种循环的区别" class="headerlink" title="6.1 三种循环的区别"></a>6.1 三种循环的区别</h4><ul><li>for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）</li><li>do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</li></ul><h4 id="6-2-for循环和while的区别"><a href="#6-2-for循环和while的区别" class="headerlink" title="6.2 for循环和while的区别"></a>6.2 for循环和while的区别</h4><ul><li>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了</li><li>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用</li></ul><h4 id="6-3-死循环（无限循环）的三种格式"><a href="#6-3-死循环（无限循环）的三种格式" class="headerlink" title="6.3 死循环（无限循环）的三种格式"></a>6.3 死循环（无限循环）的三种格式</h4><ol><li>for(;;){}</li><li>while(true){}</li><li>do {} while(true);</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-array</title>
      <link href="/posts/bae8bafc.html"/>
      <url>/posts/bae8bafc.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java数组"><a href="#Java数组" class="headerlink" title="Java数组"></a>Java数组</h2><h3 id="什么是数组【理解】"><a href="#什么是数组【理解】" class="headerlink" title="什么是数组【理解】"></a>什么是数组【理解】</h3><p>​    数组就是存储数据长度固定的容器，存储多个数据的数据类型要一致。 </p><h3 id="1-数组定义格式【记忆】"><a href="#1-数组定义格式【记忆】" class="headerlink" title="1.数组定义格式【记忆】"></a>1.数组定义格式【记忆】</h3><h4 id="1-1第一种"><a href="#1-1第一种" class="headerlink" title="1.1第一种"></a>1.1第一种</h4><p>​    数据类型[] 数组名</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr;        </span><br><span class="line"><span class="type">double</span>[] arr;      </span><br><span class="line"><span class="type">char</span>[] arr;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">array</span>.<span class="keyword">create</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ArrayDemo1 &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        //学会静态化定义数组</span><br><span class="line">       // <span class="type">double</span>[] score = <span class="built_in">new</span> <span class="type">double</span>[]&#123;<span class="number">12.3</span>,<span class="number">13.4</span>,<span class="number">15.6</span>&#125;;</span><br><span class="line">        <span class="type">double</span>[] score = &#123;<span class="number">12.3</span>,<span class="number">13.4</span>,<span class="number">15.6</span>&#125;;</span><br><span class="line"></span><br><span class="line">        //<span class="type">int</span>[] age = <span class="built_in">new</span> <span class="type">int</span>[]&#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] age = &#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>&#125;;</span><br><span class="line"></span><br><span class="line">       // String[] names  = <span class="built_in">new</span> String[]&#123;&quot;小名&quot;,&quot;小红&quot;,&quot;小黄&quot;&#125;;</span><br><span class="line">        String[] names  = &#123;&quot;小名&quot;,&quot;小红&quot;,&quot;小黄&quot;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2第二种"><a href="#1-2第二种" class="headerlink" title="1.2第二种"></a>1.2第二种</h4><p>​    数据类型 数组名[]</p><p>​    示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[];</span><br><span class="line"><span class="type">double</span> arr[];</span><br><span class="line"><span class="type">char</span> arr[];</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package <span class="built_in">array</span>.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">ArrayDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//理解数组的注意事项</span></span><br><span class="line">        <span class="built_in">int</span>[] age = &#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">45</span>&#125;;</span><br><span class="line">        <span class="built_in">int</span> age1[] = &#123;<span class="number">23</span>,<span class="number">45</span>,<span class="number">77</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//什么数组放什么类型</span></span><br><span class="line">        <span class="comment">//String[] names = &#123;&quot;张三&quot;,&quot;李四&quot;,&quot;王五&quot;,&quot;12&quot;&#125;;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//数组定义长度固定</span></span><br><span class="line">        <span class="built_in">int</span>[] age2 = &#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">23</span>&#125;;</span><br><span class="line">        System.<span class="keyword">out</span>.println(age2[<span class="number">3</span>]);<span class="comment">//只能到二</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-数组动态初始化"><a href="#2-数组动态初始化" class="headerlink" title="2.数组动态初始化"></a>2.数组动态初始化</h3><h4 id="2-1什么是动态初始化"><a href="#2-1什么是动态初始化" class="headerlink" title="2.1什么是动态初始化"></a>2.1什么是动态初始化</h4><p>​    数组动态初始化就是只给定数组的长度，由系统给出默认初始化值。</p><h4 id="2-2动态初始化格式"><a href="#2-2动态初始化格式" class="headerlink" title="2.2动态初始化格式"></a>2.2动态初始化格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[数组长度];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h4 id="2-3动态初始化格式详解"><a href="#2-3动态初始化格式详解" class="headerlink" title="2.3动态初始化格式详解"></a>2.3动态初始化格式详解</h4><ul><li><p>等号左边：</p><ul><li><p>int:数组的数据类型</p></li><li><p>[]:代表这是一个数组</p></li><li><p>arr:代表数组的名称</p></li></ul></li><li><p>等号右边：</p><ul><li>new:为数组开辟内存空间</li></ul></li><li>int:数组的数据类型<ul><li>[]:代表这是一个数组</li></ul></li><li>5:代表数组的长度</li></ul><p>数组是属于什么类型，数组变量名中存储的是什么？ 引用数据类型，存储的数组在内存中的地址信息</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ArrayDemo4</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//学会动态化数组</span></span><br><span class="line">        <span class="comment">//数据类型[] 数组名 = new 数据类型[数组长度];</span></span><br><span class="line">        <span class="built_in">double</span>[] scores = <span class="keyword">new</span> <span class="built_in">double</span>[<span class="number">3</span>];<span class="comment">//&#123;0.0,0.0,0.0// &#125;</span></span><br><span class="line">        <span class="comment">//赋值                              0   1    2</span></span><br><span class="line">        scores[<span class="number">0</span>] = <span class="number">99.9</span>;</span><br><span class="line">        scores[<span class="number">1</span>] = <span class="number">99.9</span>;</span><br><span class="line">        scores[<span class="number">2</span>] = <span class="number">99.9</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(scores[<span class="number">0</span>]);<span class="comment">//99.9</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(scores[<span class="number">1</span>]);<span class="comment">//99.9</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(scores[<span class="number">2</span>]);<span class="comment">//99.9</span></span><br><span class="line"></span><br><span class="line">        String[] names = <span class="keyword">new</span> String[<span class="number">90</span>];</span><br><span class="line">        names[<span class="number">0</span>] = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        names[<span class="number">5</span>] = <span class="string">&quot;鲁肃&quot;</span>;</span><br><span class="line">        names[<span class="number">3</span>] = <span class="string">&quot;多环&quot;</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(names[<span class="number">0</span>]);<span class="comment">//张三</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(names[<span class="number">5</span>]);<span class="comment">//鲁肃</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(names[<span class="number">3</span>]);<span class="comment">//多环</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(names[<span class="number">2</span>]);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4动态初始化的写法"><a href="#2-4动态初始化的写法" class="headerlink" title="2.4动态初始化的写法"></a>2.4动态初始化的写法</h4><ol><li><p>动态初始化的写法是什么样的？ 数据类型[] 数组名 = new 数据类型[长度]; int[] ages = new int[4]; </p></li><li><p><strong>两种数组定义时的特点和场景有什么区别</strong></p><p>⚫<strong>当前已经知道存入的元素值，用静态初始化。</strong> </p><p>⚫<strong>当前还不清楚要存入哪些数据，用动态初始化</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ArrayDemo5 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//掌握动态吃实话元素默认规则</span></span><br><span class="line">        <span class="comment">//整型默认0</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        System.out.<span class="keyword">println</span>(arr[<span class="number">0</span>]);<span class="comment">//0</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(arr[<span class="number">9</span>]);<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符数组默认0</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">100</span>];</span><br><span class="line">       System.out.<span class="keyword">println</span>((<span class="keyword">int</span>)chars[<span class="number">0</span>]);<span class="comment">//0</span></span><br><span class="line">       System.out.<span class="keyword">println</span>((<span class="keyword">int</span>)chars[<span class="number">99</span>]);<span class="comment">//0</span></span><br><span class="line">       <span class="comment">//浮点默认0</span></span><br><span class="line">        <span class="keyword">double</span>[] scores = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">90</span>];</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="number">0</span>);<span class="comment">//0.0</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="number">99</span>);<span class="comment">//0.0</span></span><br><span class="line">        <span class="comment">//布尔类型数组</span></span><br><span class="line">        <span class="keyword">boolean</span>[] booleans = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">100</span>];</span><br><span class="line">        System.out.<span class="keyword">println</span>(booleans[<span class="number">0</span>]);<span class="comment">//false</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(booleans[<span class="number">99</span>]);<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//引用类型数组</span></span><br><span class="line">        String[] names = <span class="keyword">new</span> String[<span class="number">100</span>];</span><br><span class="line">        System.out.<span class="keyword">println</span>(names[<span class="number">0</span>]);<span class="comment">//null</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(names[<span class="number">99</span>]);<span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两种初始化的的使用场景总结、注意事项说明： </p><p>⚫ 动态初始化：只指定数组长度，后期赋值，适合开始知道数据的数量，但是不确定具体元素值的业务场景。</p><p> ⚫ 静态初始化：开始就存入元素值，适合一开始就能确定元素值的业务场景</p><p> 动态初始化数组后元素的默认值是什么样的？</p><p>⚫ byte、short、int 、char、long类型数组元素的默认值都是0 </p><p>⚫ float、double类型数组元素的默认值都是0.0 </p><p>⚫ boolean类型数组元素的默认值是false、String类型数组元素的默认值是null</p></li></ol><h3 id="3-数组元素访问【应用】"><a href="#3-数组元素访问【应用】" class="headerlink" title="3.数组元素访问【应用】"></a>3.数组元素访问【应用】</h3><h4 id="3-1什么是索引"><a href="#3-1什么是索引" class="headerlink" title="3.1什么是索引"></a>3.1什么是索引</h4><p>​    每一个存储到数组的元素，都会自动的拥有一个编号，从0开始。</p><p>​    这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素。     </p><h4 id="3-2访问数组元素格式"><a href="#3-2访问数组元素格式" class="headerlink" title="3.2访问数组元素格式"></a>3.2访问数组元素格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引];</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会访问数组元素</span></span><br><span class="line">       <span class="comment">// 取值</span></span><br><span class="line">        <span class="type">int</span>[] ages = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> ages[<span class="number">0</span>];</span><br><span class="line">        System.out.println(a);<span class="comment">//12</span></span><br><span class="line">        System.out.println(ages[<span class="number">1</span>]);<span class="comment">//23</span></span><br><span class="line">        System.out.println(ages[<span class="number">2</span>]);<span class="comment">//34</span></span><br><span class="line">       <span class="comment">// 赋值</span></span><br><span class="line">        ages[<span class="number">2</span>] = <span class="number">100</span>;</span><br><span class="line">        System.out.println(ages[<span class="number">2</span>]);<span class="comment">//100</span></span><br><span class="line">        <span class="comment">//访问数组长度</span></span><br><span class="line">        System.out.println(ages.length);<span class="comment">//3</span></span><br><span class="line">        <span class="comment">//数组的最大索引(元素个数大于0)</span></span><br><span class="line"></span><br><span class="line">        System.out.println(ages.length-<span class="number">1</span>);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.如何访问数组的元素？ 数组名称[索引]</p><ol><li><p>如何访问数组的长度？ 数组名称.length  数组名称[索引] </p></li><li><p>数组的最大索引怎么获取？ 数组名. length – 1 // 前提：元素个数大于0</p></li></ol><ul><li><h3 id="4-数组遍历"><a href="#4-数组遍历" class="headerlink" title="4.数组遍历"></a>4.数组遍历</h3></li><li><p>数组遍历：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</p><p>如何遍历数组？</p><p> int[] ages = {20, 30, 40, 50}; </p><p>for (int i = 0; i &lt; ages.length; i++)<br> { System.out.println(ages[i])；}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">traverseDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//学会数组遍历</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">12</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">67</span>,<span class="number">87</span>,<span class="number">44</span>&#125;;</span><br><span class="line">        <span class="comment">//原始遍历方式</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);<span class="comment">//12</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);<span class="comment">//34</span></span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);<span class="comment">//5</span></span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);<span class="comment">//67</span></span><br><span class="line">        System.out.println(arr[<span class="number">4</span>]);<span class="comment">//87</span></span><br><span class="line">        System.out.println(arr[<span class="number">5</span>]);<span class="comment">//44</span></span><br><span class="line">        <span class="comment">//for (int i = 0; i &lt;5 ; i++) &#123;</span></span><br><span class="line">        <span class="comment">//System.out.println(arr[i]);</span></span><br><span class="line">          <span class="comment">//终极形式</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;arr.length ; i++) &#123;</span><br><span class="line">                System.out.print(arr[i]+<span class="string">&quot;\t&quot;</span>);<span class="comment">//12 34 5 67 87 44</span></span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-1数组遍历求和"><a href="#4-1数组遍历求和" class="headerlink" title="4.1数组遍历求和"></a>4.1数组遍历求和</h4><p>某部门5名员工的销售额分别是：16、26、36、6、100，请计算出他们部门的总销售额</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">traverseDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">//数组遍历-求和</span></span><br><span class="line">        <span class="comment">//某部门5名员工的销售额分别是：16、26、36、6、100，请计算出他们部门的总销售额</span></span><br><span class="line">        <span class="built_in">int</span>[] money = &#123;<span class="number">16</span>, <span class="number">26</span>, <span class="number">36</span>, <span class="number">6</span>, <span class="number">100</span>&#125;;</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; money.length; i++) &#123;</span><br><span class="line">            <span class="keyword">sum</span> += money[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="keyword">sum</span>);<span class="comment">//184</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何实现批量数据的求和?</p><p>⚫ 使用数组存储批量数据</p><p> ⚫ 遍历数组中的每个数据，然后定义变量把他们累加起来。</p><h4 id="4-2数组最值"><a href="#4-2数组最值" class="headerlink" title="4.2数组最值"></a>4.2数组最值</h4><ul><li><p>最大值获取：从数组的所有元素中找出最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">traverseDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//求最大值</span></span><br><span class="line">        <span class="type">int</span>[] faceScores = &#123;<span class="number">15</span>, <span class="number">9000</span>, <span class="number">10000</span>, <span class="number">20000</span>, <span class="number">9500</span>, -<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> faceScores[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; faceScores.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(faceScores[i] &gt; max) &#123;</span><br><span class="line">                    max = faceScores[i];</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;System.out.println(max);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p> 数组元素求最大值如何实现的？</p><p> ① 数据拿到程序中去，用数组装起来。</p><p> ② 定义一个变量用于记录最大值，这个变量建议默认存储第一个元素值作为参照。 </p><p>③ 遍历数组的元素，如果该元素大于变量存储的元素，则替换变量存储的值为该元素。</p><p> ④ 循环结束后输出最大值变量即可。 目录 Contents ➢ 数组的定义 ➢ 数组的遍历 ➢ 数组的案例 ◆ 数组元素求</p><p>猜数字</p><p>需求 开发一个幸运小游戏，游戏规则如下： 游戏后台随机生成1-20之间的5个数（无所谓是否重复），然后让大家来猜数字： ➢ 未猜中提示：“未命中”，并继续猜测 ➢ 猜中提示：“运气不错，猜中了”，并输出该数据第一次出现的位置，且输出全部5个数据， 最 终结束本游戏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">traverseDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//猜数字 开发一个幸运小游戏，游戏规则如下： 游戏后台随机生成1-20之间的5个数（无所谓是否重复），然后让大家来猜数字</span></span><br><span class="line">        <span class="comment">//1.定义动态数组</span></span><br><span class="line">        <span class="type">int</span>[] data = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">//2.动态生成数字</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;data.length ; i++) &#123;</span><br><span class="line">          data[i] = r.nextInt(<span class="number">20</span>)+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.使用死循环猜数字</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//扫描器</span></span><br><span class="line">        OUT:</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入一到二十整数：&quot;</span>);</span><br><span class="line">           <span class="type">int</span> <span class="variable">gussData</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">           <span class="comment">//4.遍历看是否相等</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>    (data[i] == gussData)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您猜中了！索引是：&quot;</span>+i);</span><br><span class="line">                <span class="keyword">break</span> OUT;<span class="comment">//结束整个死循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;没猜中，重新猜！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.输出全部元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            System.out.println(data[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>猜数字游戏的实现步骤？</p><p> 动态初始化数组，存入5个随机的1-20之间的数据 ② 定义一个死循环，不断的猜数据，遍历数组，判断数据是否在数组中，如果在，进行 对应提示并结束死循环；如果没有猜中，提示继续。</p><h4 id="4-3随机排名"><a href="#4-3随机排名" class="headerlink" title="4.3随机排名"></a>4.3随机排名</h4><p>某公司开发部5名开发人员，要进行项目进展汇报演讲，现在采取随机排名后进行汇报。 请先依次录入5名员工的工号，然后展示出一组随机的排名顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.ServiceConfigurationError;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">traverseDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//随机排名</span></span><br><span class="line">        <span class="comment">//1.动态初始化一个数组</span></span><br><span class="line">        <span class="type">int</span>[] codes = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">//2定义循环，循环五次</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//扫描器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; codes.length; i++) &#123;</span><br><span class="line">            <span class="comment">//录入工号</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个员工的工号：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">            <span class="comment">//存在数组</span></span><br><span class="line">            codes[i] = code;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.遍历数组元素位置，随机索引</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; codes.length; i++) &#123;</span><br><span class="line">            <span class="comment">//随机一个索引位置：codes[index]</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(codes.length);</span><br><span class="line">            <span class="comment">//定义一个临时变量</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> codes[index];</span><br><span class="line">            codes[index] = codes[i];</span><br><span class="line">            codes[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.遍历数组元素输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; codes.length; i++) &#123;</span><br><span class="line">            System.out.print(codes[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如何实现随机排名的？ ① 定义一个动态初始化的数组用于录入数据。 ② 遍历数组中的每个元素，每次随机一个索引值，让当前元素与该索引位置处的元素进行交换。 ③ 遍历输出数组中的内容即可。</p><p>冒泡排序</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">traverseDemo6</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//冒泡排序</span></span><br><span class="line">        <span class="comment">//1.定义数组排序</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">//2.定义循环次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">         <span class="comment">//3.控制循环次数占位</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;arr.length -i<span class="number">-1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//判断大小</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> temp = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.<span class="built_in">print</span>(arr[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>冒泡排序的实现步骤。 </p><p>⚫ 定义一个外部循环控制总共需要冒几轮（数组的长度-1）</p><p> ⚫ 定义一个内部循环，控制每轮依次往后比较几个位置（数组长度-i-1）。</p><p> ⚫ 如果当前位置的元素值&gt;后一个位置的元素值，两者交换。 </p><h3 id="5-内存分配"><a href="#5-内存分配" class="headerlink" title="5.内存分配"></a>5.内存分配</h3><h4 id="5-1内存概述"><a href="#5-1内存概述" class="headerlink" title="5.1内存概述"></a>5.1内存概述</h4><p>​    内存是计算机中的重要原件，临时存储区域，作用是运行程序。</p><p>​    我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的。</p><p>​    必须放进内存中才能运行，运行完毕后会清空内存。 </p><p>​    Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。 </p><h4 id="5-2java中的内存分配"><a href="#5-2java中的内存分配" class="headerlink" title="5.2java中的内存分配"></a>5.2java中的内存分配</h4><ul><li>目前我们只需要记住两个内存，分别是：栈内存和堆内存</li></ul><div class="table-container"><table><thead><tr><th>区域名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>寄存器</td><td style="text-align:center">给CPU使用，和我们开发无关。</td></tr><tr><td>本地方法栈</td><td style="text-align:center">JVM在使用操作系统功能的时候使用，和我们开发无关。</td></tr><tr><td>方法区</td><td style="text-align:center">存储可以运行的class文件。</td></tr><tr><td>堆内存</td><td style="text-align:center">存储对象或者数组，new来创建的，都存储在堆内存。</td></tr><tr><td>方法栈</td><td style="text-align:center">方法运行时使用的内存，比如main方法运行，进入方法栈中执行。</td></tr></tbody></table></div><h4 id="5-3什么是静态初始化"><a href="#5-3什么是静态初始化" class="headerlink" title="5.3什么是静态初始化"></a>5.3什么是静态初始化</h4><p>​    在创建数组时，直接将元素确定    </p><h4 id="5-4静态初始化格式"><a href="#5-4静态初始化格式" class="headerlink" title="5.4静态初始化格式"></a>5.4静态初始化格式</h4><ul><li><p>完整版格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,...&#125;;</span><br></pre></td></tr></table></figure></li><li><p>简化版格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,...&#125;;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> array.create;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">memoyDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;;</span><br><span class="line">                arr[<span class="number">0</span>] = <span class="number">44</span>;</span><br><span class="line">                arr[<span class="number">1</span>] = <span class="number">55</span>;</span><br><span class="line">                arr[<span class="number">2</span>] = <span class="number">66</span>;</span><br><span class="line">                System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">                System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">                System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>两个数组变量指向同一个数组对象</p><p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20221028163349860.png" alt="image-20221028163349860"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package <span class="keyword">array</span>.<span class="keyword">create</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> memoyDemo2 &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span>[] arr1 = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;;</span><br><span class="line">                <span class="type">int</span>[] arr2 = arr1;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(arr1);</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(arr2);</span><br><span class="line">                arr2[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(arr1[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(arr2[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="5-2数组操作索引越界异常"><a href="#5-2数组操作索引越界异常" class="headerlink" title="5.2数组操作索引越界异常"></a>5.2数组操作索引越界异常</h4><ul><li><p>出现原因</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数组长度为3，索引范围是0~2，但是我们却访问了一个3的索引。</strong></p><p>程序运行后，将会抛出ArrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。 </p></li><li><p>解决方案</p><p>将错误的索引修改为正确的索引范围即可！</p></li></ul><h4 id="5-6空指针异常"><a href="#5-6空指针异常" class="headerlink" title="5.6空指针异常"></a>5.6空指针异常</h4><ul><li><p>出现原因</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把null赋值给数组</span></span><br><span class="line">        arr = <span class="literal">null</span>;</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>arr = null 这行代码，意味着变量arr将不会再保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。</p></li><li><p>解决方案</p><p>给数组一个真正的堆内存空间引用即可！</p><p>如果访问的元素位置超过最大索引，执行时会出现ArrayIndexOutOfBoundsException(数组索引越界异常) 如果数组变量中没有存储数组的地址，而是null, 在访问数组信息时会出现NullPointerException(空指针异常)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
